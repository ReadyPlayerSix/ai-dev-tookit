{
  "files": {
    "setup.py": {
      "path": "setup.py",
      "classes": [],
      "functions": [],
      "mini_librarian": "scripts/setup.json"
    },
    "benchmarks.old/benchmark_topology_analysis.py": {
      "path": "benchmarks.old/benchmark_topology_analysis.py",
      "classes": [],
      "functions": [
        "create_test_data",
        "naive_topology_analysis",
        "run_benchmark",
        "plot_results",
        "main"
      ],
      "mini_librarian": "scripts/benchmarks.old_benchmark_topology_analysis.json"
    },
    "isekaizen/__init__.py": {
      "path": "isekaizen/__init__.py",
      "classes": [],
      "functions": [],
      "mini_librarian": "scripts/isekaizen___init__.json"
    },
    "tests/test_augmentation.py": {
      "path": "tests/test_augmentation.py",
      "classes": [],
      "functions": [
        "run_comparative_test"
      ],
      "mini_librarian": "scripts/tests_test_augmentation.json"
    },
    "tests/test_batch_optimizer.py": {
      "path": "tests/test_batch_optimizer.py",
      "classes": [],
      "functions": [],
      "mini_librarian": "scripts/tests_test_batch_optimizer.json"
    },
    "tests/test_fix.py": {
      "path": "tests/test_fix.py",
      "classes": [],
      "functions": [],
      "mini_librarian": "scripts/tests_test_fix.json"
    },
    "tests/test_import.py": {
      "path": "tests/test_import.py",
      "classes": [],
      "functions": [],
      "mini_librarian": "scripts/tests_test_import.json"
    },
    "tests/test_pre_augment_optimizer.py": {
      "path": "tests/test_pre_augment_optimizer.py",
      "classes": [
        "SimpleModel",
        "DummyDataset",
        "MockPatternMap",
        "TestPreAugmentOptimizer"
      ],
      "functions": [],
      "mini_librarian": "scripts/tests_test_pre_augment_optimizer.json"
    },
    "tests/__init__.py": {
      "path": "tests/__init__.py",
      "classes": [],
      "functions": [],
      "mini_librarian": "scripts/tests___init__.json"
    },
    "visualization/comparative-lr-analysis.py": {
      "path": "visualization/comparative-lr-analysis.py",
      "classes": [],
      "functions": [],
      "mini_librarian": "scripts/visualization_comparative-lr-analysis.json"
    },
    "visualization/fibonacci-impact-analysis.py": {
      "path": "visualization/fibonacci-impact-analysis.py",
      "classes": [],
      "functions": [],
      "mini_librarian": "scripts/visualization_fibonacci-impact-analysis.json"
    },
    "benchmarks.old/examples/optimizer_configs.py": {
      "path": "benchmarks.old/examples/optimizer_configs.py",
      "classes": [],
      "functions": [
        "get_optimizer_config",
        "list_available_optimizers",
        "explain_optimizer_config"
      ],
      "mini_librarian": "scripts/benchmarks.old_examples_optimizer_configs.json"
    },
    "benchmarks.old/examples/optimizer_utils.py": {
      "path": "benchmarks.old/examples/optimizer_utils.py",
      "classes": [],
      "functions": [
        "configure_optimizer",
        "get_optimizer_description",
        "print_available_optimizers",
        "add_optimizer_arguments"
      ],
      "mini_librarian": "scripts/benchmarks.old_examples_optimizer_utils.json"
    },
    "benchmarks.old/examples/run_eve_optimizer.py": {
      "path": "benchmarks.old/examples/run_eve_optimizer.py",
      "classes": [],
      "functions": [
        "load_cifar10",
        "create_model",
        "train_epoch",
        "validate",
        "main"
      ],
      "mini_librarian": "scripts/benchmarks.old_examples_run_eve_optimizer.json"
    },
    "benchmarks.old/examples/run_pattern_mapper.py": {
      "path": "benchmarks.old/examples/run_pattern_mapper.py",
      "classes": [
        "NumpySafeEncoder",
        "SemanticType",
        "SemanticPattern",
        "SemanticPatternRegistry",
        "DomainPatternExtractor"
      ],
      "functions": [
        "numpy_safe_json_dump",
        "calculate_pattern_complexity",
        "load_dataset",
        "extract_visual_patterns",
        "create_pattern_map",
        "calculate_pattern_complexities",
        "order_patterns_by_complexity",
        "create_streamlined_pattern_map",
        "visualize_pattern_map",
        "save_pattern_map",
        "main"
      ],
      "mini_librarian": "scripts/benchmarks.old_examples_run_pattern_mapper.json"
    },
    "benchmarks.old/examples/run_streamlined_pattern_mapping.py": {
      "path": "benchmarks.old/examples/run_streamlined_pattern_mapping.py",
      "classes": [
        "NumpySafeEncoder",
        "SemanticType",
        "SemanticPattern",
        "SemanticPatternRegistry",
        "DomainPatternExtractor"
      ],
      "functions": [
        "numpy_safe_json_dump",
        "load_cifar10_data",
        "calculate_pattern_complexity",
        "extract_visual_patterns_from_cifar",
        "create_pattern_map",
        "calculate_pattern_complexities",
        "order_patterns_by_complexity",
        "visualize_pattern_map",
        "save_pattern_map",
        "create_streamlined_pattern_map",
        "main"
      ],
      "mini_librarian": "scripts/benchmarks.old_examples_run_streamlined_pattern_mapping.json"
    },
    "benchmarks.old/examples/run_streamlined_responsive.py": {
      "path": "benchmarks.old/examples/run_streamlined_responsive.py",
      "classes": [
        "StreamlinedPatternTrainer"
      ],
      "functions": [
        "print_progress_bar",
        "save_batch_diagnostics",
        "load_cifar10_data",
        "create_model",
        "visualize_training_results",
        "modify_pattern_risk_accuracy_tracker",
        "track_dynamic_weight_decays",
        "evaluate_model_detailed",
        "save_training_results_to_json",
        "main"
      ],
      "mini_librarian": "scripts/benchmarks.old_examples_run_streamlined_responsive.json"
    },
    "benchmarks.old/scripts/basic_benchmark.py": {
      "path": "benchmarks.old/scripts/basic_benchmark.py",
      "classes": [],
      "functions": [],
      "mini_librarian": "scripts/benchmarks.old_scripts_basic_benchmark.json"
    },
    "benchmarks.old/scripts/inference_benchmark.py": {
      "path": "benchmarks.old/scripts/inference_benchmark.py",
      "classes": [
        "SimpleModel"
      ],
      "functions": [
        "run_inference_benchmark"
      ],
      "mini_librarian": "scripts/benchmarks.old_scripts_inference_benchmark.json"
    },
    "benchmarks.old/scripts/multi-run_training_benchmark.py": {
      "path": "benchmarks.old/scripts/multi-run_training_benchmark.py",
      "classes": [
        "SimpleModel"
      ],
      "functions": [
        "run_single_benchmark",
        "run_training_benchmark"
      ],
      "mini_librarian": "scripts/benchmarks.old_scripts_multi-run_training_benchmark.json"
    },
    "benchmarks.old/scripts/repeated_inference_benchmark.py": {
      "path": "benchmarks.old/scripts/repeated_inference_benchmark.py",
      "classes": [
        "SimpleModel"
      ],
      "functions": [
        "run_single_benchmark",
        "run_inference_benchmark"
      ],
      "mini_librarian": "scripts/benchmarks.old_scripts_repeated_inference_benchmark.json"
    },
    "benchmarks.old/scripts/system_check.py": {
      "path": "benchmarks.old/scripts/system_check.py",
      "classes": [],
      "functions": [],
      "mini_librarian": "scripts/benchmarks.old_scripts_system_check.json"
    },
    "benchmarks.old/scripts/training_benchmark.py": {
      "path": "benchmarks.old/scripts/training_benchmark.py",
      "classes": [
        "SimpleModel"
      ],
      "functions": [
        "run_benchmark"
      ],
      "mini_librarian": "scripts/benchmarks.old_scripts_training_benchmark.json"
    },
    "benchmarks.old/examples/modified/augmentation-mediator-implementation.py": {
      "path": "benchmarks.old/examples/modified/augmentation-mediator-implementation.py",
      "classes": [
        "AugmentationMediator"
      ],
      "functions": [],
      "mini_librarian": "scripts/benchmarks.old_examples_modified_augmentation-mediator-implementation.json"
    },
    "benchmarks.old/examples/modified/hardware_diagnostics.py": {
      "path": "benchmarks.old/examples/modified/hardware_diagnostics.py",
      "classes": [
        "HardwareDiagnostics"
      ],
      "functions": [
        "main"
      ],
      "mini_librarian": "scripts/benchmarks.old_examples_modified_hardware_diagnostics.json"
    },
    "benchmarks.old/examples/modified/integration-example.py": {
      "path": "benchmarks.old/examples/modified/integration-example.py",
      "classes": [
        "EnhancedUnifiedRatioTrainer"
      ],
      "functions": [
        "load_cifar10_data",
        "example_usage"
      ],
      "mini_librarian": "scripts/benchmarks.old_examples_modified_integration-example.json"
    },
    "benchmarks.old/examples/modified/iris-weight-range-implementation.py": {
      "path": "benchmarks.old/examples/modified/iris-weight-range-implementation.py",
      "classes": [],
      "functions": [
        "register_unified_ratio_optimizer",
        "main",
        "patch_eve_unified_ratio"
      ],
      "mini_librarian": "scripts/benchmarks.old_examples_modified_iris-weight-range-implementation.json"
    },
    "benchmarks.old/examples/modified/lazy_augmentation.py": {
      "path": "benchmarks.old/examples/modified/lazy_augmentation.py",
      "classes": [
        "LazyPatternAugmentedDataset"
      ],
      "functions": [
        "lazy_augmentation_worker_init_fn",
        "create_optimized_dataloader",
        "create_lazy_augmented_dataset"
      ],
      "mini_librarian": "scripts/benchmarks.old_examples_modified_lazy_augmentation.json"
    },
    "benchmarks.old/examples/modified/mediator-base-interface.py": {
      "path": "benchmarks.old/examples/modified/mediator-base-interface.py",
      "classes": [
        "Mediator",
        "MediatorError",
        "MediatorInitializationError",
        "MediatorDataError"
      ],
      "functions": [
        "log_mediator_status",
        "estimate_memory_usage"
      ],
      "mini_librarian": "scripts/benchmarks.old_examples_modified_mediator-base-interface.json"
    },
    "benchmarks.old/examples/modified/mediator-factory.py": {
      "path": "benchmarks.old/examples/modified/mediator-factory.py",
      "classes": [],
      "functions": [
        "create_pattern_mediator",
        "create_augmentation_mediator",
        "create_ratio_tracker",
        "create_equilibrium_tracker",
        "get_all_mediator_types",
        "create_mediator"
      ],
      "mini_librarian": "scripts/benchmarks.old_examples_modified_mediator-factory.json"
    },
    "benchmarks.old/examples/modified/refactored_unified_ratio_training.py": {
      "path": "benchmarks.old/examples/modified/refactored_unified_ratio_training.py",
      "classes": [],
      "functions": [
        "parse_args",
        "main"
      ],
      "mini_librarian": "scripts/benchmarks.old_examples_modified_refactored_unified_ratio_training.json"
    },
    "benchmarks.old/examples/modified/regenerate_pattern_map.py": {
      "path": "benchmarks.old/examples/modified/regenerate_pattern_map.py",
      "classes": [],
      "functions": [
        "main"
      ],
      "mini_librarian": "scripts/benchmarks.old_examples_modified_regenerate_pattern_map.json"
    },
    "benchmarks.old/examples/modified/regenerate_pattern_map_non_image.py": {
      "path": "benchmarks.old/examples/modified/regenerate_pattern_map_non_image.py",
      "classes": [
        "NonImagePatternMapper"
      ],
      "functions": [
        "main"
      ],
      "mini_librarian": "scripts/benchmarks.old_examples_modified_regenerate_pattern_map_non_image.json"
    },
    "benchmarks.old/examples/modified/run_streamlined_unified_ratio_eve.py": {
      "path": "benchmarks.old/examples/modified/run_streamlined_unified_ratio_eve.py",
      "classes": [
        "PatternDataMediator",
        "UnifiedRatioTrainer"
      ],
      "functions": [
        "load_cifar10_data",
        "register_unified_ratio_optimizer",
        "calculate_optimal_workers",
        "track_unified_ratio_callback",
        "visualize_training_results",
        "format_metrics_table",
        "log_section",
        "create_model",
        "modify_pattern_risk_accuracy_tracker",
        "main"
      ],
      "mini_librarian": "scripts/benchmarks.old_examples_modified_run_streamlined_unified_ratio_eve.json"
    },
    "benchmarks.old/examples/modified/run_streamlined_unified_ratio_eve_with_model_swapping.py": {
      "path": "benchmarks.old/examples/modified/run_streamlined_unified_ratio_eve_with_model_swapping.py",
      "classes": [
        "PatternDataMediator",
        "UnifiedRatioTrainer"
      ],
      "functions": [
        "load_cifar10_data",
        "get_fibonacci_check_intervals",
        "register_unified_ratio_optimizer",
        "calculate_optimal_workers",
        "create_model",
        "track_unified_ratio_callback",
        "modify_pattern_risk_accuracy_tracker",
        "visualize_training_results",
        "format_metrics_table",
        "log_section",
        "patch_eve_unified_ratio",
        "main"
      ],
      "mini_librarian": "scripts/benchmarks.old_examples_modified_run_streamlined_unified_ratio_eve_with_model_swapping.json"
    },
    "benchmarks.old/examples/modified/run_terminal_ui.py": {
      "path": "benchmarks.old/examples/modified/run_terminal_ui.py",
      "classes": [],
      "functions": [
        "get_model",
        "get_dataset",
        "train_model",
        "main"
      ],
      "mini_librarian": "scripts/benchmarks.old_examples_modified_run_terminal_ui.json"
    },
    "benchmarks.old/examples/modified/run_ui_test.py": {
      "path": "benchmarks.old/examples/modified/run_ui_test.py",
      "classes": [],
      "functions": [
        "check_imports",
        "check_isekaizen_optimizers",
        "test_terminal_ui_basic",
        "test_urwid_ui",
        "test_run_terminal_ui",
        "main"
      ],
      "mini_librarian": "scripts/benchmarks.old_examples_modified_run_ui_test.json"
    },
    "benchmarks.old/examples/modified/simplified_pattern_mapping.py": {
      "path": "benchmarks.old/examples/modified/simplified_pattern_mapping.py",
      "classes": [
        "SimplifiedPatternMapper"
      ],
      "functions": [
        "main"
      ],
      "mini_librarian": "scripts/benchmarks.old_examples_modified_simplified_pattern_mapping.json"
    },
    "benchmarks.old/examples/modified/simplified_ratio_trainer.py": {
      "path": "benchmarks.old/examples/modified/simplified_ratio_trainer.py",
      "classes": [
        "SimplifiedRatioTrainer"
      ],
      "functions": [
        "load_cifar10_data",
        "create_model",
        "visualize_training_results",
        "track_learning_rate_callback",
        "main"
      ],
      "mini_librarian": "scripts/benchmarks.old_examples_modified_simplified_ratio_trainer.json"
    },
    "benchmarks.old/examples/modified/terminal_ui.py": {
      "path": "benchmarks.old/examples/modified/terminal_ui.py",
      "classes": [
        "TerminalUI",
        "UrwidTerminalUI"
      ],
      "functions": [
        "parse_args"
      ],
      "mini_librarian": "scripts/benchmarks.old_examples_modified_terminal_ui.json"
    },
    "benchmarks.old/examples/modified/training_monitor.py": {
      "path": "benchmarks.old/examples/modified/training_monitor.py",
      "classes": [
        "TrainingMonitor"
      ],
      "functions": [
        "example_usage"
      ],
      "mini_librarian": "scripts/benchmarks.old_examples_modified_training_monitor.json"
    },
    "benchmarks.old/examples/refactored/run_refactored_optimizer.py": {
      "path": "benchmarks.old/examples/refactored/run_refactored_optimizer.py",
      "classes": [],
      "functions": [
        "load_cifar10_data",
        "create_model",
        "visualize_training_results",
        "save_batch_diagnostics",
        "main"
      ],
      "mini_librarian": "scripts/benchmarks.old_examples_refactored_run_refactored_optimizer.json"
    },
    "benchmarks.old/examples/modified/baseline_tests/debug_pattern_tracker.py": {
      "path": "benchmarks.old/examples/modified/baseline_tests/debug_pattern_tracker.py",
      "classes": [],
      "functions": [
        "debug_pattern_tracker_initialization"
      ],
      "mini_librarian": "scripts/benchmarks.old_examples_modified_baseline_tests_debug_pattern_tracker.json"
    },
    "benchmarks.old/examples/modified/baseline_tests/debug_test.py": {
      "path": "benchmarks.old/examples/modified/baseline_tests/debug_test.py",
      "classes": [],
      "functions": [],
      "mini_librarian": "scripts/benchmarks.old_examples_modified_baseline_tests_debug_test.json"
    },
    "benchmarks.old/examples/modified/baseline_tests/fix_pattern_tracking.py": {
      "path": "benchmarks.old/examples/modified/baseline_tests/fix_pattern_tracking.py",
      "classes": [],
      "functions": [
        "patch_pattern_risk_accuracy_tracker",
        "patch_eve_natural_weights",
        "patch_pattern_translation",
        "apply_all_patches"
      ],
      "mini_librarian": "scripts/benchmarks.old_examples_modified_baseline_tests_fix_pattern_tracking.json"
    },
    "benchmarks.old/examples/modified/baseline_tests/run_eve_baseline_metrics.py": {
      "path": "benchmarks.old/examples/modified/baseline_tests/run_eve_baseline_metrics.py",
      "classes": [
        "BaselineMetricsCollector"
      ],
      "functions": [
        "patch_eve_for_metrics",
        "main"
      ],
      "mini_librarian": "scripts/benchmarks.old_examples_modified_baseline_tests_run_eve_baseline_metrics.json"
    },
    "benchmarks.old/examples/modified/baseline_tests/run_eve_baseline_metrics_fixed.py": {
      "path": "benchmarks.old/examples/modified/baseline_tests/run_eve_baseline_metrics_fixed.py",
      "classes": [
        "BaselineMetricsCollector"
      ],
      "functions": [
        "patch_eve_for_metrics",
        "main"
      ],
      "mini_librarian": "scripts/benchmarks.old_examples_modified_baseline_tests_run_eve_baseline_metrics_fixed.json"
    },
    "benchmarks.old/examples/modified/baseline_tests/run_multiple_baselines.py": {
      "path": "benchmarks.old/examples/modified/baseline_tests/run_multiple_baselines.py",
      "classes": [],
      "functions": [
        "main"
      ],
      "mini_librarian": "scripts/benchmarks.old_examples_modified_baseline_tests_run_multiple_baselines.json"
    },
    "benchmarks.old/models/src/__init__.py": {
      "path": "benchmarks.old/models/src/__init__.py",
      "classes": [],
      "functions": [],
      "mini_librarian": "scripts/benchmarks.old_models_src___init__.json"
    },
    "benchmarks.old/models/src/assessment/ai_assessment.py": {
      "path": "benchmarks.old/models/src/assessment/ai_assessment.py",
      "classes": [
        "StudyMaterial",
        "TestQuestion",
        "AIEducationalAssessment"
      ],
      "functions": [],
      "mini_librarian": "scripts/benchmarks.old_models_src_assessment_ai_assessment.json"
    },
    "benchmarks.old/models/src/assessment/knowledge_probe.py": {
      "path": "benchmarks.old/models/src/assessment/knowledge_probe.py",
      "classes": [
        "KnowledgeProbe"
      ],
      "functions": [
        "run_knowledge_probe"
      ],
      "mini_librarian": "scripts/benchmarks.old_models_src_assessment_knowledge_probe.json"
    },
    "benchmarks.old/models/src/assessment/__init__.py": {
      "path": "benchmarks.old/models/src/assessment/__init__.py",
      "classes": [],
      "functions": [],
      "mini_librarian": "scripts/benchmarks.old_models_src_assessment___init__.json"
    },
    "benchmarks.old/models/src/cortex/coordinator.py": {
      "path": "benchmarks.old/models/src/cortex/coordinator.py",
      "classes": [
        "DomainType",
        "ProcessingConfig",
        "CortexCoordinator"
      ],
      "functions": [],
      "mini_librarian": "scripts/benchmarks.old_models_src_cortex_coordinator.json"
    },
    "benchmarks.old/models/src/cortex/diagnostics.py": {
      "path": "benchmarks.old/models/src/cortex/diagnostics.py",
      "classes": [
        "DiagnosticType",
        "DiagnosticResult",
        "CortexDiagnostics"
      ],
      "functions": [
        "test_integrated_diagnostics"
      ],
      "mini_librarian": "scripts/benchmarks.old_models_src_cortex_diagnostics.json"
    },
    "benchmarks.old/models/src/cortex/integrated_kt_rpg.py": {
      "path": "benchmarks.old/models/src/cortex/integrated_kt_rpg.py",
      "classes": [
        "SkillTree",
        "KTParameters",
        "Pattern",
        "IntegratedCortexSystem"
      ],
      "functions": [
        "test_integrated_system"
      ],
      "mini_librarian": "scripts/benchmarks.old_models_src_cortex_integrated_kt_rpg.json"
    },
    "benchmarks.old/models/src/cortex/pattern_orchestrator.py": {
      "path": "benchmarks.old/models/src/cortex/pattern_orchestrator.py",
      "classes": [
        "OrchestrationMode",
        "PatternOrchestrator"
      ],
      "functions": [],
      "mini_librarian": "scripts/benchmarks.old_models_src_cortex_pattern_orchestrator.json"
    },
    "benchmarks.old/models/src/cortex/pattern_store.py": {
      "path": "benchmarks.old/models/src/cortex/pattern_store.py",
      "classes": [
        "ValidationStatus",
        "PatternMetrics",
        "Pattern",
        "PatternStore"
      ],
      "functions": [],
      "mini_librarian": "scripts/benchmarks.old_models_src_cortex_pattern_store.json"
    },
    "benchmarks.old/models/src/cortex/resource_manager.py": {
      "path": "benchmarks.old/models/src/cortex/resource_manager.py",
      "classes": [
        "ResourceManager"
      ],
      "functions": [],
      "mini_librarian": "scripts/benchmarks.old_models_src_cortex_resource_manager.json"
    },
    "benchmarks.old/models/src/cortex/rpg_manager.py": {
      "path": "benchmarks.old/models/src/cortex/rpg_manager.py",
      "classes": [
        "PatternType",
        "SkillTree",
        "Pattern",
        "RPGCortexManager"
      ],
      "functions": [],
      "mini_librarian": "scripts/benchmarks.old_models_src_cortex_rpg_manager.json"
    },
    "benchmarks.old/models/src/cortex/semantic_core.py": {
      "path": "benchmarks.old/models/src/cortex/semantic_core.py",
      "classes": [
        "SemanticType",
        "SemanticPattern",
        "SemanticPatternRegistry",
        "DomainPatternExtractor"
      ],
      "functions": [],
      "mini_librarian": "scripts/benchmarks.old_models_src_cortex_semantic_core.json"
    },
    "benchmarks.old/models/src/cortex/__init__.py": {
      "path": "benchmarks.old/models/src/cortex/__init__.py",
      "classes": [],
      "functions": [],
      "mini_librarian": "scripts/benchmarks.old_models_src_cortex___init__.json"
    },
    "benchmarks.old/models/src/specialists/base.py": {
      "path": "benchmarks.old/models/src/specialists/base.py",
      "classes": [
        "BaseSpecialist"
      ],
      "functions": [],
      "mini_librarian": "scripts/benchmarks.old_models_src_specialists_base.json"
    },
    "benchmarks.old/models/src/specialists/sentiment.py": {
      "path": "benchmarks.old/models/src/specialists/sentiment.py",
      "classes": [
        "EmotionalPattern",
        "SentimentSpecialist"
      ],
      "functions": [],
      "mini_librarian": "scripts/benchmarks.old_models_src_specialists_sentiment.json"
    },
    "benchmarks.old/models/src/specialists/text.py": {
      "path": "benchmarks.old/models/src/specialists/text.py",
      "classes": [
        "TextPattern",
        "TextSpecialist"
      ],
      "functions": [],
      "mini_librarian": "scripts/benchmarks.old_models_src_specialists_text.json"
    },
    "benchmarks.old/models/src/specialists/vision.py": {
      "path": "benchmarks.old/models/src/specialists/vision.py",
      "classes": [
        "SemanticPattern",
        "VisionSpecialist"
      ],
      "functions": [],
      "mini_librarian": "scripts/benchmarks.old_models_src_specialists_vision.json"
    },
    "benchmarks.old/models/src/specialists/__init__.py": {
      "path": "benchmarks.old/models/src/specialists/__init__.py",
      "classes": [],
      "functions": [],
      "mini_librarian": "scripts/benchmarks.old_models_src_specialists___init__.json"
    },
    "benchmarks.old/models/src/utils/config.py": {
      "path": "benchmarks.old/models/src/utils/config.py",
      "classes": [
        "GPUConfig",
        "MemoryPoolConfig",
        "ProcessingConfig",
        "KTParameters",
        "SystemConfiguration"
      ],
      "functions": [],
      "mini_librarian": "scripts/benchmarks.old_models_src_utils_config.json"
    },
    "benchmarks.old/models/src/utils/data_fetcher.py": {
      "path": "benchmarks.old/models/src/utils/data_fetcher.py",
      "classes": [
        "TrainingBatch",
        "EnhancedDataFetcher"
      ],
      "functions": [],
      "mini_librarian": "scripts/benchmarks.old_models_src_utils_data_fetcher.json"
    },
    "benchmarks.old/models/src/utils/input_translator.py": {
      "path": "benchmarks.old/models/src/utils/input_translator.py",
      "classes": [
        "InputTranslator"
      ],
      "functions": [],
      "mini_librarian": "scripts/benchmarks.old_models_src_utils_input_translator.json"
    },
    "benchmarks.old/models/src/utils/integration_test.py": {
      "path": "benchmarks.old/models/src/utils/integration_test.py",
      "classes": [
        "SpecialistType",
        "SpecialistOutput",
        "IntegrationTestHarness"
      ],
      "functions": [
        "test_harness"
      ],
      "mini_librarian": "scripts/benchmarks.old_models_src_utils_integration_test.json"
    },
    "benchmarks.old/models/src/utils/json_serializer.py": {
      "path": "benchmarks.old/models/src/utils/json_serializer.py",
      "classes": [
        "CustomJSONEncoder"
      ],
      "functions": [
        "setup_assessment_environment",
        "serialize_results"
      ],
      "mini_librarian": "scripts/benchmarks.old_models_src_utils_json_serializer.json"
    },
    "benchmarks.old/models/src/utils/kt_batch_optimizer.py": {
      "path": "benchmarks.old/models/src/utils/kt_batch_optimizer.py",
      "classes": [
        "KTParameters",
        "KTBatchOptimizer"
      ],
      "functions": [
        "test_kt_optimizer"
      ],
      "mini_librarian": "scripts/benchmarks.old_models_src_utils_kt_batch_optimizer.json"
    },
    "benchmarks.old/models/src/utils/kt_batch_optimizer_v2.py": {
      "path": "benchmarks.old/models/src/utils/kt_batch_optimizer_v2.py",
      "classes": [
        "KTParameters",
        "GPUSpecs",
        "KTBatchOptimizer"
      ],
      "functions": [
        "test_kt_optimizer"
      ],
      "mini_librarian": "scripts/benchmarks.old_models_src_utils_kt_batch_optimizer_v2.json"
    },
    "benchmarks.old/models/src/utils/kt_batch_optimizer_v3.py": {
      "path": "benchmarks.old/models/src/utils/kt_batch_optimizer_v3.py",
      "classes": [
        "KTParameters",
        "GPUSpecs",
        "KTBatchOptimizer"
      ],
      "functions": [
        "test_kt_optimizer"
      ],
      "mini_librarian": "scripts/benchmarks.old_models_src_utils_kt_batch_optimizer_v3.json"
    },
    "benchmarks.old/models/src/utils/resource_manager.py": {
      "path": "benchmarks.old/models/src/utils/resource_manager.py",
      "classes": [
        "ResourceManager"
      ],
      "functions": [],
      "mini_librarian": "scripts/benchmarks.old_models_src_utils_resource_manager.json"
    },
    "benchmarks.old/models/src/utils/types.py": {
      "path": "benchmarks.old/models/src/utils/types.py",
      "classes": [
        "PatternType",
        "DomainType",
        "SkillTree",
        "ProcessingStage",
        "CortexFlowMetadata",
        "Pattern",
        "BatchMetadata",
        "ResourceAllocation",
        "ProcessingResult",
        "RiskEvent",
        "ProcessingError",
        "ResourceError"
      ],
      "functions": [],
      "mini_librarian": "scripts/benchmarks.old_models_src_utils_types.json"
    },
    "benchmarks.old/models/src/utils/vision_diagnostic.py": {
      "path": "benchmarks.old/models/src/utils/vision_diagnostic.py",
      "classes": [
        "YOLOMetrics",
        "VisionDiagnostic"
      ],
      "functions": [
        "run_vision_diagnostics"
      ],
      "mini_librarian": "scripts/benchmarks.old_models_src_utils_vision_diagnostic.json"
    },
    "benchmarks.old/models/src/utils/__init__.py": {
      "path": "benchmarks.old/models/src/utils/__init__.py",
      "classes": [],
      "functions": [],
      "mini_librarian": "scripts/benchmarks.old_models_src_utils___init__.json"
    },
    "benchmarks.old/models/src/assessment/examples/assessment_demo.py": {
      "path": "benchmarks.old/models/src/assessment/examples/assessment_demo.py",
      "classes": [],
      "functions": [
        "run_educational_assessment"
      ],
      "mini_librarian": "scripts/benchmarks.old_models_src_assessment_examples_assessment_demo.json"
    },
    "benchmarks.old/models/src/assessment/examples/__init__.py": {
      "path": "benchmarks.old/models/src/assessment/examples/__init__.py",
      "classes": [],
      "functions": [],
      "mini_librarian": "scripts/benchmarks.old_models_src_assessment_examples___init__.json"
    },
    "benchmarks.old/models/src/utils/analysist_tools/log_analyzer.py": {
      "path": "benchmarks.old/models/src/utils/analysist_tools/log_analyzer.py",
      "classes": [
        "TrainingLogAnalyzer"
      ],
      "functions": [
        "main"
      ],
      "mini_librarian": "scripts/benchmarks.old_models_src_utils_analysist_tools_log_analyzer.json"
    },
    "benchmarks.old/models/src/utils/analysist_tools/__init__.py": {
      "path": "benchmarks.old/models/src/utils/analysist_tools/__init__.py",
      "classes": [],
      "functions": [],
      "mini_librarian": "scripts/benchmarks.old_models_src_utils_analysist_tools___init__.json"
    },
    "benchmarks.old/models/src/utils/scil/core.py": {
      "path": "benchmarks.old/models/src/utils/scil/core.py",
      "classes": [
        "ComponentType",
        "ResourceAllocation",
        "SpinalCordIntegrationLayer"
      ],
      "functions": [],
      "mini_librarian": "scripts/benchmarks.old_models_src_utils_scil_core.json"
    },
    "benchmarks.old/models/src/utils/scil/memory_pool.py": {
      "path": "benchmarks.old/models/src/utils/scil/memory_pool.py",
      "classes": [
        "ChunkSize",
        "MemoryChunk",
        "MemoryPoolManager"
      ],
      "functions": [],
      "mini_librarian": "scripts/benchmarks.old_models_src_utils_scil_memory_pool.json"
    },
    "benchmarks.old/models/src/utils/scil/__init__.py": {
      "path": "benchmarks.old/models/src/utils/scil/__init__.py",
      "classes": [],
      "functions": [],
      "mini_librarian": "scripts/benchmarks.old_models_src_utils_scil___init__.json"
    },
    "benchmarks.old/models/src/utils/training/cortex_first_training.py": {
      "path": "benchmarks.old/models/src/utils/training/cortex_first_training.py",
      "classes": [],
      "functions": [
        "parse_args"
      ],
      "mini_librarian": "scripts/benchmarks.old_models_src_utils_training_cortex_first_training.json"
    },
    "benchmarks.old/models/src/utils/training/domain_validator.py": {
      "path": "benchmarks.old/models/src/utils/training/domain_validator.py",
      "classes": [
        "DomainValidationConfig",
        "DomainSpecificValidator"
      ],
      "functions": [],
      "mini_librarian": "scripts/benchmarks.old_models_src_utils_training_domain_validator.json"
    },
    "benchmarks.old/models/src/utils/training/mnist_test.py": {
      "path": "benchmarks.old/models/src/utils/training/mnist_test.py",
      "classes": [
        "MNISTPatternTest"
      ],
      "functions": [
        "main"
      ],
      "mini_librarian": "scripts/benchmarks.old_models_src_utils_training_mnist_test.json"
    },
    "benchmarks.old/models/src/utils/training/overnight_training.py": {
      "path": "benchmarks.old/models/src/utils/training/overnight_training.py",
      "classes": [],
      "functions": [
        "parse_args"
      ],
      "mini_librarian": "scripts/benchmarks.old_models_src_utils_training_overnight_training.json"
    },
    "benchmarks.old/models/src/utils/training/pattern_learning_validator.py": {
      "path": "benchmarks.old/models/src/utils/training/pattern_learning_validator.py",
      "classes": [
        "PatternLearningValidator"
      ],
      "functions": [
        "run_validation_test"
      ],
      "mini_librarian": "scripts/benchmarks.old_models_src_utils_training_pattern_learning_validator.json"
    },
    "benchmarks.old/models/src/utils/training/progressive_learning_test.py": {
      "path": "benchmarks.old/models/src/utils/training/progressive_learning_test.py",
      "classes": [
        "ProgressiveLearningTest"
      ],
      "functions": [],
      "mini_librarian": "scripts/benchmarks.old_models_src_utils_training_progressive_learning_test.json"
    },
    "benchmarks.old/models/src/utils/training/real_domain_test.py": {
      "path": "benchmarks.old/models/src/utils/training/real_domain_test.py",
      "classes": [
        "RealDomainTest"
      ],
      "functions": [],
      "mini_librarian": "scripts/benchmarks.old_models_src_utils_training_real_domain_test.json"
    },
    "benchmarks.old/models/src/utils/training/run_validation.py": {
      "path": "benchmarks.old/models/src/utils/training/run_validation.py",
      "classes": [],
      "functions": [],
      "mini_librarian": "scripts/benchmarks.old_models_src_utils_training_run_validation.json"
    },
    "benchmarks.old/models/src/utils/training/test_data_setup.py": {
      "path": "benchmarks.old/models/src/utils/training/test_data_setup.py",
      "classes": [
        "TestDataSetup"
      ],
      "functions": [],
      "mini_librarian": "scripts/benchmarks.old_models_src_utils_training_test_data_setup.json"
    },
    "benchmarks.old/models/src/utils/training/training_coordinator.py": {
      "path": "benchmarks.old/models/src/utils/training/training_coordinator.py",
      "classes": [
        "TrainingState",
        "TrainingCoordinator"
      ],
      "functions": [],
      "mini_librarian": "scripts/benchmarks.old_models_src_utils_training_training_coordinator.json"
    },
    "benchmarks.old/models/src/utils/training/training_metrics.py": {
      "path": "benchmarks.old/models/src/utils/training/training_metrics.py",
      "classes": [
        "TraditionalMetrics",
        "PatternMetrics",
        "TrainingMetricsTracker"
      ],
      "functions": [],
      "mini_librarian": "scripts/benchmarks.old_models_src_utils_training_training_metrics.json"
    },
    "benchmarks.old/models/src/utils/training/training_prep.py": {
      "path": "benchmarks.old/models/src/utils/training/training_prep.py",
      "classes": [
        "GracefulKiller",
        "TrainingPreparationSystem"
      ],
      "functions": [],
      "mini_librarian": "scripts/benchmarks.old_models_src_utils_training_training_prep.json"
    },
    "benchmarks.old/models/src/utils/training/validate_training.py": {
      "path": "benchmarks.old/models/src/utils/training/validate_training.py",
      "classes": [],
      "functions": [
        "verify_system_requirements"
      ],
      "mini_librarian": "scripts/benchmarks.old_models_src_utils_training_validate_training.json"
    },
    "benchmarks.old/models/src/utils/training/__init__.py": {
      "path": "benchmarks.old/models/src/utils/training/__init__.py",
      "classes": [],
      "functions": [],
      "mini_librarian": "scripts/benchmarks.old_models_src_utils_training___init__.json"
    },
    "isekaizen/cli/train_dataset.py": {
      "path": "isekaizen/cli/train_dataset.py",
      "classes": [
        "SimplePatternMediator"
      ],
      "functions": [
        "list_available_prepared_datasets",
        "print_available_datasets",
        "train_with_prepared_dataset",
        "main"
      ],
      "mini_librarian": "scripts/isekaizen_cli_train_dataset.json"
    },
    "isekaizen/cli/__init__.py": {
      "path": "isekaizen/cli/__init__.py",
      "classes": [],
      "functions": [
        "get_train_cli",
        "get_train_augmented_cli"
      ],
      "mini_librarian": "scripts/isekaizen_cli___init__.json"
    },
    "isekaizen/cli/__main__.py": {
      "path": "isekaizen/cli/__main__.py",
      "classes": [],
      "functions": [
        "main"
      ],
      "mini_librarian": "scripts/isekaizen_cli___main__.json"
    },
    "isekaizen/cognitive/efficiency.py": {
      "path": "isekaizen/cognitive/efficiency.py",
      "classes": [
        "CognitiveEfficiencyCalculator"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_cognitive_efficiency.json"
    },
    "isekaizen/cognitive/__init__.py": {
      "path": "isekaizen/cognitive/__init__.py",
      "classes": [],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_cognitive___init__.json"
    },
    "isekaizen/configs/paths.py": {
      "path": "isekaizen/configs/paths.py",
      "classes": [],
      "functions": [
        "get_project_root",
        "ensure_directories_exist",
        "get_directory"
      ],
      "mini_librarian": "scripts/isekaizen_configs_paths.json"
    },
    "isekaizen/configs/__init__.py": {
      "path": "isekaizen/configs/__init__.py",
      "classes": [],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_configs___init__.json"
    },
    "isekaizen/core/base_optimizer.py": {
      "path": "isekaizen/core/base_optimizer.py",
      "classes": [
        "BaseOptimizer"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_core_base_optimizer.json"
    },
    "isekaizen/core/config.py": {
      "path": "isekaizen/core/config.py",
      "classes": [
        "EVEConfig",
        "TrainingConfig",
        "ModelConfig",
        "DataConfig",
        "IsekaiZenConfig"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_core_config.json"
    },
    "isekaizen/core/config_loader.py": {
      "path": "isekaizen/core/config_loader.py",
      "classes": [],
      "functions": [
        "load_config",
        "save_config",
        "create_default_config_file",
        "convert_dict_to_config"
      ],
      "mini_librarian": "scripts/isekaizen_core_config_loader.json"
    },
    "isekaizen/core/exceptions.py": {
      "path": "isekaizen/core/exceptions.py",
      "classes": [
        "IsekaiZenBaseException",
        "ConfigurationError",
        "DataLoadingError",
        "PatternMappingError",
        "OptimizationError",
        "ModelError",
        "TrainingError",
        "HardwareError",
        "PatternError",
        "MemoryError",
        "ValidationError",
        "VisualizationError"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_core_exceptions.json"
    },
    "isekaizen/core/optimizers.py": {
      "path": "isekaizen/core/optimizers.py",
      "classes": [
        "BatchSizeSelector"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_core_optimizers.json"
    },
    "isekaizen/core/__init__.py": {
      "path": "isekaizen/core/__init__.py",
      "classes": [],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_core___init__.json"
    },
    "isekaizen/cortex/pattern_orchestrator.py": {
      "path": "isekaizen/cortex/pattern_orchestrator.py",
      "classes": [
        "OrchestrationMode",
        "PatternOrchestrator"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_cortex_pattern_orchestrator.json"
    },
    "isekaizen/cortex/resource_manager.py": {
      "path": "isekaizen/cortex/resource_manager.py",
      "classes": [
        "ResourceManager"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_cortex_resource_manager.json"
    },
    "isekaizen/cortex/rpg_manager.py": {
      "path": "isekaizen/cortex/rpg_manager.py",
      "classes": [
        "PatternType",
        "SkillTree",
        "Pattern",
        "RPGCortexManager"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_cortex_rpg_manager.json"
    },
    "isekaizen/cortex/semantic_core.py": {
      "path": "isekaizen/cortex/semantic_core.py",
      "classes": [
        "SemanticType",
        "SemanticPattern",
        "SemanticPatternRegistry",
        "DomainPatternExtractor"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_cortex_semantic_core.json"
    },
    "isekaizen/cortex/__init__.py": {
      "path": "isekaizen/cortex/__init__.py",
      "classes": [],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_cortex___init__.json"
    },
    "isekaizen/data/augmentation.py": {
      "path": "isekaizen/data/augmentation.py",
      "classes": [
        "AugmentationManager"
      ],
      "functions": [
        "create_transform_pipeline",
        "apply_augmentation_to_dataset"
      ],
      "mini_librarian": "scripts/isekaizen_data_augmentation.json"
    },
    "isekaizen/data/augmented_dataset.py": {
      "path": "isekaizen/data/augmented_dataset.py",
      "classes": [
        "AugmentedDataset",
        "TransformedSubset"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_data_augmented_dataset.json"
    },
    "isekaizen/data/__init__.py": {
      "path": "isekaizen/data/__init__.py",
      "classes": [],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_data___init__.json"
    },
    "isekaizen/extensions/parameter_tuning.py": {
      "path": "isekaizen/extensions/parameter_tuning.py",
      "classes": [
        "ParameterTuner",
        "CognitiveEfficiencyTuner",
        "WorkloadSpecificOptimizer"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_extensions_parameter_tuning.json"
    },
    "isekaizen/extensions/__init__.py": {
      "path": "isekaizen/extensions/__init__.py",
      "classes": [],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_extensions___init__.json"
    },
    "isekaizen/hardware/analyzer.py": {
      "path": "isekaizen/hardware/analyzer.py",
      "classes": [
        "HardwareAnalyzer"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_hardware_analyzer.json"
    },
    "isekaizen/hardware/memory.py": {
      "path": "isekaizen/hardware/memory.py",
      "classes": [
        "ModelMemoryAnalyzer"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_hardware_memory.json"
    },
    "isekaizen/hardware/__init__.py": {
      "path": "isekaizen/hardware/__init__.py",
      "classes": [],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_hardware___init__.json"
    },
    "isekaizen/legacy/__init__.py": {
      "path": "isekaizen/legacy/__init__.py",
      "classes": [],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_legacy___init__.json"
    },
    "isekaizen/mediators/augmentation.py": {
      "path": "isekaizen/mediators/augmentation.py",
      "classes": [
        "AugmentationMediator"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_mediators_augmentation.json"
    },
    "isekaizen/mediators/base.py": {
      "path": "isekaizen/mediators/base.py",
      "classes": [
        "Mediator",
        "MediatorError",
        "MediatorInitializationError",
        "MediatorDataError"
      ],
      "functions": [
        "log_mediator_status",
        "estimate_memory_usage"
      ],
      "mini_librarian": "scripts/isekaizen_mediators_base.json"
    },
    "isekaizen/mediators/factory.py": {
      "path": "isekaizen/mediators/factory.py",
      "classes": [],
      "functions": [
        "create_pattern_mediator",
        "create_augmentation_mediator",
        "create_ratio_tracker",
        "create_equilibrium_tracker",
        "get_all_mediator_types",
        "create_mediator",
        "_get_specialized_mediator_factory",
        "_get_available_specialized_mediators"
      ],
      "mini_librarian": "scripts/isekaizen_mediators_factory.json"
    },
    "isekaizen/mediators/__init__.py": {
      "path": "isekaizen/mediators/__init__.py",
      "classes": [],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_mediators___init__.json"
    },
    "isekaizen/optimizers/eve.py": {
      "path": "isekaizen/optimizers/eve.py",
      "classes": [
        "EVECore",
        "EVEPatternMomentum",
        "EVERiskAdaptive",
        "EVENaturalWeights"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_optimizers_eve.json"
    },
    "isekaizen/optimizers/eve_simplified.py": {
      "path": "isekaizen/optimizers/eve_simplified.py",
      "classes": [
        "EVESimplifiedRatio"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_optimizers_eve_simplified.json"
    },
    "isekaizen/optimizers/eve_unified_ratio.py": {
      "path": "isekaizen/optimizers/eve_unified_ratio.py",
      "classes": [
        "EVEUnifiedRatio",
        "InternalPatternMediator",
        "FallbackMediator"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_optimizers_eve_unified_ratio.json"
    },
    "isekaizen/optimizers/heuristic.py": {
      "path": "isekaizen/optimizers/heuristic.py",
      "classes": [
        "HeuristicBatchSelector"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_optimizers_heuristic.json"
    },
    "isekaizen/optimizers/isekaizen.py": {
      "path": "isekaizen/optimizers/isekaizen.py",
      "classes": [
        "IsekaiZenOptimizer"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_optimizers_isekaizen.json"
    },
    "isekaizen/optimizers/pothole_aware.py": {
      "path": "isekaizen/optimizers/pothole_aware.py",
      "classes": [
        "PotholeAwareIsekaiZen"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_optimizers_pothole_aware.json"
    },
    "isekaizen/optimizers/registration.py": {
      "path": "isekaizen/optimizers/registration.py",
      "classes": [],
      "functions": [
        "register_unified_ratio_optimizer"
      ],
      "mini_librarian": "scripts/isekaizen_optimizers_registration.json"
    },
    "isekaizen/optimizers/static.py": {
      "path": "isekaizen/optimizers/static.py",
      "classes": [
        "StaticBatchSelector"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_optimizers_static.json"
    },
    "isekaizen/optimizers/utils.py": {
      "path": "isekaizen/optimizers/utils.py",
      "classes": [],
      "functions": [
        "configure_optimizer",
        "get_optimizer_description",
        "print_available_optimizers",
        "add_optimizer_arguments"
      ],
      "mini_librarian": "scripts/isekaizen_optimizers_utils.json"
    },
    "isekaizen/optimizers/__init__.py": {
      "path": "isekaizen/optimizers/__init__.py",
      "classes": [],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_optimizers___init__.json"
    },
    "isekaizen/pattern/augmentation.py": {
      "path": "isekaizen/pattern/augmentation.py",
      "classes": [
        "PatternResponsiveAugmenter"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_pattern_augmentation.json"
    },
    "isekaizen/pattern/batch_underfitting_optimizer.py": {
      "path": "isekaizen/pattern/batch_underfitting_optimizer.py",
      "classes": [
        "UnderFittingProtectedOptimizer"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_pattern_batch_underfitting_optimizer.json"
    },
    "isekaizen/pattern/bias_testing.py": {
      "path": "isekaizen/pattern/bias_testing.py",
      "classes": [],
      "functions": [
        "create_pattern_test_datasets",
        "test_model_pattern_bias",
        "normalize_bias_scores",
        "test_pattern_bias"
      ],
      "mini_librarian": "scripts/isekaizen_pattern_bias_testing.json"
    },
    "isekaizen/pattern/data_loading.py": {
      "path": "isekaizen/pattern/data_loading.py",
      "classes": [],
      "functions": [
        "load_latest_pattern_map",
        "save_pattern_map"
      ],
      "mini_librarian": "scripts/isekaizen_pattern_data_loading.json"
    },
    "isekaizen/pattern/detection.py": {
      "path": "isekaizen/pattern/detection.py",
      "classes": [
        "PatternRecognitionService",
        "DummyDataset"
      ],
      "functions": [
        "generate_pattern_map_for_image_dataset",
        "generate_pattern_map_for_non_image_dataset",
        "_load_image_dataset",
        "_load_non_image_dataset"
      ],
      "mini_librarian": "scripts/isekaizen_pattern_detection.json"
    },
    "isekaizen/pattern/pre_augmentation.py": {
      "path": "isekaizen/pattern/pre_augmentation.py",
      "classes": [
        "AugmentedDataset"
      ],
      "functions": [
        "apply_pattern_augmentation",
        "calculate_three_pattern_weighting",
        "calculate_adaptive_comfort_factor",
        "create_pattern_biased_augmentations",
        "save_augmentation_data"
      ],
      "mini_librarian": "scripts/isekaizen_pattern_pre_augmentation.json"
    },
    "isekaizen/pattern/tracking.py": {
      "path": "isekaizen/pattern/tracking.py",
      "classes": [
        "PatternRecognitionTracker"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_pattern_tracking.json"
    },
    "isekaizen/pattern/__init__.py": {
      "path": "isekaizen/pattern/__init__.py",
      "classes": [],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_pattern___init__.json"
    },
    "isekaizen/public/batch_optimizer.py": {
      "path": "isekaizen/public/batch_optimizer.py",
      "classes": [
        "BatchOptimizer"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_public_batch_optimizer.json"
    },
    "isekaizen/public/__init__.py": {
      "path": "isekaizen/public/__init__.py",
      "classes": [],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_public___init__.json"
    },
    "isekaizen/research/__init__.py": {
      "path": "isekaizen/research/__init__.py",
      "classes": [],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_research___init__.json"
    },
    "isekaizen/semantic/augment.py": {
      "path": "isekaizen/semantic/augment.py",
      "classes": [],
      "functions": [
        "augment_dataset_directly",
        "load_and_augment_dataset"
      ],
      "mini_librarian": "scripts/isekaizen_semantic_augment.json"
    },
    "isekaizen/semantic/augmented_datasets.py": {
      "path": "isekaizen/semantic/augmented_datasets.py",
      "classes": [
        "CIFAR10Augmented"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_semantic_augmented_datasets.json"
    },
    "isekaizen/semantic/clean_specialists.py": {
      "path": "isekaizen/semantic/clean_specialists.py",
      "classes": [
        "SpecialistRegistry",
        "EnhancedPatternMapperClean"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_semantic_clean_specialists.json"
    },
    "isekaizen/semantic/compatibility.py": {
      "path": "isekaizen/semantic/compatibility.py",
      "classes": [
        "CIFAR10Augmented"
      ],
      "functions": [
        "load_with_class_fixup"
      ],
      "mini_librarian": "scripts/isekaizen_semantic_compatibility.json"
    },
    "isekaizen/semantic/data_loading.py": {
      "path": "isekaizen/semantic/data_loading.py",
      "classes": [],
      "functions": [
        "load_latest_augmented_dataset",
        "load_augmented_dataset"
      ],
      "mini_librarian": "scripts/isekaizen_semantic_data_loading.json"
    },
    "isekaizen/semantic/mapper.py": {
      "path": "isekaizen/semantic/mapper.py",
      "classes": [
        "SemanticTopographicalMapper"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_semantic_mapper.json"
    },
    "isekaizen/semantic/mapper_math.py": {
      "path": "isekaizen/semantic/mapper_math.py",
      "classes": [
        "SemanticTopographicalMapper",
        "FeatureExtractor"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_semantic_mapper_math.json"
    },
    "isekaizen/semantic/matrix_ops.py": {
      "path": "isekaizen/semantic/matrix_ops.py",
      "classes": [],
      "functions": [
        "calculate_euclidean_distance",
        "find_k_nearest_neighbors",
        "calculate_pairwise_distances",
        "find_neighbors_from_distance_matrix",
        "batch_find_neighbors",
        "softmax",
        "argmax",
        "bincount",
        "mean",
        "std_dev"
      ],
      "mini_librarian": "scripts/isekaizen_semantic_matrix_ops.json"
    },
    "isekaizen/semantic/optimizer.py": {
      "path": "isekaizen/semantic/optimizer.py",
      "classes": [
        "TopographicalAwareIsekaiZen"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_semantic_optimizer.json"
    },
    "isekaizen/semantic/parallel_processing.py": {
      "path": "isekaizen/semantic/parallel_processing.py",
      "classes": [],
      "functions": [
        "determine_dataset_type",
        "get_extractor_for_dataset",
        "extract_generic_patterns",
        "process_sample_worker",
        "extract_patterns_parallel"
      ],
      "mini_librarian": "scripts/isekaizen_semantic_parallel_processing.json"
    },
    "isekaizen/semantic/pattern_detection.py": {
      "path": "isekaizen/semantic/pattern_detection.py",
      "classes": [
        "SemanticType",
        "SemanticPattern"
      ],
      "functions": [
        "calculate_entropy",
        "calculate_centrality",
        "determine_pattern_type",
        "calculate_sample_complexity",
        "extract_visual_patterns"
      ],
      "mini_librarian": "scripts/isekaizen_semantic_pattern_detection.json"
    },
    "isekaizen/semantic/validation_metrics.py": {
      "path": "isekaizen/semantic/validation_metrics.py",
      "classes": [
        "SimpleCNN",
        "SimpleMLP",
        "FallbackModel"
      ],
      "functions": [
        "create_simple_model_for_dataset",
        "train_and_evaluate",
        "create_pattern_aware_sampler",
        "validate_pattern_mapping"
      ],
      "mini_librarian": "scripts/isekaizen_semantic_validation_metrics.json"
    },
    "isekaizen/semantic/__init__.py": {
      "path": "isekaizen/semantic/__init__.py",
      "classes": [],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_semantic___init__.json"
    },
    "isekaizen/tools/pattern_mapper.py": {
      "path": "isekaizen/tools/pattern_mapper.py",
      "classes": [
        "BatchProcessedPatternMapper"
      ],
      "functions": [
        "detect_dataset_type",
        "_is_image_directory",
        "_is_non_image_directory",
        "check_existing_pattern_map",
        "load_pattern_map",
        "map_image_dataset",
        "map_non_image_dataset",
        "prepare_dataset_for_training",
        "map_dataset",
        "get_model_type_for_dataset",
        "get_dataset_path",
        "validate_pattern_map",
        "main",
        "run_with_multiprocessing_support"
      ],
      "mini_librarian": "scripts/isekaizen_tools_pattern_mapper.json"
    },
    "isekaizen/tools/__init__.py": {
      "path": "isekaizen/tools/__init__.py",
      "classes": [],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_tools___init__.json"
    },
    "isekaizen/trainer/adaptive_trainer.py": {
      "path": "isekaizen/trainer/adaptive_trainer.py",
      "classes": [
        "AdaptiveTrainer"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_trainer_adaptive_trainer.json"
    },
    "isekaizen/trainer/model_trainer.py": {
      "path": "isekaizen/trainer/model_trainer.py",
      "classes": [
        "ModelTrainer"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_trainer_model_trainer.json"
    },
    "isekaizen/trainer/__init__.py": {
      "path": "isekaizen/trainer/__init__.py",
      "classes": [],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_trainer___init__.json"
    },
    "isekaizen/utils/arg_parsing.py": {
      "path": "isekaizen/utils/arg_parsing.py",
      "classes": [],
      "functions": [
        "add_batch_args",
        "add_standard_training_args",
        "add_isek_optimizer_args",
        "add_pattern_aware_args",
        "add_risk_aware_args"
      ],
      "mini_librarian": "scripts/isekaizen_utils_arg_parsing.json"
    },
    "isekaizen/utils/benchmarking.py": {
      "path": "isekaizen/utils/benchmarking.py",
      "classes": [
        "ModelBenchmark"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_utils_benchmarking.json"
    },
    "isekaizen/utils/formatting.py": {
      "path": "isekaizen/utils/formatting.py",
      "classes": [],
      "functions": [
        "format_metrics_table",
        "log_section"
      ],
      "mini_librarian": "scripts/isekaizen_utils_formatting.json"
    },
    "isekaizen/utils/input_shapes.py": {
      "path": "isekaizen/utils/input_shapes.py",
      "classes": [],
      "functions": [
        "infer_input_shape",
        "get_sample_input",
        "create_batch"
      ],
      "mini_librarian": "scripts/isekaizen_utils_input_shapes.json"
    },
    "isekaizen/utils/input_translator.py": {
      "path": "isekaizen/utils/input_translator.py",
      "classes": [
        "InputTranslator"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_utils_input_translator.json"
    },
    "isekaizen/utils/kt_batch_optimizer.py": {
      "path": "isekaizen/utils/kt_batch_optimizer.py",
      "classes": [
        "KTParameters",
        "KTBatchOptimizer"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_utils_kt_batch_optimizer.json"
    },
    "isekaizen/utils/memory.py": {
      "path": "isekaizen/utils/memory.py",
      "classes": [
        "MemoryTracker"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_utils_memory.json"
    },
    "isekaizen/utils/paths.py": {
      "path": "isekaizen/utils/paths.py",
      "classes": [],
      "functions": [
        "ensure_dir_exists",
        "get_pattern_maps_dir",
        "get_model_checkpoint_dir",
        "get_output_dir",
        "get_visualization_dir",
        "get_pattern_map_path",
        "get_checkpoint_path",
        "generate_timestamp",
        "get_output_file_path",
        "find_files"
      ],
      "mini_librarian": "scripts/isekaizen_utils_paths.json"
    },
    "isekaizen/utils/pattern_map_utils.py": {
      "path": "isekaizen/utils/pattern_map_utils.py",
      "classes": [],
      "functions": [
        "translate_pattern_map_to_standard_format",
        "detect_pattern_map_format",
        "process_streamlined_format",
        "process_original_format",
        "process_nested_format",
        "process_unknown_format",
        "create_pattern_assignments_from_distribution",
        "extract_pattern_features",
        "calculate_complexities_from_assignments",
        "calculate_initial_risks",
        "calculate_derived_metrics",
        "validate_standardized_map",
        "log_translation_statistics",
        "create_fallback_pattern_map"
      ],
      "mini_librarian": "scripts/isekaizen_utils_pattern_map_utils.json"
    },
    "isekaizen/utils/precision.py": {
      "path": "isekaizen/utils/precision.py",
      "classes": [
        "PrecisionOptimizer"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_utils_precision.json"
    },
    "isekaizen/utils/training_utils.py": {
      "path": "isekaizen/utils/training_utils.py",
      "classes": [],
      "functions": [
        "get_fibonacci_check_intervals",
        "calculate_optimal_workers"
      ],
      "mini_librarian": "scripts/isekaizen_utils_training_utils.json"
    },
    "isekaizen/utils/types.py": {
      "path": "isekaizen/utils/types.py",
      "classes": [
        "DomainType",
        "PatternType",
        "ProcessingStage",
        "Pattern",
        "CortexFlowMetadata",
        "ResourceAllocation",
        "BatchMetadata",
        "ResourceError"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_utils_types.json"
    },
    "isekaizen/utils/__init__.py": {
      "path": "isekaizen/utils/__init__.py",
      "classes": [],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_utils___init__.json"
    },
    "isekaizen/visualization/training_plots.py": {
      "path": "isekaizen/visualization/training_plots.py",
      "classes": [],
      "functions": [
        "visualize_training_results"
      ],
      "mini_librarian": "scripts/isekaizen_visualization_training_plots.json"
    },
    "isekaizen/visualization/__init__.py": {
      "path": "isekaizen/visualization/__init__.py",
      "classes": [],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_visualization___init__.json"
    },
    "isekaizen/core/cortex/coordinator.py": {
      "path": "isekaizen/core/cortex/coordinator.py",
      "classes": [
        "DomainType",
        "ProcessingConfig",
        "CortexCoordinator"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_core_cortex_coordinator.json"
    },
    "isekaizen/core/cortex/diagnostics.py": {
      "path": "isekaizen/core/cortex/diagnostics.py",
      "classes": [
        "DiagnosticType",
        "DiagnosticResult",
        "CortexDiagnostics"
      ],
      "functions": [
        "test_integrated_diagnostics"
      ],
      "mini_librarian": "scripts/isekaizen_core_cortex_diagnostics.json"
    },
    "isekaizen/core/cortex/integrated_kt_rpg.py": {
      "path": "isekaizen/core/cortex/integrated_kt_rpg.py",
      "classes": [
        "SkillTree",
        "KTParameters",
        "Pattern",
        "IntegratedCortexSystem"
      ],
      "functions": [
        "test_integrated_system"
      ],
      "mini_librarian": "scripts/isekaizen_core_cortex_integrated_kt_rpg.json"
    },
    "isekaizen/core/cortex/pattern_orchestrator.py": {
      "path": "isekaizen/core/cortex/pattern_orchestrator.py",
      "classes": [
        "OrchestrationMode",
        "PatternOrchestrator"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_core_cortex_pattern_orchestrator.json"
    },
    "isekaizen/core/cortex/pattern_store.py": {
      "path": "isekaizen/core/cortex/pattern_store.py",
      "classes": [
        "ValidationStatus",
        "PatternMetrics",
        "Pattern",
        "PatternStore"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_core_cortex_pattern_store.json"
    },
    "isekaizen/core/cortex/resource_manager.py": {
      "path": "isekaizen/core/cortex/resource_manager.py",
      "classes": [
        "ResourceManager"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_core_cortex_resource_manager.json"
    },
    "isekaizen/core/cortex/rpg_manager.py": {
      "path": "isekaizen/core/cortex/rpg_manager.py",
      "classes": [
        "PatternType",
        "SkillTree",
        "Pattern",
        "RPGCortexManager"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_core_cortex_rpg_manager.json"
    },
    "isekaizen/core/cortex/semantic_core.py": {
      "path": "isekaizen/core/cortex/semantic_core.py",
      "classes": [
        "SemanticType",
        "SemanticPattern",
        "SemanticPatternRegistry",
        "DomainPatternExtractor"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_core_cortex_semantic_core.json"
    },
    "isekaizen/core/cortex/__init__.py": {
      "path": "isekaizen/core/cortex/__init__.py",
      "classes": [],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_core_cortex___init__.json"
    },
    "isekaizen/core/mathematical_foundation/batch_optimization.py": {
      "path": "isekaizen/core/mathematical_foundation/batch_optimization.py",
      "classes": [],
      "functions": [
        "calculate_optimal_batch_size",
        "calculate_batch_priority",
        "get_type_priority",
        "calculate_resource_impact",
        "calculate_urgency"
      ],
      "mini_librarian": "scripts/isekaizen_core_mathematical_foundation_batch_optimization.json"
    },
    "isekaizen/core/mathematical_foundation/cognitive_efficiency.py": {
      "path": "isekaizen/core/mathematical_foundation/cognitive_efficiency.py",
      "classes": [],
      "functions": [
        "calculate_cognitive_efficiency",
        "cognitive_load_function",
        "parallel_processing_penalty"
      ],
      "mini_librarian": "scripts/isekaizen_core_mathematical_foundation_cognitive_efficiency.json"
    },
    "isekaizen/core/mathematical_foundation/polling_optimization.py": {
      "path": "isekaizen/core/mathematical_foundation/polling_optimization.py",
      "classes": [],
      "functions": [
        "calculate_polling_frequency",
        "calculate_metric_volatility",
        "calculate_adjustment_factor",
        "calculate_tier_boundaries"
      ],
      "mini_librarian": "scripts/isekaizen_core_mathematical_foundation_polling_optimization.json"
    },
    "isekaizen/core/mathematical_foundation/resource_allocation.py": {
      "path": "isekaizen/core/mathematical_foundation/resource_allocation.py",
      "classes": [],
      "functions": [
        "optimize_resource_allocation",
        "component_utility_function"
      ],
      "mini_librarian": "scripts/isekaizen_core_mathematical_foundation_resource_allocation.json"
    },
    "isekaizen/core/mathematical_foundation/__init__.py": {
      "path": "isekaizen/core/mathematical_foundation/__init__.py",
      "classes": [],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_core_mathematical_foundation___init__.json"
    },
    "isekaizen/core/models/architecture.py": {
      "path": "isekaizen/core/models/architecture.py",
      "classes": [],
      "functions": [
        "create_model",
        "_create_resnet_model",
        "_create_vgg_model",
        "_create_mobilenet_model",
        "_create_efficientnet_model"
      ],
      "mini_librarian": "scripts/isekaizen_core_models_architecture.json"
    },
    "isekaizen/core/models/__init__.py": {
      "path": "isekaizen/core/models/__init__.py",
      "classes": [],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_core_models___init__.json"
    },
    "isekaizen/core/optimization/batch_sizing.py": {
      "path": "isekaizen/core/optimization/batch_sizing.py",
      "classes": [
        "BatchSizeOptimizer"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_core_optimization_batch_sizing.json"
    },
    "isekaizen/core/optimization/equilibrium.py": {
      "path": "isekaizen/core/optimization/equilibrium.py",
      "classes": [
        "PatternEquilibriumTracker"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_core_optimization_equilibrium.json"
    },
    "isekaizen/core/optimization/__init__.py": {
      "path": "isekaizen/core/optimization/__init__.py",
      "classes": [],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_core_optimization___init__.json"
    },
    "isekaizen/core/optimizer/base_optimizer.py": {
      "path": "isekaizen/core/optimizer/base_optimizer.py",
      "classes": [
        "IsekaiZenOptimizer",
        "PatternType",
        "SkillTree",
        "Pattern",
        "RPGCortexManager",
        "PatternOrchestrator",
        "ResourceManager"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_core_optimizer_base_optimizer.json"
    },
    "isekaizen/core/optimizer/enhanced_pattern_responsive.py": {
      "path": "isekaizen/core/optimizer/enhanced_pattern_responsive.py",
      "classes": [
        "EnhancedPatternResponsiveOptimizer"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_core_optimizer_enhanced_pattern_responsive.json"
    },
    "isekaizen/core/optimizer/enhanced_risk_assessment.py": {
      "path": "isekaizen/core/optimizer/enhanced_risk_assessment.py",
      "classes": [
        "EnhancedRiskAssessmentTracker"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_core_optimizer_enhanced_risk_assessment.json"
    },
    "isekaizen/core/optimizer/pattern_responsive_optimizer.py": {
      "path": "isekaizen/core/optimizer/pattern_responsive_optimizer.py",
      "classes": [
        "PatternResponsiveOptimizer"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_core_optimizer_pattern_responsive_optimizer.json"
    },
    "isekaizen/core/optimizer/pattern_risk_accuracy_tracker.py": {
      "path": "isekaizen/core/optimizer/pattern_risk_accuracy_tracker.py",
      "classes": [
        "PatternRiskAccuracyTracker"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_core_optimizer_pattern_risk_accuracy_tracker.json"
    },
    "isekaizen/core/optimizer/pre_augment_optimizer.py": {
      "path": "isekaizen/core/optimizer/pre_augment_optimizer.py",
      "classes": [
        "PreAugmentOptimizer"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_core_optimizer_pre_augment_optimizer.json"
    },
    "isekaizen/core/optimizer/risk_aware_optimizer.py": {
      "path": "isekaizen/core/optimizer/risk_aware_optimizer.py",
      "classes": [
        "RiskLevel",
        "RiskPattern",
        "PatternRecognitionTracker",
        "RiskAssessmentTracker",
        "RiskAwarePatternIsekaiZen"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_core_optimizer_risk_aware_optimizer.json"
    },
    "isekaizen/core/optimizer/simplified_ratio_tracker.py": {
      "path": "isekaizen/core/optimizer/simplified_ratio_tracker.py",
      "classes": [
        "SimplifiedRatioTracker"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_core_optimizer_simplified_ratio_tracker.json"
    },
    "isekaizen/core/optimizer/simplified_responsive.py": {
      "path": "isekaizen/core/optimizer/simplified_responsive.py",
      "classes": [
        "SimplifiedPatternResponsiveOptimizer"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_core_optimizer_simplified_responsive.json"
    },
    "isekaizen/core/optimizer/trainer.py": {
      "path": "isekaizen/core/optimizer/trainer.py",
      "classes": [
        "IsekaiZenTrainer"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_core_optimizer_trainer.json"
    },
    "isekaizen/core/optimizer/__init__.py": {
      "path": "isekaizen/core/optimizer/__init__.py",
      "classes": [],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_core_optimizer___init__.json"
    },
    "isekaizen/core/pattern/recognition.py": {
      "path": "isekaizen/core/pattern/recognition.py",
      "classes": [],
      "functions": [
        "recognize_patterns",
        "get_pattern_distribution",
        "get_pattern_complexities"
      ],
      "mini_librarian": "scripts/isekaizen_core_pattern_recognition.json"
    },
    "isekaizen/core/pattern/tracking.py": {
      "path": "isekaizen/core/pattern/tracking.py",
      "classes": [
        "PatternTracker"
      ],
      "functions": [
        "track_patterns"
      ],
      "mini_librarian": "scripts/isekaizen_core_pattern_tracking.json"
    },
    "isekaizen/core/pattern/__init__.py": {
      "path": "isekaizen/core/pattern/__init__.py",
      "classes": [],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_core_pattern___init__.json"
    },
    "isekaizen/core/refactored/base_optimizer.py": {
      "path": "isekaizen/core/refactored/base_optimizer.py",
      "classes": [
        "IsekaiZenOptimizer",
        "PatternType",
        "SkillTree",
        "Pattern",
        "RPGCortexManager",
        "PatternOrchestrator",
        "ResourceManager"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_core_refactored_base_optimizer.json"
    },
    "isekaizen/core/refactored/risk_aware_optimizer.py": {
      "path": "isekaizen/core/refactored/risk_aware_optimizer.py",
      "classes": [
        "RiskLevel",
        "RiskPattern",
        "PatternRecognitionTracker",
        "RiskAssessmentTracker",
        "RiskAwarePatternIsekaiZen"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_core_refactored_risk_aware_optimizer.json"
    },
    "isekaizen/core/refactored/trainer.py": {
      "path": "isekaizen/core/refactored/trainer.py",
      "classes": [
        "IsekaiZenTrainer"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_core_refactored_trainer.json"
    },
    "isekaizen/core/refactored/__init__.py": {
      "path": "isekaizen/core/refactored/__init__.py",
      "classes": [],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_core_refactored___init__.json"
    },
    "isekaizen/core/specialists/base.py": {
      "path": "isekaizen/core/specialists/base.py",
      "classes": [
        "BaseSpecialist"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_core_specialists_base.json"
    },
    "isekaizen/core/specialists/sentiment.py": {
      "path": "isekaizen/core/specialists/sentiment.py",
      "classes": [
        "EmotionalPattern",
        "SentimentSpecialist"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_core_specialists_sentiment.json"
    },
    "isekaizen/core/specialists/text.py": {
      "path": "isekaizen/core/specialists/text.py",
      "classes": [
        "TextPattern",
        "TextSpecialist"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_core_specialists_text.json"
    },
    "isekaizen/core/specialists/vision.py": {
      "path": "isekaizen/core/specialists/vision.py",
      "classes": [
        "SemanticPattern",
        "VisionSpecialist"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_core_specialists_vision.json"
    },
    "isekaizen/core/specialists/__init__.py": {
      "path": "isekaizen/core/specialists/__init__.py",
      "classes": [],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_core_specialists___init__.json"
    },
    "isekaizen/core/tier_management/tier_manager.py": {
      "path": "isekaizen/core/tier_management/tier_manager.py",
      "classes": [
        "TierType",
        "TierBoundaries",
        "TierComponent",
        "TierManager"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_core_tier_management_tier_manager.json"
    },
    "isekaizen/core/tier_management/__init__.py": {
      "path": "isekaizen/core/tier_management/__init__.py",
      "classes": [],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_core_tier_management___init__.json"
    },
    "isekaizen/core/training/callbacks.py": {
      "path": "isekaizen/core/training/callbacks.py",
      "classes": [
        "EarlyStoppingCallback",
        "ModelCheckpointCallback"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_core_training_callbacks.json"
    },
    "isekaizen/core/training/ratio_tracker.py": {
      "path": "isekaizen/core/training/ratio_tracker.py",
      "classes": [
        "UnifiedRatioTracker"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_core_training_ratio_tracker.json"
    },
    "isekaizen/core/training/risk_accuracy_tracker.py": {
      "path": "isekaizen/core/training/risk_accuracy_tracker.py",
      "classes": [],
      "functions": [
        "modify_pattern_risk_accuracy_tracker"
      ],
      "mini_librarian": "scripts/isekaizen_core_training_risk_accuracy_tracker.json"
    },
    "isekaizen/core/training/trainer.py": {
      "path": "isekaizen/core/training/trainer.py",
      "classes": [
        "UnifiedRatioTrainer"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_core_training_trainer.json"
    },
    "isekaizen/core/training/__init__.py": {
      "path": "isekaizen/core/training/__init__.py",
      "classes": [],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_core_training___init__.json"
    },
    "isekaizen/core/optimizer/risk_accuracy/pattern_adapter.py": {
      "path": "isekaizen/core/optimizer/risk_accuracy/pattern_adapter.py",
      "classes": [
        "PatternRiskAccuracyAdapter"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_core_optimizer_risk_accuracy_pattern_adapter.json"
    },
    "isekaizen/core/optimizer/risk_accuracy/pattern_risk_accuracy_tracker.py": {
      "path": "isekaizen/core/optimizer/risk_accuracy/pattern_risk_accuracy_tracker.py",
      "classes": [
        "PatternRiskAccuracyTracker"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_core_optimizer_risk_accuracy_pattern_risk_accuracy_tracker.json"
    },
    "isekaizen/core/optimizer/risk_accuracy/risk_accuracy_optimizer.py": {
      "path": "isekaizen/core/optimizer/risk_accuracy/risk_accuracy_optimizer.py",
      "classes": [
        "RiskAccuracyOptimizer"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_core_optimizer_risk_accuracy_risk_accuracy_optimizer.json"
    },
    "isekaizen/core/optimizer/risk_accuracy/__init__.py": {
      "path": "isekaizen/core/optimizer/risk_accuracy/__init__.py",
      "classes": [],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_core_optimizer_risk_accuracy___init__.json"
    },
    "isekaizen/core/optimizer/unified_ratio/equilibrium_bounds.py": {
      "path": "isekaizen/core/optimizer/unified_ratio/equilibrium_bounds.py",
      "classes": [
        "PatternEquilibriumTracker"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_core_optimizer_unified_ratio_equilibrium_bounds.json"
    },
    "isekaizen/core/optimizer/unified_ratio/ratio_tracker.py": {
      "path": "isekaizen/core/optimizer/unified_ratio/ratio_tracker.py",
      "classes": [
        "UnifiedRatioTracker"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_core_optimizer_unified_ratio_ratio_tracker.json"
    },
    "isekaizen/core/optimizer/unified_ratio/__init__.py": {
      "path": "isekaizen/core/optimizer/unified_ratio/__init__.py",
      "classes": [],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_core_optimizer_unified_ratio___init__.json"
    },
    "isekaizen/core/training/callbacks/early_stopping.py": {
      "path": "isekaizen/core/training/callbacks/early_stopping.py",
      "classes": [
        "EarlyStoppingCallback"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_core_training_callbacks_early_stopping.json"
    },
    "isekaizen/core/training/callbacks/model_checkpoint.py": {
      "path": "isekaizen/core/training/callbacks/model_checkpoint.py",
      "classes": [
        "ModelCheckpointCallback"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_core_training_callbacks_model_checkpoint.json"
    },
    "isekaizen/core/training/callbacks/ratio_callbacks.py": {
      "path": "isekaizen/core/training/callbacks/ratio_callbacks.py",
      "classes": [],
      "functions": [
        "track_unified_ratio_callback"
      ],
      "mini_librarian": "scripts/isekaizen_core_training_callbacks_ratio_callbacks.json"
    },
    "isekaizen/core/training/callbacks/__init__.py": {
      "path": "isekaizen/core/training/callbacks/__init__.py",
      "classes": [],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_core_training_callbacks___init__.json"
    },
    "isekaizen/core/training/risk_accuracy_tracker/risk_accuracy_tracker_modifier.py": {
      "path": "isekaizen/core/training/risk_accuracy_tracker/risk_accuracy_tracker_modifier.py",
      "classes": [],
      "functions": [
        "modify_pattern_risk_accuracy_tracker"
      ],
      "mini_librarian": "scripts/isekaizen_core_training_risk_accuracy_tracker_risk_accuracy_tracker_modifier.json"
    },
    "isekaizen/core/training/risk_accuracy_tracker/__init__.py": {
      "path": "isekaizen/core/training/risk_accuracy_tracker/__init__.py",
      "classes": [],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_core_training_risk_accuracy_tracker___init__.json"
    },
    "isekaizen/core/training/unified_ratio_trainer/callbacks.py": {
      "path": "isekaizen/core/training/unified_ratio_trainer/callbacks.py",
      "classes": [],
      "functions": [
        "track_unified_ratio_callback"
      ],
      "mini_librarian": "scripts/isekaizen_core_training_unified_ratio_trainer_callbacks.json"
    },
    "isekaizen/core/training/unified_ratio_trainer/unified_ratio_trainer.py": {
      "path": "isekaizen/core/training/unified_ratio_trainer/unified_ratio_trainer.py",
      "classes": [
        "UnifiedRatioTrainer"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_core_training_unified_ratio_trainer_unified_ratio_trainer.json"
    },
    "isekaizen/core/training/unified_ratio_trainer/__init__.py": {
      "path": "isekaizen/core/training/unified_ratio_trainer/__init__.py",
      "classes": [],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_core_training_unified_ratio_trainer___init__.json"
    },
    "isekaizen/cortex/utils/types.py": {
      "path": "isekaizen/cortex/utils/types.py",
      "classes": [
        "PatternType",
        "DomainType",
        "SkillTree",
        "ProcessingStage",
        "CortexFlowMetadata",
        "Pattern",
        "BatchMetadata",
        "ResourceAllocation",
        "ProcessingResult",
        "RiskEvent",
        "ProcessingError",
        "ResourceError"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_cortex_utils_types.json"
    },
    "isekaizen/cortex/utils/__init__.py": {
      "path": "isekaizen/cortex/utils/__init__.py",
      "classes": [],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_cortex_utils___init__.json"
    },
    "isekaizen/data/loaders/cifar10_loader.py": {
      "path": "isekaizen/data/loaders/cifar10_loader.py",
      "classes": [],
      "functions": [
        "load_cifar10_data"
      ],
      "mini_librarian": "scripts/isekaizen_data_loaders_cifar10_loader.json"
    },
    "isekaizen/data/loaders/__init__.py": {
      "path": "isekaizen/data/loaders/__init__.py",
      "classes": [],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_data_loaders___init__.json"
    },
    "isekaizen/mediators/augmentation/template_mediator.py": {
      "path": "isekaizen/mediators/augmentation/template_mediator.py",
      "classes": [
        "AugmentationMediator"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_mediators_augmentation_template_mediator.json"
    },
    "isekaizen/mediators/augmentation/__init__.py": {
      "path": "isekaizen/mediators/augmentation/__init__.py",
      "classes": [],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_mediators_augmentation___init__.json"
    },
    "isekaizen/mediators/pattern/data_mediator.py": {
      "path": "isekaizen/mediators/pattern/data_mediator.py",
      "classes": [
        "PatternDataMediator"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_mediators_pattern_data_mediator.json"
    },
    "isekaizen/mediators/pattern/__init__.py": {
      "path": "isekaizen/mediators/pattern/__init__.py",
      "classes": [],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_mediators_pattern___init__.json"
    },
    "isekaizen/mediators/pattern_data_mediator/pattern_data_mediator.py": {
      "path": "isekaizen/mediators/pattern_data_mediator/pattern_data_mediator.py",
      "classes": [
        "PatternDataMediator"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_mediators_pattern_data_mediator_pattern_data_mediator.json"
    },
    "isekaizen/mediators/pattern_data_mediator/__init__.py": {
      "path": "isekaizen/mediators/pattern_data_mediator/__init__.py",
      "classes": [],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_mediators_pattern_data_mediator___init__.json"
    },
    "isekaizen/mediators/ratio/equilibrium_mediator.py": {
      "path": "isekaizen/mediators/ratio/equilibrium_mediator.py",
      "classes": [
        "PatternEquilibriumTracker"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_mediators_ratio_equilibrium_mediator.json"
    },
    "isekaizen/mediators/ratio/ratio_tracker.py": {
      "path": "isekaizen/mediators/ratio/ratio_tracker.py",
      "classes": [
        "UnifiedRatioTracker"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_mediators_ratio_ratio_tracker.json"
    },
    "isekaizen/mediators/ratio/__init__.py": {
      "path": "isekaizen/mediators/ratio/__init__.py",
      "classes": [],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_mediators_ratio___init__.json"
    },
    "isekaizen/mediators/augmentation/specialized/vision_mediator.py": {
      "path": "isekaizen/mediators/augmentation/specialized/vision_mediator.py",
      "classes": [
        "VisionAugmentationMediator"
      ],
      "functions": [
        "create_augmentation_mediator_vision"
      ],
      "mini_librarian": "scripts/isekaizen_mediators_augmentation_specialized_vision_mediator.json"
    },
    "isekaizen/mediators/augmentation/specialized/__init__.py": {
      "path": "isekaizen/mediators/augmentation/specialized/__init__.py",
      "classes": [],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_mediators_augmentation_specialized___init__.json"
    },
    "isekaizen/mediators/pattern/specialized/__init__.py": {
      "path": "isekaizen/mediators/pattern/specialized/__init__.py",
      "classes": [],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_mediators_pattern_specialized___init__.json"
    },
    "isekaizen/models/architectures/model_creation.py": {
      "path": "isekaizen/models/architectures/model_creation.py",
      "classes": [],
      "functions": [
        "create_model"
      ],
      "mini_librarian": "scripts/isekaizen_models_architectures_model_creation.json"
    },
    "isekaizen/models/architectures/__init__.py": {
      "path": "isekaizen/models/architectures/__init__.py",
      "classes": [],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_models_architectures___init__.json"
    },
    "isekaizen/models/swapping/model_swap_manager.py": {
      "path": "isekaizen/models/swapping/model_swap_manager.py",
      "classes": [
        "ModelSwapManager"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_models_swapping_model_swap_manager.json"
    },
    "isekaizen/models/swapping/__init__.py": {
      "path": "isekaizen/models/swapping/__init__.py",
      "classes": [],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_models_swapping___init__.json"
    },
    "isekaizen/optimizers/configs/optimizer_configs.py": {
      "path": "isekaizen/optimizers/configs/optimizer_configs.py",
      "classes": [],
      "functions": [
        "get_optimizer_config",
        "list_available_optimizers",
        "explain_optimizer_config"
      ],
      "mini_librarian": "scripts/isekaizen_optimizers_configs_optimizer_configs.json"
    },
    "isekaizen/optimizers/configs/__init__.py": {
      "path": "isekaizen/optimizers/configs/__init__.py",
      "classes": [],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_optimizers_configs___init__.json"
    },
    "isekaizen/optimizers/eve/base.py": {
      "path": "isekaizen/optimizers/eve/base.py",
      "classes": [
        "EVENaturalWeights"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_optimizers_eve_base.json"
    },
    "isekaizen/optimizers/eve/lr_boundary.py": {
      "path": "isekaizen/optimizers/eve/lr_boundary.py",
      "classes": [
        "LRBoundaryCalculator"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_optimizers_eve_lr_boundary.json"
    },
    "isekaizen/optimizers/eve/risk_aware.py": {
      "path": "isekaizen/optimizers/eve/risk_aware.py",
      "classes": [
        "RiskAwareEVEOptimizer"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_optimizers_eve_risk_aware.json"
    },
    "isekaizen/optimizers/eve/unified_ratio.py": {
      "path": "isekaizen/optimizers/eve/unified_ratio.py",
      "classes": [
        "EVEUnifiedRatio"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_optimizers_eve_unified_ratio.json"
    },
    "isekaizen/optimizers/eve/__init__.py": {
      "path": "isekaizen/optimizers/eve/__init__.py",
      "classes": [],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_optimizers_eve___init__.json"
    },
    "isekaizen/optimizers/lr/boundary_calculator.py": {
      "path": "isekaizen/optimizers/lr/boundary_calculator.py",
      "classes": [
        "LRBoundaryCalculator"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_optimizers_lr_boundary_calculator.json"
    },
    "isekaizen/optimizers/lr_boundary/lr_boundary_calculator.py": {
      "path": "isekaizen/optimizers/lr_boundary/lr_boundary_calculator.py",
      "classes": [
        "LRBoundaryCalculator"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_optimizers_lr_boundary_lr_boundary_calculator.json"
    },
    "isekaizen/optimizers/lr_boundary/__init__.py": {
      "path": "isekaizen/optimizers/lr_boundary/__init__.py",
      "classes": [],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_optimizers_lr_boundary___init__.json"
    },
    "isekaizen/optimizers/registration/unified_ratio_registration.py": {
      "path": "isekaizen/optimizers/registration/unified_ratio_registration.py",
      "classes": [],
      "functions": [
        "register_unified_ratio_optimizer"
      ],
      "mini_librarian": "scripts/isekaizen_optimizers_registration_unified_ratio_registration.json"
    },
    "isekaizen/optimizers/registration/__init__.py": {
      "path": "isekaizen/optimizers/registration/__init__.py",
      "classes": [],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_optimizers_registration___init__.json"
    },
    "isekaizen/pattern/unified/streamlined_optimizer.py": {
      "path": "isekaizen/pattern/unified/streamlined_optimizer.py",
      "classes": [
        "StreamlinedBatchOptimizer"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_pattern_unified_streamlined_optimizer.json"
    },
    "isekaizen/pattern/unified/unified_tracker.py": {
      "path": "isekaizen/pattern/unified/unified_tracker.py",
      "classes": [
        "UnifiedPatternTracker"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_pattern_unified_unified_tracker.json"
    },
    "isekaizen/pattern/unified/__init__.py": {
      "path": "isekaizen/pattern/unified/__init__.py",
      "classes": [],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_pattern_unified___init__.json"
    },
    "isekaizen/research/model_swapping/model_fingerprinting.py": {
      "path": "isekaizen/research/model_swapping/model_fingerprinting.py",
      "classes": [],
      "functions": [
        "save_model_fingerprint",
        "load_model_fingerprint",
        "apply_fingerprint_to_model"
      ],
      "mini_librarian": "scripts/isekaizen_research_model_swapping_model_fingerprinting.json"
    },
    "isekaizen/research/model_swapping/model_swap_manager.py": {
      "path": "isekaizen/research/model_swapping/model_swap_manager.py",
      "classes": [
        "ModelSwapManager"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_research_model_swapping_model_swap_manager.json"
    },
    "isekaizen/research/model_swapping/__init__.py": {
      "path": "isekaizen/research/model_swapping/__init__.py",
      "classes": [],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_research_model_swapping___init__.json"
    },
    "isekaizen/trainer/optimized/optimized_trainer.py": {
      "path": "isekaizen/trainer/optimized/optimized_trainer.py",
      "classes": [
        "OptimizedTrainer",
        "PatternService"
      ],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_trainer_optimized_optimized_trainer.json"
    },
    "isekaizen/trainer/optimized/__init__.py": {
      "path": "isekaizen/trainer/optimized/__init__.py",
      "classes": [],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_trainer_optimized___init__.json"
    },
    "isekaizen/utils/formatting/metrics_formatting.py": {
      "path": "isekaizen/utils/formatting/metrics_formatting.py",
      "classes": [],
      "functions": [
        "format_metrics_table",
        "log_section"
      ],
      "mini_librarian": "scripts/isekaizen_utils_formatting_metrics_formatting.json"
    },
    "isekaizen/utils/formatting/__init__.py": {
      "path": "isekaizen/utils/formatting/__init__.py",
      "classes": [],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_utils_formatting___init__.json"
    },
    "isekaizen/utils/training_utils/fibonacci_intervals.py": {
      "path": "isekaizen/utils/training_utils/fibonacci_intervals.py",
      "classes": [],
      "functions": [
        "get_fibonacci_check_intervals"
      ],
      "mini_librarian": "scripts/isekaizen_utils_training_utils_fibonacci_intervals.json"
    },
    "isekaizen/utils/training_utils/worker_calculation.py": {
      "path": "isekaizen/utils/training_utils/worker_calculation.py",
      "classes": [],
      "functions": [
        "calculate_optimal_workers"
      ],
      "mini_librarian": "scripts/isekaizen_utils_training_utils_worker_calculation.json"
    },
    "isekaizen/utils/training_utils/__init__.py": {
      "path": "isekaizen/utils/training_utils/__init__.py",
      "classes": [],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_utils_training_utils___init__.json"
    },
    "isekaizen/visualization/training_plots/training_visualization.py": {
      "path": "isekaizen/visualization/training_plots/training_visualization.py",
      "classes": [],
      "functions": [
        "visualize_training_results"
      ],
      "mini_librarian": "scripts/isekaizen_visualization_training_plots_training_visualization.json"
    },
    "isekaizen/visualization/training_plots/__init__.py": {
      "path": "isekaizen/visualization/training_plots/__init__.py",
      "classes": [],
      "functions": [],
      "mini_librarian": "scripts/isekaizen_visualization_training_plots___init__.json"
    },
    "testing/integration/test_mathematical_implementation.py": {
      "path": "testing/integration/test_mathematical_implementation.py",
      "classes": [
        "TestMathematicalImplementation"
      ],
      "functions": [],
      "mini_librarian": "scripts/testing_integration_test_mathematical_implementation.json"
    },
    "testing/math_validation/run_all_tests.py": {
      "path": "testing/math_validation/run_all_tests.py",
      "classes": [],
      "functions": [
        "run_all_tests"
      ],
      "mini_librarian": "scripts/testing_math_validation_run_all_tests.json"
    },
    "testing/math_validation/test_cognitive_efficiency.py": {
      "path": "testing/math_validation/test_cognitive_efficiency.py",
      "classes": [
        "TestCognitiveEfficiency"
      ],
      "functions": [],
      "mini_librarian": "scripts/testing_math_validation_test_cognitive_efficiency.json"
    },
    "testing/math_validation/test_resource_allocation.py": {
      "path": "testing/math_validation/test_resource_allocation.py",
      "classes": [
        "TestResourceAllocation"
      ],
      "functions": [],
      "mini_librarian": "scripts/testing_math_validation_test_resource_allocation.json"
    },
    "tests/optimization/risk_aware_test.py": {
      "path": "tests/optimization/risk_aware_test.py",
      "classes": [
        "SimpleModel",
        "MockEquilibriumTracker"
      ],
      "functions": [
        "test_risk_aware_optimizer"
      ],
      "mini_librarian": "scripts/tests_optimization_risk_aware_test.json"
    },
    "utils/analysis/fibonacci-lr-implementation.py": {
      "path": "utils/analysis/fibonacci-lr-implementation.py",
      "classes": [
        "EVEUnifiedRatioWithFibonacci"
      ],
      "functions": [
        "get_fibonacci_check_intervals",
        "register_unified_ratio_optimizer",
        "analyze_fibonacci_learning"
      ],
      "mini_librarian": "scripts/utils_analysis_fibonacci-lr-implementation.json"
    }
  },
  "classes": {
    "SimpleModel": {
      "file": "tests/optimization/risk_aware_test.py",
      "start_line": 40,
      "end_line": 52
    },
    "DummyDataset": {
      "file": "isekaizen/pattern/detection.py",
      "start_line": 864,
      "end_line": 876
    },
    "MockPatternMap": {
      "file": "tests/test_pre_augment_optimizer.py",
      "start_line": 55,
      "end_line": 81
    },
    "TestPreAugmentOptimizer": {
      "file": "tests/test_pre_augment_optimizer.py",
      "start_line": 81,
      "end_line": 252
    },
    "NumpySafeEncoder": {
      "file": "benchmarks.old/examples/run_streamlined_pattern_mapping.py",
      "start_line": 113,
      "end_line": 129
    },
    "SemanticType": {
      "file": "isekaizen/core/cortex/semantic_core.py",
      "start_line": 13,
      "end_line": 20
    },
    "SemanticPattern": {
      "file": "isekaizen/core/specialists/vision.py",
      "start_line": 15,
      "end_line": 22
    },
    "SemanticPatternRegistry": {
      "file": "isekaizen/core/cortex/semantic_core.py",
      "start_line": 30,
      "end_line": 184
    },
    "DomainPatternExtractor": {
      "file": "isekaizen/core/cortex/semantic_core.py",
      "start_line": 184,
      "end_line": 292
    },
    "StreamlinedPatternTrainer": {
      "file": "benchmarks.old/examples/run_streamlined_responsive.py",
      "start_line": 55,
      "end_line": 456
    },
    "AugmentationMediator": {
      "file": "isekaizen/mediators/augmentation/template_mediator.py",
      "start_line": 19,
      "end_line": 587
    },
    "HardwareDiagnostics": {
      "file": "benchmarks.old/examples/modified/hardware_diagnostics.py",
      "start_line": 41,
      "end_line": 578
    },
    "EnhancedUnifiedRatioTrainer": {
      "file": "benchmarks.old/examples/modified/integration-example.py",
      "start_line": 35,
      "end_line": 264
    },
    "LazyPatternAugmentedDataset": {
      "file": "benchmarks.old/examples/modified/lazy_augmentation.py",
      "start_line": 17,
      "end_line": 677
    },
    "Mediator": {
      "file": "isekaizen/mediators/base.py",
      "start_line": 15,
      "end_line": 62
    },
    "MediatorError": {
      "file": "isekaizen/mediators/base.py",
      "start_line": 63,
      "end_line": 67
    },
    "MediatorInitializationError": {
      "file": "isekaizen/mediators/base.py",
      "start_line": 68,
      "end_line": 72
    },
    "MediatorDataError": {
      "file": "isekaizen/mediators/base.py",
      "start_line": 73,
      "end_line": 77
    },
    "NonImagePatternMapper": {
      "file": "benchmarks.old/examples/modified/regenerate_pattern_map_non_image.py",
      "start_line": 33,
      "end_line": 416
    },
    "PatternDataMediator": {
      "file": "isekaizen/mediators/pattern_data_mediator/pattern_data_mediator.py",
      "start_line": 16,
      "end_line": 330
    },
    "UnifiedRatioTrainer": {
      "file": "isekaizen/core/training/unified_ratio_trainer/unified_ratio_trainer.py",
      "start_line": 25,
      "end_line": 657
    },
    "SimplifiedPatternMapper": {
      "file": "benchmarks.old/examples/modified/simplified_pattern_mapping.py",
      "start_line": 47,
      "end_line": 633
    },
    "SimplifiedRatioTrainer": {
      "file": "benchmarks.old/examples/modified/simplified_ratio_trainer.py",
      "start_line": 59,
      "end_line": 426
    },
    "TerminalUI": {
      "file": "benchmarks.old/examples/modified/terminal_ui.py",
      "start_line": 56,
      "end_line": 1027
    },
    "UrwidTerminalUI": {
      "file": "benchmarks.old/examples/modified/terminal_ui.py",
      "start_line": 1040,
      "end_line": 1905
    },
    "TrainingMonitor": {
      "file": "benchmarks.old/examples/modified/training_monitor.py",
      "start_line": 32,
      "end_line": 378
    },
    "BaselineMetricsCollector": {
      "file": "benchmarks.old/examples/modified/baseline_tests/run_eve_baseline_metrics_fixed.py",
      "start_line": 51,
      "end_line": 207
    },
    "StudyMaterial": {
      "file": "benchmarks.old/models/src/assessment/ai_assessment.py",
      "start_line": 12,
      "end_line": 20
    },
    "TestQuestion": {
      "file": "benchmarks.old/models/src/assessment/ai_assessment.py",
      "start_line": 21,
      "end_line": 31
    },
    "AIEducationalAssessment": {
      "file": "benchmarks.old/models/src/assessment/ai_assessment.py",
      "start_line": 31,
      "end_line": 358
    },
    "KnowledgeProbe": {
      "file": "benchmarks.old/models/src/assessment/knowledge_probe.py",
      "start_line": 10,
      "end_line": 17
    },
    "DomainType": {
      "file": "isekaizen/cortex/utils/types.py",
      "start_line": 14,
      "end_line": 19
    },
    "ProcessingConfig": {
      "file": "isekaizen/core/cortex/coordinator.py",
      "start_line": 25,
      "end_line": 32
    },
    "CortexCoordinator": {
      "file": "isekaizen/core/cortex/coordinator.py",
      "start_line": 32,
      "end_line": 366
    },
    "DiagnosticType": {
      "file": "isekaizen/core/cortex/diagnostics.py",
      "start_line": 11,
      "end_line": 17
    },
    "DiagnosticResult": {
      "file": "isekaizen/core/cortex/diagnostics.py",
      "start_line": 18,
      "end_line": 26
    },
    "CortexDiagnostics": {
      "file": "isekaizen/core/cortex/diagnostics.py",
      "start_line": 26,
      "end_line": 219
    },
    "SkillTree": {
      "file": "isekaizen/cortex/utils/types.py",
      "start_line": 19,
      "end_line": 25
    },
    "KTParameters": {
      "file": "isekaizen/core/cortex/integrated_kt_rpg.py",
      "start_line": 20,
      "end_line": 26
    },
    "Pattern": {
      "file": "isekaizen/cortex/utils/types.py",
      "start_line": 45,
      "end_line": 69
    },
    "IntegratedCortexSystem": {
      "file": "isekaizen/core/cortex/integrated_kt_rpg.py",
      "start_line": 36,
      "end_line": 179
    },
    "OrchestrationMode": {
      "file": "isekaizen/core/cortex/pattern_orchestrator.py",
      "start_line": 17,
      "end_line": 22
    },
    "PatternOrchestrator": {
      "file": "isekaizen/core/refactored/base_optimizer.py",
      "start_line": 67,
      "end_line": 75
    },
    "ValidationStatus": {
      "file": "isekaizen/core/cortex/pattern_store.py",
      "start_line": 40,
      "end_line": 45
    },
    "PatternMetrics": {
      "file": "isekaizen/core/cortex/pattern_store.py",
      "start_line": 46,
      "end_line": 53
    },
    "PatternStore": {
      "file": "isekaizen/core/cortex/pattern_store.py",
      "start_line": 122,
      "end_line": 422
    },
    "ResourceManager": {
      "file": "isekaizen/core/refactored/base_optimizer.py",
      "start_line": 75,
      "end_line": 86
    },
    "PatternType": {
      "file": "isekaizen/cortex/utils/types.py",
      "start_line": 10,
      "end_line": 14
    },
    "RPGCortexManager": {
      "file": "isekaizen/core/refactored/base_optimizer.py",
      "start_line": 53,
      "end_line": 67
    },
    "BaseSpecialist": {
      "file": "isekaizen/core/specialists/base.py",
      "start_line": 8,
      "end_line": 49
    },
    "EmotionalPattern": {
      "file": "isekaizen/core/specialists/sentiment.py",
      "start_line": 14,
      "end_line": 21
    },
    "SentimentSpecialist": {
      "file": "isekaizen/core/specialists/sentiment.py",
      "start_line": 21,
      "end_line": 327
    },
    "TextPattern": {
      "file": "isekaizen/core/specialists/text.py",
      "start_line": 14,
      "end_line": 21
    },
    "TextSpecialist": {
      "file": "isekaizen/core/specialists/text.py",
      "start_line": 21,
      "end_line": 206
    },
    "VisionSpecialist": {
      "file": "isekaizen/core/specialists/vision.py",
      "start_line": 22,
      "end_line": 207
    },
    "GPUConfig": {
      "file": "benchmarks.old/models/src/utils/config.py",
      "start_line": 10,
      "end_line": 18
    },
    "MemoryPoolConfig": {
      "file": "benchmarks.old/models/src/utils/config.py",
      "start_line": 19,
      "end_line": 26
    },
    "SystemConfiguration": {
      "file": "benchmarks.old/models/src/utils/config.py",
      "start_line": 42,
      "end_line": 89
    },
    "TrainingBatch": {
      "file": "benchmarks.old/models/src/utils/data_fetcher.py",
      "start_line": 14,
      "end_line": 22
    },
    "EnhancedDataFetcher": {
      "file": "benchmarks.old/models/src/utils/data_fetcher.py",
      "start_line": 22,
      "end_line": 218
    },
    "InputTranslator": {
      "file": "isekaizen/utils/input_translator.py",
      "start_line": 11,
      "end_line": 92
    },
    "SpecialistType": {
      "file": "benchmarks.old/models/src/utils/integration_test.py",
      "start_line": 7,
      "end_line": 12
    },
    "SpecialistOutput": {
      "file": "benchmarks.old/models/src/utils/integration_test.py",
      "start_line": 13,
      "end_line": 19
    },
    "IntegrationTestHarness": {
      "file": "benchmarks.old/models/src/utils/integration_test.py",
      "start_line": 19,
      "end_line": 117
    },
    "CustomJSONEncoder": {
      "file": "benchmarks.old/models/src/utils/json_serializer.py",
      "start_line": 9,
      "end_line": 23
    },
    "KTBatchOptimizer": {
      "file": "isekaizen/utils/kt_batch_optimizer.py",
      "start_line": 19,
      "end_line": 122
    },
    "GPUSpecs": {
      "file": "benchmarks.old/models/src/utils/kt_batch_optimizer_v3.py",
      "start_line": 25,
      "end_line": 32
    },
    "ProcessingStage": {
      "file": "isekaizen/cortex/utils/types.py",
      "start_line": 25,
      "end_line": 33
    },
    "CortexFlowMetadata": {
      "file": "isekaizen/cortex/utils/types.py",
      "start_line": 34,
      "end_line": 44
    },
    "BatchMetadata": {
      "file": "isekaizen/cortex/utils/types.py",
      "start_line": 71,
      "end_line": 81
    },
    "ResourceAllocation": {
      "file": "isekaizen/cortex/utils/types.py",
      "start_line": 82,
      "end_line": 93
    },
    "ProcessingResult": {
      "file": "isekaizen/cortex/utils/types.py",
      "start_line": 94,
      "end_line": 106
    },
    "RiskEvent": {
      "file": "isekaizen/cortex/utils/types.py",
      "start_line": 107,
      "end_line": 119
    },
    "ProcessingError": {
      "file": "isekaizen/cortex/utils/types.py",
      "start_line": 119,
      "end_line": 126
    },
    "ResourceError": {
      "file": "isekaizen/cortex/utils/types.py",
      "start_line": 126,
      "end_line": 136
    },
    "YOLOMetrics": {
      "file": "benchmarks.old/models/src/utils/vision_diagnostic.py",
      "start_line": 9,
      "end_line": 15
    },
    "VisionDiagnostic": {
      "file": "benchmarks.old/models/src/utils/vision_diagnostic.py",
      "start_line": 15,
      "end_line": 150
    },
    "TrainingLogAnalyzer": {
      "file": "benchmarks.old/models/src/utils/analysist_tools/log_analyzer.py",
      "start_line": 12,
      "end_line": 317
    },
    "ComponentType": {
      "file": "benchmarks.old/models/src/utils/scil/core.py",
      "start_line": 18,
      "end_line": 23
    },
    "SpinalCordIntegrationLayer": {
      "file": "benchmarks.old/models/src/utils/scil/core.py",
      "start_line": 31,
      "end_line": 595
    },
    "ChunkSize": {
      "file": "benchmarks.old/models/src/utils/scil/memory_pool.py",
      "start_line": 33,
      "end_line": 40
    },
    "MemoryChunk": {
      "file": "benchmarks.old/models/src/utils/scil/memory_pool.py",
      "start_line": 41,
      "end_line": 51
    },
    "MemoryPoolManager": {
      "file": "benchmarks.old/models/src/utils/scil/memory_pool.py",
      "start_line": 51,
      "end_line": 340
    },
    "DomainValidationConfig": {
      "file": "benchmarks.old/models/src/utils/training/domain_validator.py",
      "start_line": 12,
      "end_line": 18
    },
    "DomainSpecificValidator": {
      "file": "benchmarks.old/models/src/utils/training/domain_validator.py",
      "start_line": 18,
      "end_line": 320
    },
    "MNISTPatternTest": {
      "file": "benchmarks.old/models/src/utils/training/mnist_test.py",
      "start_line": 10,
      "end_line": 167
    },
    "PatternLearningValidator": {
      "file": "benchmarks.old/models/src/utils/training/pattern_learning_validator.py",
      "start_line": 12,
      "end_line": 330
    },
    "ProgressiveLearningTest": {
      "file": "benchmarks.old/models/src/utils/training/progressive_learning_test.py",
      "start_line": 14,
      "end_line": 360
    },
    "RealDomainTest": {
      "file": "benchmarks.old/models/src/utils/training/real_domain_test.py",
      "start_line": 22,
      "end_line": 236
    },
    "TestDataSetup": {
      "file": "benchmarks.old/models/src/utils/training/test_data_setup.py",
      "start_line": 8,
      "end_line": 300
    },
    "TrainingState": {
      "file": "benchmarks.old/models/src/utils/training/training_coordinator.py",
      "start_line": 13,
      "end_line": 22
    },
    "TrainingCoordinator": {
      "file": "benchmarks.old/models/src/utils/training/training_coordinator.py",
      "start_line": 22,
      "end_line": 265
    },
    "TraditionalMetrics": {
      "file": "benchmarks.old/models/src/utils/training/training_metrics.py",
      "start_line": 11,
      "end_line": 21
    },
    "TrainingMetricsTracker": {
      "file": "benchmarks.old/models/src/utils/training/training_metrics.py",
      "start_line": 30,
      "end_line": 256
    },
    "GracefulKiller": {
      "file": "benchmarks.old/models/src/utils/training/training_prep.py",
      "start_line": 16,
      "end_line": 26
    },
    "TrainingPreparationSystem": {
      "file": "benchmarks.old/models/src/utils/training/training_prep.py",
      "start_line": 26,
      "end_line": 410
    },
    "SimplePatternMediator": {
      "file": "isekaizen/cli/train_dataset.py",
      "start_line": 676,
      "end_line": 784
    },
    "CognitiveEfficiencyCalculator": {
      "file": "isekaizen/cognitive/efficiency.py",
      "start_line": 11,
      "end_line": 101
    },
    "BaseOptimizer": {
      "file": "isekaizen/core/base_optimizer.py",
      "start_line": 13,
      "end_line": 177
    },
    "EVEConfig": {
      "file": "isekaizen/core/config.py",
      "start_line": 17,
      "end_line": 42
    },
    "TrainingConfig": {
      "file": "isekaizen/core/config.py",
      "start_line": 43,
      "end_line": 71
    },
    "ModelConfig": {
      "file": "isekaizen/core/config.py",
      "start_line": 72,
      "end_line": 101
    },
    "DataConfig": {
      "file": "isekaizen/core/config.py",
      "start_line": 102,
      "end_line": 119
    },
    "IsekaiZenConfig": {
      "file": "isekaizen/core/config.py",
      "start_line": 120,
      "end_line": 162
    },
    "IsekaiZenBaseException": {
      "file": "isekaizen/core/exceptions.py",
      "start_line": 11,
      "end_line": 15
    },
    "ConfigurationError": {
      "file": "isekaizen/core/exceptions.py",
      "start_line": 15,
      "end_line": 19
    },
    "DataLoadingError": {
      "file": "isekaizen/core/exceptions.py",
      "start_line": 19,
      "end_line": 23
    },
    "PatternMappingError": {
      "file": "isekaizen/core/exceptions.py",
      "start_line": 23,
      "end_line": 27
    },
    "OptimizationError": {
      "file": "isekaizen/core/exceptions.py",
      "start_line": 27,
      "end_line": 31
    },
    "ModelError": {
      "file": "isekaizen/core/exceptions.py",
      "start_line": 31,
      "end_line": 35
    },
    "TrainingError": {
      "file": "isekaizen/core/exceptions.py",
      "start_line": 35,
      "end_line": 39
    },
    "HardwareError": {
      "file": "isekaizen/core/exceptions.py",
      "start_line": 39,
      "end_line": 43
    },
    "PatternError": {
      "file": "isekaizen/core/exceptions.py",
      "start_line": 43,
      "end_line": 47
    },
    "MemoryError": {
      "file": "isekaizen/core/exceptions.py",
      "start_line": 47,
      "end_line": 51
    },
    "ValidationError": {
      "file": "isekaizen/core/exceptions.py",
      "start_line": 51,
      "end_line": 55
    },
    "VisualizationError": {
      "file": "isekaizen/core/exceptions.py",
      "start_line": 55,
      "end_line": 59
    },
    "BatchSizeSelector": {
      "file": "isekaizen/core/optimizers.py",
      "start_line": 14,
      "end_line": 76
    },
    "AugmentationManager": {
      "file": "isekaizen/data/augmentation.py",
      "start_line": 25,
      "end_line": 315
    },
    "AugmentedDataset": {
      "file": "isekaizen/pattern/pre_augmentation.py",
      "start_line": 19,
      "end_line": 99
    },
    "TransformedSubset": {
      "file": "isekaizen/data/augmented_dataset.py",
      "start_line": 375,
      "end_line": 455
    },
    "ParameterTuner": {
      "file": "isekaizen/extensions/parameter_tuning.py",
      "start_line": 19,
      "end_line": 53
    },
    "CognitiveEfficiencyTuner": {
      "file": "isekaizen/extensions/parameter_tuning.py",
      "start_line": 54,
      "end_line": 99
    },
    "WorkloadSpecificOptimizer": {
      "file": "isekaizen/extensions/parameter_tuning.py",
      "start_line": 100,
      "end_line": 146
    },
    "HardwareAnalyzer": {
      "file": "isekaizen/hardware/analyzer.py",
      "start_line": 17,
      "end_line": 221
    },
    "ModelMemoryAnalyzer": {
      "file": "isekaizen/hardware/memory.py",
      "start_line": 12,
      "end_line": 268
    },
    "EVECore": {
      "file": "isekaizen/optimizers/eve.py",
      "start_line": 20,
      "end_line": 134
    },
    "EVEPatternMomentum": {
      "file": "isekaizen/optimizers/eve.py",
      "start_line": 134,
      "end_line": 247
    },
    "EVERiskAdaptive": {
      "file": "isekaizen/optimizers/eve.py",
      "start_line": 247,
      "end_line": 359
    },
    "EVENaturalWeights": {
      "file": "isekaizen/optimizers/eve/base.py",
      "start_line": 18,
      "end_line": 201
    },
    "EVESimplifiedRatio": {
      "file": "isekaizen/optimizers/eve_simplified.py",
      "start_line": 19,
      "end_line": 116
    },
    "EVEUnifiedRatio": {
      "file": "isekaizen/optimizers/eve/unified_ratio.py",
      "start_line": 26,
      "end_line": 452
    },
    "InternalPatternMediator": {
      "file": "isekaizen/optimizers/eve_unified_ratio.py",
      "start_line": 286,
      "end_line": 470
    },
    "FallbackMediator": {
      "file": "isekaizen/optimizers/eve_unified_ratio.py",
      "start_line": 477,
      "end_line": 504
    },
    "HeuristicBatchSelector": {
      "file": "isekaizen/optimizers/heuristic.py",
      "start_line": 15,
      "end_line": 171
    },
    "IsekaiZenOptimizer": {
      "file": "isekaizen/core/refactored/base_optimizer.py",
      "start_line": 88,
      "end_line": 569
    },
    "PotholeAwareIsekaiZen": {
      "file": "isekaizen/optimizers/pothole_aware.py",
      "start_line": 19,
      "end_line": 420
    },
    "StaticBatchSelector": {
      "file": "isekaizen/optimizers/static.py",
      "start_line": 14,
      "end_line": 66
    },
    "PatternResponsiveAugmenter": {
      "file": "isekaizen/pattern/augmentation.py",
      "start_line": 20,
      "end_line": 493
    },
    "UnderFittingProtectedOptimizer": {
      "file": "isekaizen/pattern/batch_underfitting_optimizer.py",
      "start_line": 15,
      "end_line": 197
    },
    "PatternRecognitionService": {
      "file": "isekaizen/pattern/detection.py",
      "start_line": 11,
      "end_line": 372
    },
    "PatternRecognitionTracker": {
      "file": "isekaizen/core/refactored/risk_aware_optimizer.py",
      "start_line": 59,
      "end_line": 267
    },
    "BatchOptimizer": {
      "file": "isekaizen/public/batch_optimizer.py",
      "start_line": 15,
      "end_line": 142
    },
    "CIFAR10Augmented": {
      "file": "isekaizen/semantic/compatibility.py",
      "start_line": 16,
      "end_line": 136
    },
    "SpecialistRegistry": {
      "file": "isekaizen/semantic/clean_specialists.py",
      "start_line": 15,
      "end_line": 115
    },
    "EnhancedPatternMapperClean": {
      "file": "isekaizen/semantic/clean_specialists.py",
      "start_line": 116,
      "end_line": 490
    },
    "SemanticTopographicalMapper": {
      "file": "isekaizen/semantic/mapper_math.py",
      "start_line": 47,
      "end_line": 857
    },
    "FeatureExtractor": {
      "file": "isekaizen/semantic/mapper_math.py",
      "start_line": 395,
      "end_line": 412
    },
    "TopographicalAwareIsekaiZen": {
      "file": "isekaizen/semantic/optimizer.py",
      "start_line": 20,
      "end_line": 414
    },
    "SimpleCNN": {
      "file": "isekaizen/semantic/validation_metrics.py",
      "start_line": 50,
      "end_line": 77
    },
    "SimpleMLP": {
      "file": "isekaizen/semantic/validation_metrics.py",
      "start_line": 93,
      "end_line": 110
    },
    "FallbackModel": {
      "file": "isekaizen/semantic/validation_metrics.py",
      "start_line": 114,
      "end_line": 126
    },
    "BatchProcessedPatternMapper": {
      "file": "isekaizen/tools/pattern_mapper.py",
      "start_line": 60,
      "end_line": 813
    },
    "AdaptiveTrainer": {
      "file": "isekaizen/trainer/adaptive_trainer.py",
      "start_line": 18,
      "end_line": 332
    },
    "ModelTrainer": {
      "file": "isekaizen/trainer/model_trainer.py",
      "start_line": 17,
      "end_line": 310
    },
    "ModelBenchmark": {
      "file": "isekaizen/utils/benchmarking.py",
      "start_line": 28,
      "end_line": 264
    },
    "MemoryTracker": {
      "file": "isekaizen/utils/memory.py",
      "start_line": 27,
      "end_line": 198
    },
    "PrecisionOptimizer": {
      "file": "isekaizen/utils/precision.py",
      "start_line": 26,
      "end_line": 255
    },
    "BatchSizeOptimizer": {
      "file": "isekaizen/core/optimization/batch_sizing.py",
      "start_line": 24,
      "end_line": 606
    },
    "PatternEquilibriumTracker": {
      "file": "isekaizen/mediators/ratio/equilibrium_mediator.py",
      "start_line": 16,
      "end_line": 341
    },
    "EnhancedPatternResponsiveOptimizer": {
      "file": "isekaizen/core/optimizer/enhanced_pattern_responsive.py",
      "start_line": 22,
      "end_line": 673
    },
    "EnhancedRiskAssessmentTracker": {
      "file": "isekaizen/core/optimizer/enhanced_risk_assessment.py",
      "start_line": 22,
      "end_line": 636
    },
    "PatternResponsiveOptimizer": {
      "file": "isekaizen/core/optimizer/pattern_responsive_optimizer.py",
      "start_line": 21,
      "end_line": 269
    },
    "PatternRiskAccuracyTracker": {
      "file": "isekaizen/core/optimizer/risk_accuracy/pattern_risk_accuracy_tracker.py",
      "start_line": 15,
      "end_line": 391
    },
    "PreAugmentOptimizer": {
      "file": "isekaizen/core/optimizer/pre_augment_optimizer.py",
      "start_line": 33,
      "end_line": 302
    },
    "RiskLevel": {
      "file": "isekaizen/core/refactored/risk_aware_optimizer.py",
      "start_line": 22,
      "end_line": 29
    },
    "RiskPattern": {
      "file": "isekaizen/core/refactored/risk_aware_optimizer.py",
      "start_line": 29,
      "end_line": 58
    },
    "RiskAssessmentTracker": {
      "file": "isekaizen/core/refactored/risk_aware_optimizer.py",
      "start_line": 267,
      "end_line": 572
    },
    "RiskAwarePatternIsekaiZen": {
      "file": "isekaizen/core/refactored/risk_aware_optimizer.py",
      "start_line": 572,
      "end_line": 1178
    },
    "SimplifiedRatioTracker": {
      "file": "isekaizen/core/optimizer/simplified_ratio_tracker.py",
      "start_line": 18,
      "end_line": 163
    },
    "SimplifiedPatternResponsiveOptimizer": {
      "file": "isekaizen/core/optimizer/simplified_responsive.py",
      "start_line": 22,
      "end_line": 358
    },
    "IsekaiZenTrainer": {
      "file": "isekaizen/core/refactored/trainer.py",
      "start_line": 15,
      "end_line": 435
    },
    "PatternTracker": {
      "file": "isekaizen/core/pattern/tracking.py",
      "start_line": 47,
      "end_line": 334
    },
    "TierType": {
      "file": "isekaizen/core/tier_management/tier_manager.py",
      "start_line": 21,
      "end_line": 27
    },
    "TierBoundaries": {
      "file": "isekaizen/core/tier_management/tier_manager.py",
      "start_line": 27,
      "end_line": 99
    },
    "TierComponent": {
      "file": "isekaizen/core/tier_management/tier_manager.py",
      "start_line": 100,
      "end_line": 170
    },
    "TierManager": {
      "file": "isekaizen/core/tier_management/tier_manager.py",
      "start_line": 171,
      "end_line": 600
    },
    "EarlyStoppingCallback": {
      "file": "isekaizen/core/training/callbacks/early_stopping.py",
      "start_line": 17,
      "end_line": 113
    },
    "ModelCheckpointCallback": {
      "file": "isekaizen/core/training/callbacks/model_checkpoint.py",
      "start_line": 19,
      "end_line": 141
    },
    "UnifiedRatioTracker": {
      "file": "isekaizen/mediators/ratio/ratio_tracker.py",
      "start_line": 15,
      "end_line": 227
    },
    "PatternRiskAccuracyAdapter": {
      "file": "isekaizen/core/optimizer/risk_accuracy/pattern_adapter.py",
      "start_line": 17,
      "end_line": 211
    },
    "RiskAccuracyOptimizer": {
      "file": "isekaizen/core/optimizer/risk_accuracy/risk_accuracy_optimizer.py",
      "start_line": 21,
      "end_line": 279
    },
    "VisionAugmentationMediator": {
      "file": "isekaizen/mediators/augmentation/specialized/vision_mediator.py",
      "start_line": 18,
      "end_line": 238
    },
    "ModelSwapManager": {
      "file": "isekaizen/research/model_swapping/model_swap_manager.py",
      "start_line": 21,
      "end_line": 374
    },
    "LRBoundaryCalculator": {
      "file": "isekaizen/optimizers/lr_boundary/lr_boundary_calculator.py",
      "start_line": 19,
      "end_line": 250
    },
    "RiskAwareEVEOptimizer": {
      "file": "isekaizen/optimizers/eve/risk_aware.py",
      "start_line": 22,
      "end_line": 601
    },
    "StreamlinedBatchOptimizer": {
      "file": "isekaizen/pattern/unified/streamlined_optimizer.py",
      "start_line": 18,
      "end_line": 270
    },
    "UnifiedPatternTracker": {
      "file": "isekaizen/pattern/unified/unified_tracker.py",
      "start_line": 19,
      "end_line": 591
    },
    "OptimizedTrainer": {
      "file": "isekaizen/trainer/optimized/optimized_trainer.py",
      "start_line": 20,
      "end_line": 852
    },
    "PatternService": {
      "file": "isekaizen/trainer/optimized/optimized_trainer.py",
      "start_line": 154,
      "end_line": 164
    },
    "TestMathematicalImplementation": {
      "file": "testing/integration/test_mathematical_implementation.py",
      "start_line": 30,
      "end_line": 301
    },
    "TestCognitiveEfficiency": {
      "file": "testing/math_validation/test_cognitive_efficiency.py",
      "start_line": 27,
      "end_line": 138
    },
    "TestResourceAllocation": {
      "file": "testing/math_validation/test_resource_allocation.py",
      "start_line": 26,
      "end_line": 196
    },
    "MockEquilibriumTracker": {
      "file": "tests/optimization/risk_aware_test.py",
      "start_line": 105,
      "end_line": 119
    },
    "EVEUnifiedRatioWithFibonacci": {
      "file": "utils/analysis/fibonacci-lr-implementation.py",
      "start_line": 93,
      "end_line": 126
    }
  },
  "functions": {
    "create_test_data": {
      "file": "benchmarks.old/benchmark_topology_analysis.py",
      "start_line": 22,
      "end_line": 29
    },
    "naive_topology_analysis": {
      "file": "benchmarks.old/benchmark_topology_analysis.py",
      "start_line": 30,
      "end_line": 57
    },
    "run_benchmark": {
      "file": "benchmarks.old/scripts/training_benchmark.py",
      "start_line": 27,
      "end_line": 113
    },
    "plot_results": {
      "file": "benchmarks.old/benchmark_topology_analysis.py",
      "start_line": 96,
      "end_line": 153
    },
    "main": {
      "file": "isekaizen/tools/pattern_mapper.py",
      "start_line": 1520,
      "end_line": 1738
    },
    "run_comparative_test": {
      "file": "tests/test_augmentation.py",
      "start_line": 30,
      "end_line": 166
    },
    "get_optimizer_config": {
      "file": "isekaizen/optimizers/configs/optimizer_configs.py",
      "start_line": 324,
      "end_line": 349
    },
    "list_available_optimizers": {
      "file": "isekaizen/optimizers/configs/optimizer_configs.py",
      "start_line": 349,
      "end_line": 360
    },
    "explain_optimizer_config": {
      "file": "isekaizen/optimizers/configs/optimizer_configs.py",
      "start_line": 361,
      "end_line": 395
    },
    "configure_optimizer": {
      "file": "isekaizen/optimizers/utils.py",
      "start_line": 17,
      "end_line": 81
    },
    "get_optimizer_description": {
      "file": "isekaizen/optimizers/utils.py",
      "start_line": 81,
      "end_line": 112
    },
    "print_available_optimizers": {
      "file": "isekaizen/optimizers/utils.py",
      "start_line": 112,
      "end_line": 132
    },
    "add_optimizer_arguments": {
      "file": "isekaizen/optimizers/utils.py",
      "start_line": 132,
      "end_line": 148
    },
    "load_cifar10": {
      "file": "benchmarks.old/examples/run_eve_optimizer.py",
      "start_line": 38,
      "end_line": 62
    },
    "create_model": {
      "file": "isekaizen/models/architectures/model_creation.py",
      "start_line": 20,
      "end_line": 238
    },
    "train_epoch": {
      "file": "benchmarks.old/examples/run_eve_optimizer.py",
      "start_line": 70,
      "end_line": 120
    },
    "validate": {
      "file": "benchmarks.old/examples/run_eve_optimizer.py",
      "start_line": 120,
      "end_line": 146
    },
    "numpy_safe_json_dump": {
      "file": "benchmarks.old/examples/run_streamlined_pattern_mapping.py",
      "start_line": 104,
      "end_line": 131
    },
    "calculate_pattern_complexity": {
      "file": "benchmarks.old/examples/run_streamlined_pattern_mapping.py",
      "start_line": 170,
      "end_line": 229
    },
    "load_dataset": {
      "file": "benchmarks.old/examples/run_pattern_mapper.py",
      "start_line": 275,
      "end_line": 347
    },
    "extract_visual_patterns": {
      "file": "isekaizen/semantic/pattern_detection.py",
      "start_line": 204,
      "end_line": 319
    },
    "create_pattern_map": {
      "file": "benchmarks.old/examples/run_streamlined_pattern_mapping.py",
      "start_line": 353,
      "end_line": 466
    },
    "calculate_pattern_complexities": {
      "file": "benchmarks.old/examples/run_streamlined_pattern_mapping.py",
      "start_line": 466,
      "end_line": 531
    },
    "order_patterns_by_complexity": {
      "file": "benchmarks.old/examples/run_streamlined_pattern_mapping.py",
      "start_line": 531,
      "end_line": 553
    },
    "create_streamlined_pattern_map": {
      "file": "benchmarks.old/examples/run_streamlined_pattern_mapping.py",
      "start_line": 688,
      "end_line": 749
    },
    "visualize_pattern_map": {
      "file": "benchmarks.old/examples/run_streamlined_pattern_mapping.py",
      "start_line": 554,
      "end_line": 680
    },
    "save_pattern_map": {
      "file": "isekaizen/pattern/data_loading.py",
      "start_line": 107,
      "end_line": 153
    },
    "load_cifar10_data": {
      "file": "isekaizen/data/loaders/cifar10_loader.py",
      "start_line": 13,
      "end_line": 52
    },
    "extract_visual_patterns_from_cifar": {
      "file": "benchmarks.old/examples/run_streamlined_pattern_mapping.py",
      "start_line": 229,
      "end_line": 351
    },
    "print_progress_bar": {
      "file": "benchmarks.old/examples/run_streamlined_responsive.py",
      "start_line": 456,
      "end_line": 497
    },
    "save_batch_diagnostics": {
      "file": "benchmarks.old/examples/refactored/run_refactored_optimizer.py",
      "start_line": 147,
      "end_line": 206
    },
    "visualize_training_results": {
      "file": "isekaizen/visualization/training_plots/training_visualization.py",
      "start_line": 17,
      "end_line": 325
    },
    "modify_pattern_risk_accuracy_tracker": {
      "file": "isekaizen/core/training/risk_accuracy_tracker/risk_accuracy_tracker_modifier.py",
      "start_line": 16,
      "end_line": 84
    },
    "track_dynamic_weight_decays": {
      "file": "benchmarks.old/examples/run_streamlined_responsive.py",
      "start_line": 882,
      "end_line": 905
    },
    "evaluate_model_detailed": {
      "file": "benchmarks.old/examples/run_streamlined_responsive.py",
      "start_line": 905,
      "end_line": 984
    },
    "save_training_results_to_json": {
      "file": "benchmarks.old/examples/run_streamlined_responsive.py",
      "start_line": 984,
      "end_line": 1092
    },
    "run_inference_benchmark": {
      "file": "benchmarks.old/scripts/repeated_inference_benchmark.py",
      "start_line": 80,
      "end_line": 248
    },
    "run_single_benchmark": {
      "file": "benchmarks.old/scripts/repeated_inference_benchmark.py",
      "start_line": 23,
      "end_line": 79
    },
    "run_training_benchmark": {
      "file": "benchmarks.old/scripts/multi-run_training_benchmark.py",
      "start_line": 95,
      "end_line": 164
    },
    "example_usage": {
      "file": "benchmarks.old/examples/modified/training_monitor.py",
      "start_line": 380,
      "end_line": 429
    },
    "register_unified_ratio_optimizer": {
      "file": "utils/analysis/fibonacci-lr-implementation.py",
      "start_line": 34,
      "end_line": 92
    },
    "patch_eve_unified_ratio": {
      "file": "benchmarks.old/examples/modified/run_streamlined_unified_ratio_eve_with_model_swapping.py",
      "start_line": 2229,
      "end_line": 2316
    },
    "lazy_augmentation_worker_init_fn": {
      "file": "benchmarks.old/examples/modified/lazy_augmentation.py",
      "start_line": 678,
      "end_line": 712
    },
    "create_optimized_dataloader": {
      "file": "benchmarks.old/examples/modified/lazy_augmentation.py",
      "start_line": 713,
      "end_line": 834
    },
    "create_lazy_augmented_dataset": {
      "file": "benchmarks.old/examples/modified/lazy_augmentation.py",
      "start_line": 835,
      "end_line": 874
    },
    "log_mediator_status": {
      "file": "isekaizen/mediators/base.py",
      "start_line": 80,
      "end_line": 92
    },
    "estimate_memory_usage": {
      "file": "isekaizen/mediators/base.py",
      "start_line": 93,
      "end_line": 134
    },
    "create_pattern_mediator": {
      "file": "isekaizen/mediators/factory.py",
      "start_line": 16,
      "end_line": 41
    },
    "create_augmentation_mediator": {
      "file": "isekaizen/mediators/factory.py",
      "start_line": 41,
      "end_line": 75
    },
    "create_ratio_tracker": {
      "file": "isekaizen/mediators/factory.py",
      "start_line": 75,
      "end_line": 99
    },
    "create_equilibrium_tracker": {
      "file": "isekaizen/mediators/factory.py",
      "start_line": 99,
      "end_line": 137
    },
    "get_all_mediator_types": {
      "file": "isekaizen/mediators/factory.py",
      "start_line": 137,
      "end_line": 150
    },
    "create_mediator": {
      "file": "isekaizen/mediators/factory.py",
      "start_line": 151,
      "end_line": 226
    },
    "parse_args": {
      "file": "benchmarks.old/models/src/utils/training/overnight_training.py",
      "start_line": 24,
      "end_line": 47
    },
    "calculate_optimal_workers": {
      "file": "isekaizen/utils/training_utils/worker_calculation.py",
      "start_line": 18,
      "end_line": 76
    },
    "track_unified_ratio_callback": {
      "file": "isekaizen/core/training/unified_ratio_trainer/callbacks.py",
      "start_line": 14,
      "end_line": 83
    },
    "format_metrics_table": {
      "file": "isekaizen/utils/formatting/metrics_formatting.py",
      "start_line": 16,
      "end_line": 64
    },
    "log_section": {
      "file": "isekaizen/utils/formatting/metrics_formatting.py",
      "start_line": 64,
      "end_line": 83
    },
    "get_fibonacci_check_intervals": {
      "file": "utils/analysis/fibonacci-lr-implementation.py",
      "start_line": 3,
      "end_line": 34
    },
    "get_model": {
      "file": "benchmarks.old/examples/modified/run_terminal_ui.py",
      "start_line": 58,
      "end_line": 83
    },
    "get_dataset": {
      "file": "benchmarks.old/examples/modified/run_terminal_ui.py",
      "start_line": 84,
      "end_line": 151
    },
    "train_model": {
      "file": "benchmarks.old/examples/modified/run_terminal_ui.py",
      "start_line": 152,
      "end_line": 350
    },
    "check_imports": {
      "file": "benchmarks.old/examples/modified/run_ui_test.py",
      "start_line": 20,
      "end_line": 62
    },
    "check_isekaizen_optimizers": {
      "file": "benchmarks.old/examples/modified/run_ui_test.py",
      "start_line": 62,
      "end_line": 98
    },
    "test_terminal_ui_basic": {
      "file": "benchmarks.old/examples/modified/run_ui_test.py",
      "start_line": 98,
      "end_line": 121
    },
    "test_urwid_ui": {
      "file": "benchmarks.old/examples/modified/run_ui_test.py",
      "start_line": 121,
      "end_line": 145
    },
    "test_run_terminal_ui": {
      "file": "benchmarks.old/examples/modified/run_ui_test.py",
      "start_line": 145,
      "end_line": 184
    },
    "track_learning_rate_callback": {
      "file": "benchmarks.old/examples/modified/simplified_ratio_trainer.py",
      "start_line": 566,
      "end_line": 580
    },
    "debug_pattern_tracker_initialization": {
      "file": "benchmarks.old/examples/modified/baseline_tests/debug_pattern_tracker.py",
      "start_line": 32,
      "end_line": 186
    },
    "patch_pattern_risk_accuracy_tracker": {
      "file": "benchmarks.old/examples/modified/baseline_tests/fix_pattern_tracking.py",
      "start_line": 23,
      "end_line": 106
    },
    "patch_eve_natural_weights": {
      "file": "benchmarks.old/examples/modified/baseline_tests/fix_pattern_tracking.py",
      "start_line": 106,
      "end_line": 188
    },
    "patch_pattern_translation": {
      "file": "benchmarks.old/examples/modified/baseline_tests/fix_pattern_tracking.py",
      "start_line": 188,
      "end_line": 245
    },
    "apply_all_patches": {
      "file": "benchmarks.old/examples/modified/baseline_tests/fix_pattern_tracking.py",
      "start_line": 245,
      "end_line": 255
    },
    "patch_eve_for_metrics": {
      "file": "benchmarks.old/examples/modified/baseline_tests/run_eve_baseline_metrics_fixed.py",
      "start_line": 208,
      "end_line": 249
    },
    "run_knowledge_probe": {
      "file": "benchmarks.old/models/src/assessment/knowledge_probe.py",
      "start_line": 17,
      "end_line": 84
    },
    "test_integrated_diagnostics": {
      "file": "isekaizen/core/cortex/diagnostics.py",
      "start_line": 219,
      "end_line": 248
    },
    "test_integrated_system": {
      "file": "isekaizen/core/cortex/integrated_kt_rpg.py",
      "start_line": 180,
      "end_line": 237
    },
    "test_harness": {
      "file": "benchmarks.old/models/src/utils/integration_test.py",
      "start_line": 117,
      "end_line": 158
    },
    "setup_assessment_environment": {
      "file": "benchmarks.old/models/src/utils/json_serializer.py",
      "start_line": 23,
      "end_line": 39
    },
    "serialize_results": {
      "file": "benchmarks.old/models/src/utils/json_serializer.py",
      "start_line": 39,
      "end_line": 43
    },
    "test_kt_optimizer": {
      "file": "benchmarks.old/models/src/utils/kt_batch_optimizer_v3.py",
      "start_line": 294,
      "end_line": 337
    },
    "run_vision_diagnostics": {
      "file": "benchmarks.old/models/src/utils/vision_diagnostic.py",
      "start_line": 150,
      "end_line": 169
    },
    "run_educational_assessment": {
      "file": "benchmarks.old/models/src/assessment/examples/assessment_demo.py",
      "start_line": 1,
      "end_line": 112
    },
    "run_validation_test": {
      "file": "benchmarks.old/models/src/utils/training/pattern_learning_validator.py",
      "start_line": 331,
      "end_line": 346
    },
    "verify_system_requirements": {
      "file": "benchmarks.old/models/src/utils/training/validate_training.py",
      "start_line": 63,
      "end_line": 96
    },
    "list_available_prepared_datasets": {
      "file": "isekaizen/cli/train_dataset.py",
      "start_line": 52,
      "end_line": 111
    },
    "print_available_datasets": {
      "file": "isekaizen/cli/train_dataset.py",
      "start_line": 112,
      "end_line": 144
    },
    "train_with_prepared_dataset": {
      "file": "isekaizen/cli/train_dataset.py",
      "start_line": 145,
      "end_line": 1041
    },
    "get_train_cli": {
      "file": "isekaizen/cli/__init__.py",
      "start_line": 11,
      "end_line": 15
    },
    "get_train_augmented_cli": {
      "file": "isekaizen/cli/__init__.py",
      "start_line": 16,
      "end_line": 20
    },
    "get_project_root": {
      "file": "isekaizen/configs/paths.py",
      "start_line": 14,
      "end_line": 36
    },
    "ensure_directories_exist": {
      "file": "isekaizen/configs/paths.py",
      "start_line": 62,
      "end_line": 76
    },
    "get_directory": {
      "file": "isekaizen/configs/paths.py",
      "start_line": 77,
      "end_line": 98
    },
    "load_config": {
      "file": "isekaizen/core/config_loader.py",
      "start_line": 21,
      "end_line": 65
    },
    "save_config": {
      "file": "isekaizen/core/config_loader.py",
      "start_line": 65,
      "end_line": 124
    },
    "create_default_config_file": {
      "file": "isekaizen/core/config_loader.py",
      "start_line": 124,
      "end_line": 141
    },
    "convert_dict_to_config": {
      "file": "isekaizen/core/config_loader.py",
      "start_line": 141,
      "end_line": 156
    },
    "create_transform_pipeline": {
      "file": "isekaizen/data/augmentation.py",
      "start_line": 316,
      "end_line": 421
    },
    "apply_augmentation_to_dataset": {
      "file": "isekaizen/data/augmentation.py",
      "start_line": 422,
      "end_line": 487
    },
    "_get_specialized_mediator_factory": {
      "file": "isekaizen/mediators/factory.py",
      "start_line": 226,
      "end_line": 260
    },
    "_get_available_specialized_mediators": {
      "file": "isekaizen/mediators/factory.py",
      "start_line": 260,
      "end_line": 291
    },
    "create_pattern_test_datasets": {
      "file": "isekaizen/pattern/bias_testing.py",
      "start_line": 23,
      "end_line": 77
    },
    "test_model_pattern_bias": {
      "file": "isekaizen/pattern/bias_testing.py",
      "start_line": 77,
      "end_line": 139
    },
    "normalize_bias_scores": {
      "file": "isekaizen/pattern/bias_testing.py",
      "start_line": 139,
      "end_line": 164
    },
    "test_pattern_bias": {
      "file": "isekaizen/pattern/bias_testing.py",
      "start_line": 164,
      "end_line": 219
    },
    "load_latest_pattern_map": {
      "file": "isekaizen/pattern/data_loading.py",
      "start_line": 18,
      "end_line": 107
    },
    "generate_pattern_map_for_image_dataset": {
      "file": "isekaizen/pattern/detection.py",
      "start_line": 373,
      "end_line": 529
    },
    "generate_pattern_map_for_non_image_dataset": {
      "file": "isekaizen/pattern/detection.py",
      "start_line": 530,
      "end_line": 734
    },
    "_load_image_dataset": {
      "file": "isekaizen/pattern/detection.py",
      "start_line": 735,
      "end_line": 796
    },
    "_load_non_image_dataset": {
      "file": "isekaizen/pattern/detection.py",
      "start_line": 797,
      "end_line": 878
    },
    "apply_pattern_augmentation": {
      "file": "isekaizen/pattern/pre_augmentation.py",
      "start_line": 100,
      "end_line": 168
    },
    "calculate_three_pattern_weighting": {
      "file": "isekaizen/pattern/pre_augmentation.py",
      "start_line": 169,
      "end_line": 222
    },
    "calculate_adaptive_comfort_factor": {
      "file": "isekaizen/pattern/pre_augmentation.py",
      "start_line": 223,
      "end_line": 261
    },
    "create_pattern_biased_augmentations": {
      "file": "isekaizen/pattern/pre_augmentation.py",
      "start_line": 262,
      "end_line": 557
    },
    "save_augmentation_data": {
      "file": "isekaizen/pattern/pre_augmentation.py",
      "start_line": 557,
      "end_line": 635
    },
    "augment_dataset_directly": {
      "file": "isekaizen/semantic/augment.py",
      "start_line": 16,
      "end_line": 46
    },
    "load_and_augment_dataset": {
      "file": "isekaizen/semantic/augment.py",
      "start_line": 47,
      "end_line": 100
    },
    "load_with_class_fixup": {
      "file": "isekaizen/semantic/compatibility.py",
      "start_line": 137,
      "end_line": 180
    },
    "load_latest_augmented_dataset": {
      "file": "isekaizen/semantic/data_loading.py",
      "start_line": 12,
      "end_line": 75
    },
    "load_augmented_dataset": {
      "file": "isekaizen/semantic/data_loading.py",
      "start_line": 75,
      "end_line": 111
    },
    "calculate_euclidean_distance": {
      "file": "isekaizen/semantic/matrix_ops.py",
      "start_line": 12,
      "end_line": 47
    },
    "find_k_nearest_neighbors": {
      "file": "isekaizen/semantic/matrix_ops.py",
      "start_line": 47,
      "end_line": 89
    },
    "calculate_pairwise_distances": {
      "file": "isekaizen/semantic/matrix_ops.py",
      "start_line": 89,
      "end_line": 112
    },
    "find_neighbors_from_distance_matrix": {
      "file": "isekaizen/semantic/matrix_ops.py",
      "start_line": 112,
      "end_line": 131
    },
    "batch_find_neighbors": {
      "file": "isekaizen/semantic/matrix_ops.py",
      "start_line": 131,
      "end_line": 152
    },
    "softmax": {
      "file": "isekaizen/semantic/matrix_ops.py",
      "start_line": 152,
      "end_line": 172
    },
    "argmax": {
      "file": "isekaizen/semantic/matrix_ops.py",
      "start_line": 172,
      "end_line": 192
    },
    "bincount": {
      "file": "isekaizen/semantic/matrix_ops.py",
      "start_line": 192,
      "end_line": 219
    },
    "mean": {
      "file": "isekaizen/semantic/matrix_ops.py",
      "start_line": 219,
      "end_line": 231
    },
    "std_dev": {
      "file": "isekaizen/semantic/matrix_ops.py",
      "start_line": 231,
      "end_line": 251
    },
    "determine_dataset_type": {
      "file": "isekaizen/semantic/parallel_processing.py",
      "start_line": 35,
      "end_line": 76
    },
    "get_extractor_for_dataset": {
      "file": "isekaizen/semantic/parallel_processing.py",
      "start_line": 77,
      "end_line": 109
    },
    "extract_generic_patterns": {
      "file": "isekaizen/semantic/parallel_processing.py",
      "start_line": 110,
      "end_line": 192
    },
    "process_sample_worker": {
      "file": "isekaizen/semantic/parallel_processing.py",
      "start_line": 194,
      "end_line": 226
    },
    "extract_patterns_parallel": {
      "file": "isekaizen/semantic/parallel_processing.py",
      "start_line": 227,
      "end_line": 310
    },
    "calculate_entropy": {
      "file": "isekaizen/semantic/pattern_detection.py",
      "start_line": 38,
      "end_line": 60
    },
    "calculate_centrality": {
      "file": "isekaizen/semantic/pattern_detection.py",
      "start_line": 61,
      "end_line": 100
    },
    "determine_pattern_type": {
      "file": "isekaizen/semantic/pattern_detection.py",
      "start_line": 101,
      "end_line": 149
    },
    "calculate_sample_complexity": {
      "file": "isekaizen/semantic/pattern_detection.py",
      "start_line": 150,
      "end_line": 203
    },
    "create_simple_model_for_dataset": {
      "file": "isekaizen/semantic/validation_metrics.py",
      "start_line": 22,
      "end_line": 128
    },
    "train_and_evaluate": {
      "file": "isekaizen/semantic/validation_metrics.py",
      "start_line": 129,
      "end_line": 238
    },
    "create_pattern_aware_sampler": {
      "file": "isekaizen/semantic/validation_metrics.py",
      "start_line": 240,
      "end_line": 291
    },
    "validate_pattern_mapping": {
      "file": "isekaizen/semantic/validation_metrics.py",
      "start_line": 292,
      "end_line": 389
    },
    "detect_dataset_type": {
      "file": "isekaizen/tools/pattern_mapper.py",
      "start_line": 814,
      "end_line": 861
    },
    "_is_image_directory": {
      "file": "isekaizen/tools/pattern_mapper.py",
      "start_line": 862,
      "end_line": 909
    },
    "_is_non_image_directory": {
      "file": "isekaizen/tools/pattern_mapper.py",
      "start_line": 910,
      "end_line": 946
    },
    "check_existing_pattern_map": {
      "file": "isekaizen/tools/pattern_mapper.py",
      "start_line": 947,
      "end_line": 983
    },
    "load_pattern_map": {
      "file": "isekaizen/tools/pattern_mapper.py",
      "start_line": 984,
      "end_line": 1005
    },
    "map_image_dataset": {
      "file": "isekaizen/tools/pattern_mapper.py",
      "start_line": 1006,
      "end_line": 1088
    },
    "map_non_image_dataset": {
      "file": "isekaizen/tools/pattern_mapper.py",
      "start_line": 1089,
      "end_line": 1165
    },
    "prepare_dataset_for_training": {
      "file": "isekaizen/tools/pattern_mapper.py",
      "start_line": 1166,
      "end_line": 1325
    },
    "map_dataset": {
      "file": "isekaizen/tools/pattern_mapper.py",
      "start_line": 1326,
      "end_line": 1407
    },
    "get_model_type_for_dataset": {
      "file": "isekaizen/tools/pattern_mapper.py",
      "start_line": 1408,
      "end_line": 1434
    },
    "get_dataset_path": {
      "file": "isekaizen/tools/pattern_mapper.py",
      "start_line": 1435,
      "end_line": 1483
    },
    "validate_pattern_map": {
      "file": "isekaizen/tools/pattern_mapper.py",
      "start_line": 1484,
      "end_line": 1519
    },
    "run_with_multiprocessing_support": {
      "file": "isekaizen/tools/pattern_mapper.py",
      "start_line": 1739,
      "end_line": 1747
    },
    "add_batch_args": {
      "file": "isekaizen/utils/arg_parsing.py",
      "start_line": 11,
      "end_line": 38
    },
    "add_standard_training_args": {
      "file": "isekaizen/utils/arg_parsing.py",
      "start_line": 38,
      "end_line": 64
    },
    "add_isek_optimizer_args": {
      "file": "isekaizen/utils/arg_parsing.py",
      "start_line": 64,
      "end_line": 89
    },
    "add_pattern_aware_args": {
      "file": "isekaizen/utils/arg_parsing.py",
      "start_line": 89,
      "end_line": 112
    },
    "add_risk_aware_args": {
      "file": "isekaizen/utils/arg_parsing.py",
      "start_line": 112,
      "end_line": 139
    },
    "infer_input_shape": {
      "file": "isekaizen/utils/input_shapes.py",
      "start_line": 12,
      "end_line": 99
    },
    "get_sample_input": {
      "file": "isekaizen/utils/input_shapes.py",
      "start_line": 99,
      "end_line": 125
    },
    "create_batch": {
      "file": "isekaizen/utils/input_shapes.py",
      "start_line": 125,
      "end_line": 155
    },
    "ensure_dir_exists": {
      "file": "isekaizen/utils/paths.py",
      "start_line": 24,
      "end_line": 37
    },
    "get_pattern_maps_dir": {
      "file": "isekaizen/utils/paths.py",
      "start_line": 38,
      "end_line": 42
    },
    "get_model_checkpoint_dir": {
      "file": "isekaizen/utils/paths.py",
      "start_line": 43,
      "end_line": 47
    },
    "get_output_dir": {
      "file": "isekaizen/utils/paths.py",
      "start_line": 48,
      "end_line": 52
    },
    "get_visualization_dir": {
      "file": "isekaizen/utils/paths.py",
      "start_line": 53,
      "end_line": 57
    },
    "get_pattern_map_path": {
      "file": "isekaizen/utils/paths.py",
      "start_line": 58,
      "end_line": 89
    },
    "get_checkpoint_path": {
      "file": "isekaizen/utils/paths.py",
      "start_line": 90,
      "end_line": 121
    },
    "generate_timestamp": {
      "file": "isekaizen/utils/paths.py",
      "start_line": 122,
      "end_line": 131
    },
    "get_output_file_path": {
      "file": "isekaizen/utils/paths.py",
      "start_line": 132,
      "end_line": 150
    },
    "find_files": {
      "file": "isekaizen/utils/paths.py",
      "start_line": 151,
      "end_line": 167
    },
    "translate_pattern_map_to_standard_format": {
      "file": "isekaizen/utils/pattern_map_utils.py",
      "start_line": 17,
      "end_line": 86
    },
    "detect_pattern_map_format": {
      "file": "isekaizen/utils/pattern_map_utils.py",
      "start_line": 86,
      "end_line": 104
    },
    "process_streamlined_format": {
      "file": "isekaizen/utils/pattern_map_utils.py",
      "start_line": 104,
      "end_line": 153
    },
    "process_original_format": {
      "file": "isekaizen/utils/pattern_map_utils.py",
      "start_line": 153,
      "end_line": 197
    },
    "process_nested_format": {
      "file": "isekaizen/utils/pattern_map_utils.py",
      "start_line": 197,
      "end_line": 246
    },
    "process_unknown_format": {
      "file": "isekaizen/utils/pattern_map_utils.py",
      "start_line": 247,
      "end_line": 288
    },
    "create_pattern_assignments_from_distribution": {
      "file": "isekaizen/utils/pattern_map_utils.py",
      "start_line": 289,
      "end_line": 378
    },
    "extract_pattern_features": {
      "file": "isekaizen/utils/pattern_map_utils.py",
      "start_line": 378,
      "end_line": 409
    },
    "calculate_complexities_from_assignments": {
      "file": "isekaizen/utils/pattern_map_utils.py",
      "start_line": 409,
      "end_line": 447
    },
    "calculate_initial_risks": {
      "file": "isekaizen/utils/pattern_map_utils.py",
      "start_line": 447,
      "end_line": 484
    },
    "calculate_derived_metrics": {
      "file": "isekaizen/utils/pattern_map_utils.py",
      "start_line": 484,
      "end_line": 518
    },
    "validate_standardized_map": {
      "file": "isekaizen/utils/pattern_map_utils.py",
      "start_line": 518,
      "end_line": 552
    },
    "log_translation_statistics": {
      "file": "isekaizen/utils/pattern_map_utils.py",
      "start_line": 552,
      "end_line": 587
    },
    "create_fallback_pattern_map": {
      "file": "isekaizen/utils/pattern_map_utils.py",
      "start_line": 587,
      "end_line": 621
    },
    "calculate_optimal_batch_size": {
      "file": "isekaizen/core/mathematical_foundation/batch_optimization.py",
      "start_line": 14,
      "end_line": 62
    },
    "calculate_batch_priority": {
      "file": "isekaizen/core/mathematical_foundation/batch_optimization.py",
      "start_line": 62,
      "end_line": 94
    },
    "get_type_priority": {
      "file": "isekaizen/core/mathematical_foundation/batch_optimization.py",
      "start_line": 94,
      "end_line": 122
    },
    "calculate_resource_impact": {
      "file": "isekaizen/core/mathematical_foundation/batch_optimization.py",
      "start_line": 122,
      "end_line": 162
    },
    "calculate_urgency": {
      "file": "isekaizen/core/mathematical_foundation/batch_optimization.py",
      "start_line": 162,
      "end_line": 188
    },
    "calculate_cognitive_efficiency": {
      "file": "isekaizen/core/mathematical_foundation/cognitive_efficiency.py",
      "start_line": 20,
      "end_line": 70
    },
    "cognitive_load_function": {
      "file": "isekaizen/core/mathematical_foundation/cognitive_efficiency.py",
      "start_line": 70,
      "end_line": 94
    },
    "parallel_processing_penalty": {
      "file": "isekaizen/core/mathematical_foundation/cognitive_efficiency.py",
      "start_line": 94,
      "end_line": 138
    },
    "calculate_polling_frequency": {
      "file": "isekaizen/core/mathematical_foundation/polling_optimization.py",
      "start_line": 17,
      "end_line": 82
    },
    "calculate_metric_volatility": {
      "file": "isekaizen/core/mathematical_foundation/polling_optimization.py",
      "start_line": 82,
      "end_line": 119
    },
    "calculate_adjustment_factor": {
      "file": "isekaizen/core/mathematical_foundation/polling_optimization.py",
      "start_line": 119,
      "end_line": 145
    },
    "calculate_tier_boundaries": {
      "file": "isekaizen/core/mathematical_foundation/polling_optimization.py",
      "start_line": 145,
      "end_line": 191
    },
    "optimize_resource_allocation": {
      "file": "isekaizen/core/mathematical_foundation/resource_allocation.py",
      "start_line": 15,
      "end_line": 98
    },
    "component_utility_function": {
      "file": "isekaizen/core/mathematical_foundation/resource_allocation.py",
      "start_line": 98,
      "end_line": 128
    },
    "_create_resnet_model": {
      "file": "isekaizen/core/models/architecture.py",
      "start_line": 59,
      "end_line": 78
    },
    "_create_vgg_model": {
      "file": "isekaizen/core/models/architecture.py",
      "start_line": 78,
      "end_line": 106
    },
    "_create_mobilenet_model": {
      "file": "isekaizen/core/models/architecture.py",
      "start_line": 106,
      "end_line": 136
    },
    "_create_efficientnet_model": {
      "file": "isekaizen/core/models/architecture.py",
      "start_line": 136,
      "end_line": 165
    },
    "recognize_patterns": {
      "file": "isekaizen/core/pattern/recognition.py",
      "start_line": 16,
      "end_line": 59
    },
    "get_pattern_distribution": {
      "file": "isekaizen/core/pattern/recognition.py",
      "start_line": 59,
      "end_line": 95
    },
    "get_pattern_complexities": {
      "file": "isekaizen/core/pattern/recognition.py",
      "start_line": 95,
      "end_line": 123
    },
    "track_patterns": {
      "file": "isekaizen/core/pattern/tracking.py",
      "start_line": 17,
      "end_line": 46
    },
    "create_augmentation_mediator_vision": {
      "file": "isekaizen/mediators/augmentation/specialized/vision_mediator.py",
      "start_line": 239,
      "end_line": 265
    },
    "save_model_fingerprint": {
      "file": "isekaizen/research/model_swapping/model_fingerprinting.py",
      "start_line": 23,
      "end_line": 90
    },
    "load_model_fingerprint": {
      "file": "isekaizen/research/model_swapping/model_fingerprinting.py",
      "start_line": 90,
      "end_line": 115
    },
    "apply_fingerprint_to_model": {
      "file": "isekaizen/research/model_swapping/model_fingerprinting.py",
      "start_line": 115,
      "end_line": 179
    },
    "run_all_tests": {
      "file": "testing/math_validation/run_all_tests.py",
      "start_line": 18,
      "end_line": 52
    },
    "test_risk_aware_optimizer": {
      "file": "tests/optimization/risk_aware_test.py",
      "start_line": 36,
      "end_line": 235
    },
    "analyze_fibonacci_learning": {
      "file": "utils/analysis/fibonacci-lr-implementation.py",
      "start_line": 127,
      "end_line": 157
    }
  },
  "methods": {
    "SimpleModel.__init__": {
      "file": "tests/optimization/risk_aware_test.py",
      "class": "SimpleModel",
      "start_line": 41,
      "end_line": 47
    },
    "SimpleModel.forward": {
      "file": "tests/optimization/risk_aware_test.py",
      "class": "SimpleModel",
      "start_line": 47,
      "end_line": 52
    },
    "DummyDataset.__init__": {
      "file": "isekaizen/pattern/detection.py",
      "class": "DummyDataset",
      "start_line": 865,
      "end_line": 869
    },
    "DummyDataset.__len__": {
      "file": "isekaizen/pattern/detection.py",
      "class": "DummyDataset",
      "start_line": 869,
      "end_line": 872
    },
    "DummyDataset.__getitem__": {
      "file": "isekaizen/pattern/detection.py",
      "class": "DummyDataset",
      "start_line": 872,
      "end_line": 876
    },
    "MockPatternMap.__init__": {
      "file": "tests/test_pre_augment_optimizer.py",
      "class": "MockPatternMap",
      "start_line": 58,
      "end_line": 72
    },
    "MockPatternMap.__getitem__": {
      "file": "tests/test_pre_augment_optimizer.py",
      "class": "MockPatternMap",
      "start_line": 75,
      "end_line": 78
    },
    "MockPatternMap.get": {
      "file": "tests/test_pre_augment_optimizer.py",
      "class": "MockPatternMap",
      "start_line": 78,
      "end_line": 81
    },
    "TestPreAugmentOptimizer.setUp": {
      "file": "tests/test_pre_augment_optimizer.py",
      "class": "TestPreAugmentOptimizer",
      "start_line": 84,
      "end_line": 103
    },
    "TestPreAugmentOptimizer.test_initialization": {
      "file": "tests/test_pre_augment_optimizer.py",
      "class": "TestPreAugmentOptimizer",
      "start_line": 104,
      "end_line": 119
    },
    "TestPreAugmentOptimizer.test_get_optimal_batch_size_first_epoch": {
      "file": "tests/test_pre_augment_optimizer.py",
      "class": "TestPreAugmentOptimizer",
      "start_line": 119,
      "end_line": 133
    },
    "TestPreAugmentOptimizer.test_get_optimal_batch_size_subsequent_epochs": {
      "file": "tests/test_pre_augment_optimizer.py",
      "class": "TestPreAugmentOptimizer",
      "start_line": 133,
      "end_line": 148
    },
    "TestPreAugmentOptimizer.test_adjustment_methods_disabled": {
      "file": "tests/test_pre_augment_optimizer.py",
      "class": "TestPreAugmentOptimizer",
      "start_line": 148,
      "end_line": 169
    },
    "TestPreAugmentOptimizer.test_compare_with_risk_aware_optimizer": {
      "file": "tests/test_pre_augment_optimizer.py",
      "class": "TestPreAugmentOptimizer",
      "start_line": 169,
      "end_line": 197
    },
    "TestPreAugmentOptimizer.test_pattern_tracking_preserved": {
      "file": "tests/test_pre_augment_optimizer.py",
      "class": "TestPreAugmentOptimizer",
      "start_line": 197,
      "end_line": 215
    },
    "TestPreAugmentOptimizer.test_with_overfitting_underfitting_scenarios": {
      "file": "tests/test_pre_augment_optimizer.py",
      "class": "TestPreAugmentOptimizer",
      "start_line": 215,
      "end_line": 252
    },
    "NumpySafeEncoder.default": {
      "file": "benchmarks.old/examples/run_streamlined_pattern_mapping.py",
      "class": "NumpySafeEncoder",
      "start_line": 114,
      "end_line": 129
    },
    "SemanticPatternRegistry.__init__": {
      "file": "isekaizen/core/cortex/semantic_core.py",
      "class": "SemanticPatternRegistry",
      "start_line": 32,
      "end_line": 57
    },
    "SemanticPatternRegistry.recognize_pattern": {
      "file": "isekaizen/core/cortex/semantic_core.py",
      "class": "SemanticPatternRegistry",
      "start_line": 57,
      "end_line": 126
    },
    "SemanticPatternRegistry.get_semantic_stats": {
      "file": "isekaizen/core/cortex/semantic_core.py",
      "class": "SemanticPatternRegistry",
      "start_line": 131,
      "end_line": 160
    },
    "DomainPatternExtractor.extract_visual_semantics": {
      "file": "isekaizen/core/cortex/semantic_core.py",
      "class": "DomainPatternExtractor",
      "start_line": 190,
      "end_line": 243
    },
    "StreamlinedPatternTrainer.__init__": {
      "file": "benchmarks.old/examples/run_streamlined_responsive.py",
      "class": "StreamlinedPatternTrainer",
      "start_line": 61,
      "end_line": 104
    },
    "StreamlinedPatternTrainer.train": {
      "file": "benchmarks.old/examples/run_streamlined_responsive.py",
      "class": "StreamlinedPatternTrainer",
      "start_line": 104,
      "end_line": 335
    },
    "StreamlinedPatternTrainer._train_epoch": {
      "file": "benchmarks.old/examples/run_streamlined_responsive.py",
      "class": "StreamlinedPatternTrainer",
      "start_line": 335,
      "end_line": 415
    },
    "StreamlinedPatternTrainer._validate": {
      "file": "benchmarks.old/examples/run_streamlined_responsive.py",
      "class": "StreamlinedPatternTrainer",
      "start_line": 415,
      "end_line": 456
    },
    "AugmentationMediator.__init__": {
      "file": "isekaizen/mediators/augmentation/template_mediator.py",
      "class": "AugmentationMediator",
      "start_line": 25,
      "end_line": 70
    },
    "AugmentationMediator.initialize": {
      "file": "isekaizen/mediators/augmentation/template_mediator.py",
      "class": "AugmentationMediator",
      "start_line": 70,
      "end_line": 89
    },
    "AugmentationMediator._extract_pattern_types": {
      "file": "isekaizen/mediators/augmentation/template_mediator.py",
      "class": "AugmentationMediator",
      "start_line": 89,
      "end_line": 105
    },
    "AugmentationMediator._generate_templates_for_pattern": {
      "file": "isekaizen/mediators/augmentation/template_mediator.py",
      "class": "AugmentationMediator",
      "start_line": 105,
      "end_line": 159
    },
    "AugmentationMediator._find_examples_for_pattern": {
      "file": "isekaizen/mediators/augmentation/template_mediator.py",
      "class": "AugmentationMediator",
      "start_line": 159,
      "end_line": 213
    },
    "AugmentationMediator._create_template_for_example": {
      "file": "isekaizen/mediators/augmentation/template_mediator.py",
      "class": "AugmentationMediator",
      "start_line": 213,
      "end_line": 263
    },
    "AugmentationMediator.get_augmentations": {
      "file": "isekaizen/mediators/augmentation/template_mediator.py",
      "class": "AugmentationMediator",
      "start_line": 263,
      "end_line": 367
    },
    "AugmentationMediator._find_percentage_combinations": {
      "file": "isekaizen/mediators/augmentation/template_mediator.py",
      "class": "AugmentationMediator",
      "start_line": 367,
      "end_line": 406
    },
    "AugmentationMediator._apply_template": {
      "file": "isekaizen/mediators/augmentation/template_mediator.py",
      "class": "AugmentationMediator",
      "start_line": 406,
      "end_line": 459
    },
    "AugmentationMediator._apply_structural_transforms": {
      "file": "isekaizen/mediators/augmentation/template_mediator.py",
      "class": "AugmentationMediator",
      "start_line": 459,
      "end_line": 492
    },
    "AugmentationMediator._apply_statistical_transforms": {
      "file": "isekaizen/mediators/augmentation/template_mediator.py",
      "class": "AugmentationMediator",
      "start_line": 492,
      "end_line": 510
    },
    "AugmentationMediator._apply_temporal_transforms": {
      "file": "isekaizen/mediators/augmentation/template_mediator.py",
      "class": "AugmentationMediator",
      "start_line": 510,
      "end_line": 531
    },
    "AugmentationMediator.clear_cache": {
      "file": "isekaizen/mediators/augmentation/template_mediator.py",
      "class": "AugmentationMediator",
      "start_line": 531,
      "end_line": 538
    },
    "AugmentationMediator.get_metrics": {
      "file": "isekaizen/mediators/augmentation/template_mediator.py",
      "class": "AugmentationMediator",
      "start_line": 538,
      "end_line": 563
    },
    "AugmentationMediator._estimate_memory_usage": {
      "file": "isekaizen/mediators/augmentation/template_mediator.py",
      "class": "AugmentationMediator",
      "start_line": 563,
      "end_line": 587
    },
    "HardwareDiagnostics.__init__": {
      "file": "benchmarks.old/examples/modified/hardware_diagnostics.py",
      "class": "HardwareDiagnostics",
      "start_line": 44,
      "end_line": 63
    },
    "HardwareDiagnostics.run_full_diagnostics": {
      "file": "benchmarks.old/examples/modified/hardware_diagnostics.py",
      "class": "HardwareDiagnostics",
      "start_line": 63,
      "end_line": 81
    },
    "HardwareDiagnostics._check_platform": {
      "file": "benchmarks.old/examples/modified/hardware_diagnostics.py",
      "class": "HardwareDiagnostics",
      "start_line": 81,
      "end_line": 93
    },
    "HardwareDiagnostics._check_cpu": {
      "file": "benchmarks.old/examples/modified/hardware_diagnostics.py",
      "class": "HardwareDiagnostics",
      "start_line": 94,
      "end_line": 127
    },
    "HardwareDiagnostics._check_memory": {
      "file": "benchmarks.old/examples/modified/hardware_diagnostics.py",
      "class": "HardwareDiagnostics",
      "start_line": 127,
      "end_line": 144
    },
    "HardwareDiagnostics._check_gpu": {
      "file": "benchmarks.old/examples/modified/hardware_diagnostics.py",
      "class": "HardwareDiagnostics",
      "start_line": 145,
      "end_line": 185
    },
    "HardwareDiagnostics._check_storage": {
      "file": "benchmarks.old/examples/modified/hardware_diagnostics.py",
      "class": "HardwareDiagnostics",
      "start_line": 185,
      "end_line": 226
    },
    "HardwareDiagnostics._check_compatibility": {
      "file": "benchmarks.old/examples/modified/hardware_diagnostics.py",
      "class": "HardwareDiagnostics",
      "start_line": 226,
      "end_line": 275
    },
    "HardwareDiagnostics._run_quick_gpu_benchmark": {
      "file": "benchmarks.old/examples/modified/hardware_diagnostics.py",
      "class": "HardwareDiagnostics",
      "start_line": 275,
      "end_line": 454
    },
    "HardwareDiagnostics.get_summary": {
      "file": "benchmarks.old/examples/modified/hardware_diagnostics.py",
      "class": "HardwareDiagnostics",
      "start_line": 454,
      "end_line": 510
    },
    "HardwareDiagnostics.save_results": {
      "file": "benchmarks.old/examples/modified/hardware_diagnostics.py",
      "class": "HardwareDiagnostics",
      "start_line": 510,
      "end_line": 525
    },
    "HardwareDiagnostics.print_summary": {
      "file": "benchmarks.old/examples/modified/hardware_diagnostics.py",
      "class": "HardwareDiagnostics",
      "start_line": 525,
      "end_line": 578
    },
    "EnhancedUnifiedRatioTrainer.__init__": {
      "file": "benchmarks.old/examples/modified/integration-example.py",
      "class": "EnhancedUnifiedRatioTrainer",
      "start_line": 40,
      "end_line": 83
    },
    "EnhancedUnifiedRatioTrainer._initialize_augmentation_mediator": {
      "file": "benchmarks.old/examples/modified/integration-example.py",
      "class": "EnhancedUnifiedRatioTrainer",
      "start_line": 83,
      "end_line": 97
    },
    "EnhancedUnifiedRatioTrainer.train": {
      "file": "benchmarks.old/examples/modified/integration-example.py",
      "class": "EnhancedUnifiedRatioTrainer",
      "start_line": 97,
      "end_line": 167
    },
    "EnhancedUnifiedRatioTrainer._check_for_adaptation": {
      "file": "benchmarks.old/examples/modified/integration-example.py",
      "class": "EnhancedUnifiedRatioTrainer",
      "start_line": 167,
      "end_line": 264
    },
    "LazyPatternAugmentedDataset.__init__": {
      "file": "benchmarks.old/examples/modified/lazy_augmentation.py",
      "class": "LazyPatternAugmentedDataset",
      "start_line": 23,
      "end_line": 85
    },
    "LazyPatternAugmentedDataset._extract_pattern_types": {
      "file": "benchmarks.old/examples/modified/lazy_augmentation.py",
      "class": "LazyPatternAugmentedDataset",
      "start_line": 85,
      "end_line": 101
    },
    "LazyPatternAugmentedDataset._initialize_templates": {
      "file": "benchmarks.old/examples/modified/lazy_augmentation.py",
      "class": "LazyPatternAugmentedDataset",
      "start_line": 101,
      "end_line": 140
    },
    "LazyPatternAugmentedDataset._find_examples_for_pattern": {
      "file": "benchmarks.old/examples/modified/lazy_augmentation.py",
      "class": "LazyPatternAugmentedDataset",
      "start_line": 140,
      "end_line": 183
    },
    "LazyPatternAugmentedDataset._create_template": {
      "file": "benchmarks.old/examples/modified/lazy_augmentation.py",
      "class": "LazyPatternAugmentedDataset",
      "start_line": 183,
      "end_line": 233
    },
    "LazyPatternAugmentedDataset._apply_template": {
      "file": "benchmarks.old/examples/modified/lazy_augmentation.py",
      "class": "LazyPatternAugmentedDataset",
      "start_line": 233,
      "end_line": 281
    },
    "LazyPatternAugmentedDataset._apply_structural_transforms": {
      "file": "benchmarks.old/examples/modified/lazy_augmentation.py",
      "class": "LazyPatternAugmentedDataset",
      "start_line": 281,
      "end_line": 345
    },
    "LazyPatternAugmentedDataset._apply_statistical_transforms": {
      "file": "benchmarks.old/examples/modified/lazy_augmentation.py",
      "class": "LazyPatternAugmentedDataset",
      "start_line": 345,
      "end_line": 394
    },
    "LazyPatternAugmentedDataset._apply_temporal_transforms": {
      "file": "benchmarks.old/examples/modified/lazy_augmentation.py",
      "class": "LazyPatternAugmentedDataset",
      "start_line": 394,
      "end_line": 442
    },
    "LazyPatternAugmentedDataset._calculate_virtual_size": {
      "file": "benchmarks.old/examples/modified/lazy_augmentation.py",
      "class": "LazyPatternAugmentedDataset",
      "start_line": 442,
      "end_line": 476
    },
    "LazyPatternAugmentedDataset.add_augmentations": {
      "file": "benchmarks.old/examples/modified/lazy_augmentation.py",
      "class": "LazyPatternAugmentedDataset",
      "start_line": 476,
      "end_line": 555
    },
    "LazyPatternAugmentedDataset.__len__": {
      "file": "benchmarks.old/examples/modified/lazy_augmentation.py",
      "class": "LazyPatternAugmentedDataset",
      "start_line": 555,
      "end_line": 559
    },
    "LazyPatternAugmentedDataset.__getitem__": {
      "file": "benchmarks.old/examples/modified/lazy_augmentation.py",
      "class": "LazyPatternAugmentedDataset",
      "start_line": 559,
      "end_line": 636
    },
    "LazyPatternAugmentedDataset.get_augmentation_info": {
      "file": "benchmarks.old/examples/modified/lazy_augmentation.py",
      "class": "LazyPatternAugmentedDataset",
      "start_line": 636,
      "end_line": 662
    },
    "LazyPatternAugmentedDataset.get_augmentation_counts": {
      "file": "benchmarks.old/examples/modified/lazy_augmentation.py",
      "class": "LazyPatternAugmentedDataset",
      "start_line": 662,
      "end_line": 677
    },
    "Mediator.initialize": {
      "file": "isekaizen/mediators/base.py",
      "class": "Mediator",
      "start_line": 28,
      "end_line": 37
    },
    "Mediator.get_metrics": {
      "file": "isekaizen/mediators/base.py",
      "class": "Mediator",
      "start_line": 38,
      "end_line": 47
    },
    "Mediator.clear_cache": {
      "file": "isekaizen/mediators/base.py",
      "class": "Mediator",
      "start_line": 48,
      "end_line": 57
    },
    "Mediator.__str__": {
      "file": "isekaizen/mediators/base.py",
      "class": "Mediator",
      "start_line": 57,
      "end_line": 62
    },
    "NonImagePatternMapper.__init__": {
      "file": "benchmarks.old/examples/modified/regenerate_pattern_map_non_image.py",
      "class": "NonImagePatternMapper",
      "start_line": 36,
      "end_line": 57
    },
    "NonImagePatternMapper.load_dataset": {
      "file": "benchmarks.old/examples/modified/regenerate_pattern_map_non_image.py",
      "class": "NonImagePatternMapper",
      "start_line": 57,
      "end_line": 103
    },
    "NonImagePatternMapper.extract_features_text": {
      "file": "benchmarks.old/examples/modified/regenerate_pattern_map_non_image.py",
      "class": "NonImagePatternMapper",
      "start_line": 103,
      "end_line": 130
    },
    "NonImagePatternMapper.extract_features_tabular": {
      "file": "benchmarks.old/examples/modified/regenerate_pattern_map_non_image.py",
      "class": "NonImagePatternMapper",
      "start_line": 130,
      "end_line": 154
    },
    "NonImagePatternMapper.determine_pattern_type": {
      "file": "benchmarks.old/examples/modified/regenerate_pattern_map_non_image.py",
      "class": "NonImagePatternMapper",
      "start_line": 154,
      "end_line": 190
    },
    "NonImagePatternMapper.create_pattern_map": {
      "file": "benchmarks.old/examples/modified/regenerate_pattern_map_non_image.py",
      "class": "NonImagePatternMapper",
      "start_line": 190,
      "end_line": 301
    },
    "NonImagePatternMapper._calculate_pattern_complexity": {
      "file": "benchmarks.old/examples/modified/regenerate_pattern_map_non_image.py",
      "class": "NonImagePatternMapper",
      "start_line": 301,
      "end_line": 320
    },
    "NonImagePatternMapper._calculate_pattern_complexities": {
      "file": "benchmarks.old/examples/modified/regenerate_pattern_map_non_image.py",
      "class": "NonImagePatternMapper",
      "start_line": 320,
      "end_line": 348
    },
    "NonImagePatternMapper._order_patterns_by_complexity": {
      "file": "benchmarks.old/examples/modified/regenerate_pattern_map_non_image.py",
      "class": "NonImagePatternMapper",
      "start_line": 348,
      "end_line": 372
    },
    "NonImagePatternMapper.save_pattern_map": {
      "file": "benchmarks.old/examples/modified/regenerate_pattern_map_non_image.py",
      "class": "NonImagePatternMapper",
      "start_line": 373,
      "end_line": 393
    },
    "NonImagePatternMapper.run_mapping": {
      "file": "benchmarks.old/examples/modified/regenerate_pattern_map_non_image.py",
      "class": "NonImagePatternMapper",
      "start_line": 393,
      "end_line": 416
    },
    "PatternDataMediator.__init__": {
      "file": "isekaizen/mediators/pattern_data_mediator/pattern_data_mediator.py",
      "class": "PatternDataMediator",
      "start_line": 34,
      "end_line": 51
    },
    "PatternDataMediator.set_pattern_service": {
      "file": "isekaizen/mediators/pattern_data_mediator/pattern_data_mediator.py",
      "class": "PatternDataMediator",
      "start_line": 64,
      "end_line": 73
    },
    "PatternDataMediator.update_with_batch_recognition": {
      "file": "isekaizen/mediators/pattern_data_mediator/pattern_data_mediator.py",
      "class": "PatternDataMediator",
      "start_line": 73,
      "end_line": 119
    },
    "PatternDataMediator._process_epoch_data": {
      "file": "isekaizen/mediators/pattern_data_mediator/pattern_data_mediator.py",
      "class": "PatternDataMediator",
      "start_line": 119,
      "end_line": 238
    },
    "PatternDataMediator._cleanup_old_epochs": {
      "file": "isekaizen/mediators/pattern_data_mediator/pattern_data_mediator.py",
      "class": "PatternDataMediator",
      "start_line": 238,
      "end_line": 258
    },
    "PatternDataMediator.get_pattern_accuracies": {
      "file": "isekaizen/mediators/pattern_data_mediator/pattern_data_mediator.py",
      "class": "PatternDataMediator",
      "start_line": 258,
      "end_line": 286
    },
    "PatternDataMediator.get_pattern_risks": {
      "file": "isekaizen/mediators/pattern_data_mediator/pattern_data_mediator.py",
      "class": "PatternDataMediator",
      "start_line": 286,
      "end_line": 312
    },
    "PatternDataMediator.end_epoch": {
      "file": "isekaizen/mediators/pattern_data_mediator/pattern_data_mediator.py",
      "class": "PatternDataMediator",
      "start_line": 312,
      "end_line": 330
    },
    "UnifiedRatioTrainer.__init__": {
      "file": "isekaizen/core/training/unified_ratio_trainer/unified_ratio_trainer.py",
      "class": "UnifiedRatioTrainer",
      "start_line": 45,
      "end_line": 183
    },
    "UnifiedRatioTrainer._initialize_lazy_augmentation": {
      "file": "benchmarks.old/examples/modified/run_streamlined_unified_ratio_eve_with_model_swapping.py",
      "class": "UnifiedRatioTrainer",
      "start_line": 488,
      "end_line": 506
    },
    "UnifiedRatioTrainer.create_lazy_augmented_dataset": {
      "file": "benchmarks.old/examples/modified/run_streamlined_unified_ratio_eve.py",
      "class": "UnifiedRatioTrainer",
      "start_line": 407,
      "end_line": 433
    },
    "UnifiedRatioTrainer.adapt_dataset": {
      "file": "benchmarks.old/examples/modified/run_streamlined_unified_ratio_eve.py",
      "class": "UnifiedRatioTrainer",
      "start_line": 433,
      "end_line": 484
    },
    "UnifiedRatioTrainer.adjust_batch_size_for_risk": {
      "file": "benchmarks.old/examples/modified/run_streamlined_unified_ratio_eve.py",
      "class": "UnifiedRatioTrainer",
      "start_line": 484,
      "end_line": 555
    },
    "UnifiedRatioTrainer.train": {
      "file": "isekaizen/core/training/unified_ratio_trainer/unified_ratio_trainer.py",
      "class": "UnifiedRatioTrainer",
      "start_line": 187,
      "end_line": 438
    },
    "UnifiedRatioTrainer._train_epoch": {
      "file": "isekaizen/core/training/unified_ratio_trainer/unified_ratio_trainer.py",
      "class": "UnifiedRatioTrainer",
      "start_line": 438,
      "end_line": 595
    },
    "UnifiedRatioTrainer._validate": {
      "file": "isekaizen/core/training/unified_ratio_trainer/unified_ratio_trainer.py",
      "class": "UnifiedRatioTrainer",
      "start_line": 595,
      "end_line": 657
    },
    "UnifiedRatioTrainer.swap_model": {
      "file": "benchmarks.old/examples/modified/run_streamlined_unified_ratio_eve_with_model_swapping.py",
      "class": "UnifiedRatioTrainer",
      "start_line": 506,
      "end_line": 617
    },
    "UnifiedRatioTrainer.check_and_swap_model": {
      "file": "benchmarks.old/examples/modified/run_streamlined_unified_ratio_eve_with_model_swapping.py",
      "class": "UnifiedRatioTrainer",
      "start_line": 617,
      "end_line": 691
    },
    "UnifiedRatioTrainer._get_model_size_category": {
      "file": "benchmarks.old/examples/modified/run_streamlined_unified_ratio_eve_with_model_swapping.py",
      "class": "UnifiedRatioTrainer",
      "start_line": 691,
      "end_line": 702
    },
    "UnifiedRatioTrainer._get_next_model_size": {
      "file": "benchmarks.old/examples/modified/run_streamlined_unified_ratio_eve_with_model_swapping.py",
      "class": "UnifiedRatioTrainer",
      "start_line": 702,
      "end_line": 731
    },
    "UnifiedRatioTrainer._apply_adaptive_augmentation": {
      "file": "benchmarks.old/examples/modified/run_streamlined_unified_ratio_eve_with_model_swapping.py",
      "class": "UnifiedRatioTrainer",
      "start_line": 1166,
      "end_line": 1313
    },
    "SimplifiedPatternMapper.__init__": {
      "file": "benchmarks.old/examples/modified/simplified_pattern_mapping.py",
      "class": "SimplifiedPatternMapper",
      "start_line": 50,
      "end_line": 76
    },
    "SimplifiedPatternMapper.load_dataset": {
      "file": "benchmarks.old/examples/modified/simplified_pattern_mapping.py",
      "class": "SimplifiedPatternMapper",
      "start_line": 76,
      "end_line": 131
    },
    "SimplifiedPatternMapper.create_pattern_map": {
      "file": "benchmarks.old/examples/modified/simplified_pattern_mapping.py",
      "class": "SimplifiedPatternMapper",
      "start_line": 131,
      "end_line": 145
    },
    "SimplifiedPatternMapper._create_simplified_pattern_map": {
      "file": "benchmarks.old/examples/modified/simplified_pattern_mapping.py",
      "class": "SimplifiedPatternMapper",
      "start_line": 149,
      "end_line": 278
    },
    "SimplifiedPatternMapper._extract_basic_features": {
      "file": "benchmarks.old/examples/modified/simplified_pattern_mapping.py",
      "class": "SimplifiedPatternMapper",
      "start_line": 278,
      "end_line": 344
    },
    "SimplifiedPatternMapper._calculate_pattern_complexity": {
      "file": "benchmarks.old/examples/modified/simplified_pattern_mapping.py",
      "class": "SimplifiedPatternMapper",
      "start_line": 344,
      "end_line": 374
    },
    "SimplifiedPatternMapper._calculate_pattern_complexities": {
      "file": "benchmarks.old/examples/modified/simplified_pattern_mapping.py",
      "class": "SimplifiedPatternMapper",
      "start_line": 374,
      "end_line": 428
    },
    "SimplifiedPatternMapper._order_patterns_by_complexity": {
      "file": "benchmarks.old/examples/modified/simplified_pattern_mapping.py",
      "class": "SimplifiedPatternMapper",
      "start_line": 428,
      "end_line": 452
    },
    "SimplifiedPatternMapper.visualize_pattern_map": {
      "file": "benchmarks.old/examples/modified/simplified_pattern_mapping.py",
      "class": "SimplifiedPatternMapper",
      "start_line": 453,
      "end_line": 564
    },
    "SimplifiedPatternMapper.save_pattern_map": {
      "file": "benchmarks.old/examples/modified/simplified_pattern_mapping.py",
      "class": "SimplifiedPatternMapper",
      "start_line": 564,
      "end_line": 595
    },
    "SimplifiedPatternMapper.run_mapping": {
      "file": "benchmarks.old/examples/modified/simplified_pattern_mapping.py",
      "class": "SimplifiedPatternMapper",
      "start_line": 595,
      "end_line": 633
    },
    "SimplifiedRatioTrainer.__init__": {
      "file": "benchmarks.old/examples/modified/simplified_ratio_trainer.py",
      "class": "SimplifiedRatioTrainer",
      "start_line": 64,
      "end_line": 114
    },
    "SimplifiedRatioTrainer.train": {
      "file": "benchmarks.old/examples/modified/simplified_ratio_trainer.py",
      "class": "SimplifiedRatioTrainer",
      "start_line": 114,
      "end_line": 316
    },
    "SimplifiedRatioTrainer._train_epoch": {
      "file": "benchmarks.old/examples/modified/simplified_ratio_trainer.py",
      "class": "SimplifiedRatioTrainer",
      "start_line": 316,
      "end_line": 385
    },
    "SimplifiedRatioTrainer._validate": {
      "file": "benchmarks.old/examples/modified/simplified_ratio_trainer.py",
      "class": "SimplifiedRatioTrainer",
      "start_line": 385,
      "end_line": 426
    },
    "TerminalUI.__init__": {
      "file": "benchmarks.old/examples/modified/terminal_ui.py",
      "class": "TerminalUI",
      "start_line": 59,
      "end_line": 70
    },
    "TerminalUI._get_terminal_size": {
      "file": "benchmarks.old/examples/modified/terminal_ui.py",
      "class": "TerminalUI",
      "start_line": 70,
      "end_line": 74
    },
    "TerminalUI._get_hardware_info": {
      "file": "benchmarks.old/examples/modified/terminal_ui.py",
      "class": "TerminalUI",
      "start_line": 74,
      "end_line": 93
    },
    "TerminalUI.clear_screen": {
      "file": "benchmarks.old/examples/modified/terminal_ui.py",
      "class": "TerminalUI",
      "start_line": 93,
      "end_line": 97
    },
    "TerminalUI.display_header": {
      "file": "benchmarks.old/examples/modified/terminal_ui.py",
      "class": "TerminalUI",
      "start_line": 97,
      "end_line": 107
    },
    "TerminalUI.display_welcome": {
      "file": "benchmarks.old/examples/modified/terminal_ui.py",
      "class": "TerminalUI",
      "start_line": 107,
      "end_line": 127
    },
    "TerminalUI.select_model": {
      "file": "benchmarks.old/examples/modified/terminal_ui.py",
      "class": "TerminalUI",
      "start_line": 127,
      "end_line": 298
    },
    "TerminalUI.select_dataset": {
      "file": "benchmarks.old/examples/modified/terminal_ui.py",
      "class": "TerminalUI",
      "start_line": 298,
      "end_line": 458
    },
    "TerminalUI.training_settings": {
      "file": "benchmarks.old/examples/modified/terminal_ui.py",
      "class": "TerminalUI",
      "start_line": 458,
      "end_line": 716
    },
    "TerminalUI.confirm_settings": {
      "file": "benchmarks.old/examples/modified/terminal_ui.py",
      "class": "TerminalUI",
      "start_line": 716,
      "end_line": 788
    },
    "TerminalUI.display_training_progress": {
      "file": "benchmarks.old/examples/modified/terminal_ui.py",
      "class": "TerminalUI",
      "start_line": 788,
      "end_line": 832
    },
    "TerminalUI.display_final_results": {
      "file": "benchmarks.old/examples/modified/terminal_ui.py",
      "class": "TerminalUI",
      "start_line": 832,
      "end_line": 893
    },
    "TerminalUI._save_model": {
      "file": "benchmarks.old/examples/modified/terminal_ui.py",
      "class": "TerminalUI",
      "start_line": 893,
      "end_line": 904
    },
    "TerminalUI._save_history": {
      "file": "benchmarks.old/examples/modified/terminal_ui.py",
      "class": "TerminalUI",
      "start_line": 904,
      "end_line": 922
    },
    "TerminalUI._save_all": {
      "file": "benchmarks.old/examples/modified/terminal_ui.py",
      "class": "TerminalUI",
      "start_line": 922,
      "end_line": 962
    },
    "TerminalUI.start_training_ui": {
      "file": "benchmarks.old/examples/modified/terminal_ui.py",
      "class": "TerminalUI",
      "start_line": 962,
      "end_line": 1022
    },
    "TerminalUI.end_training_ui": {
      "file": "benchmarks.old/examples/modified/terminal_ui.py",
      "class": "TerminalUI",
      "start_line": 1022,
      "end_line": 1027
    },
    "UrwidTerminalUI.__init__": {
      "file": "benchmarks.old/examples/modified/terminal_ui.py",
      "class": "UrwidTerminalUI",
      "start_line": 1066,
      "end_line": 1086
    },
    "UrwidTerminalUI._get_hardware_info": {
      "file": "benchmarks.old/examples/modified/terminal_ui.py",
      "class": "UrwidTerminalUI",
      "start_line": 1086,
      "end_line": 1105
    },
    "UrwidTerminalUI.exit_program": {
      "file": "benchmarks.old/examples/modified/terminal_ui.py",
      "class": "UrwidTerminalUI",
      "start_line": 1105,
      "end_line": 1109
    },
    "UrwidTerminalUI.go_back": {
      "file": "benchmarks.old/examples/modified/terminal_ui.py",
      "class": "UrwidTerminalUI",
      "start_line": 1109,
      "end_line": 1116
    },
    "UrwidTerminalUI.push_screen": {
      "file": "benchmarks.old/examples/modified/terminal_ui.py",
      "class": "UrwidTerminalUI",
      "start_line": 1116,
      "end_line": 1122
    },
    "UrwidTerminalUI.create_button": {
      "file": "benchmarks.old/examples/modified/terminal_ui.py",
      "class": "UrwidTerminalUI",
      "start_line": 1122,
      "end_line": 1128
    },
    "UrwidTerminalUI.create_header": {
      "file": "benchmarks.old/examples/modified/terminal_ui.py",
      "class": "UrwidTerminalUI",
      "start_line": 1128,
      "end_line": 1133
    },
    "UrwidTerminalUI.create_footer": {
      "file": "benchmarks.old/examples/modified/terminal_ui.py",
      "class": "UrwidTerminalUI",
      "start_line": 1133,
      "end_line": 1138
    },
    "UrwidTerminalUI.create_welcome_screen": {
      "file": "benchmarks.old/examples/modified/terminal_ui.py",
      "class": "UrwidTerminalUI",
      "start_line": 1138,
      "end_line": 1204
    },
    "UrwidTerminalUI.show_dataset_selection": {
      "file": "benchmarks.old/examples/modified/terminal_ui.py",
      "class": "UrwidTerminalUI",
      "start_line": 1204,
      "end_line": 1209
    },
    "UrwidTerminalUI.create_dataset_selection_screen": {
      "file": "benchmarks.old/examples/modified/terminal_ui.py",
      "class": "UrwidTerminalUI",
      "start_line": 1209,
      "end_line": 1308
    },
    "UrwidTerminalUI.toggle_dataset_details": {
      "file": "benchmarks.old/examples/modified/terminal_ui.py",
      "class": "UrwidTerminalUI",
      "start_line": 1308,
      "end_line": 1314
    },
    "UrwidTerminalUI.on_dataset_selected": {
      "file": "benchmarks.old/examples/modified/terminal_ui.py",
      "class": "UrwidTerminalUI",
      "start_line": 1314,
      "end_line": 1324
    },
    "UrwidTerminalUI.create_model_selection_screen": {
      "file": "benchmarks.old/examples/modified/terminal_ui.py",
      "class": "UrwidTerminalUI",
      "start_line": 1324,
      "end_line": 1447
    },
    "UrwidTerminalUI.toggle_pretrained": {
      "file": "benchmarks.old/examples/modified/terminal_ui.py",
      "class": "UrwidTerminalUI",
      "start_line": 1447,
      "end_line": 1451
    },
    "UrwidTerminalUI.toggle_model_details": {
      "file": "benchmarks.old/examples/modified/terminal_ui.py",
      "class": "UrwidTerminalUI",
      "start_line": 1451,
      "end_line": 1457
    },
    "UrwidTerminalUI.on_model_selected": {
      "file": "benchmarks.old/examples/modified/terminal_ui.py",
      "class": "UrwidTerminalUI",
      "start_line": 1457,
      "end_line": 1480
    },
    "UrwidTerminalUI.create_training_settings_screen": {
      "file": "benchmarks.old/examples/modified/terminal_ui.py",
      "class": "UrwidTerminalUI",
      "start_line": 1480,
      "end_line": 1650
    },
    "UrwidTerminalUI.on_training_mode_change": {
      "file": "benchmarks.old/examples/modified/terminal_ui.py",
      "class": "UrwidTerminalUI",
      "start_line": 1650,
      "end_line": 1660
    },
    "UrwidTerminalUI.on_optimizer_selected": {
      "file": "benchmarks.old/examples/modified/terminal_ui.py",
      "class": "UrwidTerminalUI",
      "start_line": 1660,
      "end_line": 1668
    },
    "UrwidTerminalUI.on_weight_range_selected": {
      "file": "benchmarks.old/examples/modified/terminal_ui.py",
      "class": "UrwidTerminalUI",
      "start_line": 1668,
      "end_line": 1676
    },
    "UrwidTerminalUI.on_lr_sensitivity_selected": {
      "file": "benchmarks.old/examples/modified/terminal_ui.py",
      "class": "UrwidTerminalUI",
      "start_line": 1676,
      "end_line": 1684
    },
    "UrwidTerminalUI.on_augmentation_change": {
      "file": "benchmarks.old/examples/modified/terminal_ui.py",
      "class": "UrwidTerminalUI",
      "start_line": 1684,
      "end_line": 1688
    },
    "UrwidTerminalUI.on_settings_confirmed": {
      "file": "benchmarks.old/examples/modified/terminal_ui.py",
      "class": "UrwidTerminalUI",
      "start_line": 1688,
      "end_line": 1728
    },
    "UrwidTerminalUI.start_training": {
      "file": "benchmarks.old/examples/modified/terminal_ui.py",
      "class": "UrwidTerminalUI",
      "start_line": 1728,
      "end_line": 1736
    },
    "UrwidTerminalUI.create_training_progress_screen": {
      "file": "benchmarks.old/examples/modified/terminal_ui.py",
      "class": "UrwidTerminalUI",
      "start_line": 1736,
      "end_line": 1787
    },
    "UrwidTerminalUI.stop_training": {
      "file": "benchmarks.old/examples/modified/terminal_ui.py",
      "class": "UrwidTerminalUI",
      "start_line": 1787,
      "end_line": 1794
    },
    "UrwidTerminalUI.show_dialog": {
      "file": "benchmarks.old/examples/modified/terminal_ui.py",
      "class": "UrwidTerminalUI",
      "start_line": 1794,
      "end_line": 1831
    },
    "UrwidTerminalUI.close_dialog": {
      "file": "benchmarks.old/examples/modified/terminal_ui.py",
      "class": "UrwidTerminalUI",
      "start_line": 1831,
      "end_line": 1835
    },
    "UrwidTerminalUI.show_confirmation": {
      "file": "benchmarks.old/examples/modified/terminal_ui.py",
      "class": "UrwidTerminalUI",
      "start_line": 1835,
      "end_line": 1873
    },
    "UrwidTerminalUI.confirm_dialog": {
      "file": "benchmarks.old/examples/modified/terminal_ui.py",
      "class": "UrwidTerminalUI",
      "start_line": 1873,
      "end_line": 1878
    },
    "UrwidTerminalUI.run": {
      "file": "benchmarks.old/examples/modified/terminal_ui.py",
      "class": "UrwidTerminalUI",
      "start_line": 1878,
      "end_line": 1898
    },
    "UrwidTerminalUI.handle_input": {
      "file": "benchmarks.old/examples/modified/terminal_ui.py",
      "class": "UrwidTerminalUI",
      "start_line": 1898,
      "end_line": 1905
    },
    "TrainingMonitor.__init__": {
      "file": "benchmarks.old/examples/modified/training_monitor.py",
      "class": "TrainingMonitor",
      "start_line": 35,
      "end_line": 81
    },
    "TrainingMonitor.update": {
      "file": "benchmarks.old/examples/modified/training_monitor.py",
      "class": "TrainingMonitor",
      "start_line": 81,
      "end_line": 145
    },
    "TrainingMonitor._get_gpu_memory_info": {
      "file": "benchmarks.old/examples/modified/training_monitor.py",
      "class": "TrainingMonitor",
      "start_line": 146,
      "end_line": 167
    },
    "TrainingMonitor.measure_inference_time": {
      "file": "benchmarks.old/examples/modified/training_monitor.py",
      "class": "TrainingMonitor",
      "start_line": 167,
      "end_line": 234
    },
    "TrainingMonitor.get_model_size": {
      "file": "benchmarks.old/examples/modified/training_monitor.py",
      "class": "TrainingMonitor",
      "start_line": 234,
      "end_line": 264
    },
    "TrainingMonitor.get_final_metrics": {
      "file": "benchmarks.old/examples/modified/training_monitor.py",
      "class": "TrainingMonitor",
      "start_line": 264,
      "end_line": 328
    },
    "TrainingMonitor.save_metrics": {
      "file": "benchmarks.old/examples/modified/training_monitor.py",
      "class": "TrainingMonitor",
      "start_line": 328,
      "end_line": 378
    },
    "BaselineMetricsCollector.__init__": {
      "file": "benchmarks.old/examples/modified/baseline_tests/run_eve_baseline_metrics_fixed.py",
      "class": "BaselineMetricsCollector",
      "start_line": 54,
      "end_line": 64
    },
    "BaselineMetricsCollector.update": {
      "file": "benchmarks.old/examples/modified/baseline_tests/run_eve_baseline_metrics_fixed.py",
      "class": "BaselineMetricsCollector",
      "start_line": 65,
      "end_line": 121
    },
    "BaselineMetricsCollector.save": {
      "file": "benchmarks.old/examples/modified/baseline_tests/run_eve_baseline_metrics_fixed.py",
      "class": "BaselineMetricsCollector",
      "start_line": 121,
      "end_line": 127
    },
    "BaselineMetricsCollector.visualize": {
      "file": "benchmarks.old/examples/modified/baseline_tests/run_eve_baseline_metrics_fixed.py",
      "class": "BaselineMetricsCollector",
      "start_line": 127,
      "end_line": 207
    },
    "AIEducationalAssessment.__init__": {
      "file": "benchmarks.old/models/src/assessment/ai_assessment.py",
      "class": "AIEducationalAssessment",
      "start_line": 34,
      "end_line": 51
    },
    "AIEducationalAssessment._grade_response": {
      "file": "benchmarks.old/models/src/assessment/ai_assessment.py",
      "class": "AIEducationalAssessment",
      "start_line": 157,
      "end_line": 183
    },
    "AIEducationalAssessment._compare_patterns": {
      "file": "benchmarks.old/models/src/assessment/ai_assessment.py",
      "class": "AIEducationalAssessment",
      "start_line": 183,
      "end_line": 202
    },
    "AIEducationalAssessment._compare_semantics": {
      "file": "benchmarks.old/models/src/assessment/ai_assessment.py",
      "class": "AIEducationalAssessment",
      "start_line": 202,
      "end_line": 231
    },
    "AIEducationalAssessment._calculate_similarity": {
      "file": "benchmarks.old/models/src/assessment/ai_assessment.py",
      "class": "AIEducationalAssessment",
      "start_line": 231,
      "end_line": 250
    },
    "AIEducationalAssessment._measure_learning_impact": {
      "file": "benchmarks.old/models/src/assessment/ai_assessment.py",
      "class": "AIEducationalAssessment",
      "start_line": 250,
      "end_line": 267
    },
    "AIEducationalAssessment._update_concept_mastery": {
      "file": "benchmarks.old/models/src/assessment/ai_assessment.py",
      "class": "AIEducationalAssessment",
      "start_line": 269,
      "end_line": 287
    },
    "AIEducationalAssessment.generate_progress_report": {
      "file": "benchmarks.old/models/src/assessment/ai_assessment.py",
      "class": "AIEducationalAssessment",
      "start_line": 288,
      "end_line": 307
    },
    "AIEducationalAssessment.calculate_points": {
      "file": "benchmarks.old/models/src/assessment/ai_assessment.py",
      "class": "AIEducationalAssessment",
      "start_line": 354,
      "end_line": 358
    },
    "KnowledgeProbe.__init__": {
      "file": "benchmarks.old/models/src/assessment/knowledge_probe.py",
      "class": "KnowledgeProbe",
      "start_line": 13,
      "end_line": 17
    },
    "CortexCoordinator.__init__": {
      "file": "isekaizen/core/cortex/coordinator.py",
      "class": "CortexCoordinator",
      "start_line": 33,
      "end_line": 85
    },
    "CortexCoordinator._extract_semantic_pattern": {
      "file": "isekaizen/core/cortex/coordinator.py",
      "class": "CortexCoordinator",
      "start_line": 85,
      "end_line": 101
    },
    "CortexCoordinator.process_specialist_output": {
      "file": "isekaizen/core/cortex/coordinator.py",
      "class": "CortexCoordinator",
      "start_line": 101,
      "end_line": 163
    },
    "CortexCoordinator.coordinate_specialists": {
      "file": "isekaizen/core/cortex/coordinator.py",
      "class": "CortexCoordinator",
      "start_line": 270,
      "end_line": 305
    },
    "CortexCoordinator.get_status": {
      "file": "isekaizen/core/cortex/coordinator.py",
      "class": "CortexCoordinator",
      "start_line": 305,
      "end_line": 329
    },
    "CortexCoordinator.get_domain_distribution": {
      "file": "isekaizen/core/cortex/coordinator.py",
      "class": "CortexCoordinator",
      "start_line": 329,
      "end_line": 351
    },
    "CortexCoordinator.get_risk_queue_size": {
      "file": "isekaizen/core/cortex/coordinator.py",
      "class": "CortexCoordinator",
      "start_line": 351,
      "end_line": 366
    },
    "CortexDiagnostics.__init__": {
      "file": "isekaizen/core/cortex/diagnostics.py",
      "class": "CortexDiagnostics",
      "start_line": 27,
      "end_line": 40
    },
    "CortexDiagnostics._get_default_params": {
      "file": "isekaizen/core/cortex/diagnostics.py",
      "class": "CortexDiagnostics",
      "start_line": 41,
      "end_line": 52
    },
    "CortexDiagnostics.get_risk_assessment": {
      "file": "isekaizen/core/cortex/diagnostics.py",
      "class": "CortexDiagnostics",
      "start_line": 53,
      "end_line": 89
    },
    "CortexDiagnostics.run_system_diagnostics": {
      "file": "isekaizen/core/cortex/diagnostics.py",
      "class": "CortexDiagnostics",
      "start_line": 89,
      "end_line": 124
    },
    "CortexDiagnostics.run_pattern_diagnostics": {
      "file": "isekaizen/core/cortex/diagnostics.py",
      "class": "CortexDiagnostics",
      "start_line": 125,
      "end_line": 157
    },
    "CortexDiagnostics.run_performance_diagnostics": {
      "file": "isekaizen/core/cortex/diagnostics.py",
      "class": "CortexDiagnostics",
      "start_line": 158,
      "end_line": 194
    },
    "CortexDiagnostics.run_full_diagnostics": {
      "file": "isekaizen/core/cortex/diagnostics.py",
      "class": "CortexDiagnostics",
      "start_line": 195,
      "end_line": 219
    },
    "IntegratedCortexSystem.__init__": {
      "file": "isekaizen/core/cortex/integrated_kt_rpg.py",
      "class": "IntegratedCortexSystem",
      "start_line": 37,
      "end_line": 65
    },
    "IntegratedCortexSystem._calculate_efficiency": {
      "file": "isekaizen/core/cortex/integrated_kt_rpg.py",
      "class": "IntegratedCortexSystem",
      "start_line": 66,
      "end_line": 72
    },
    "IntegratedCortexSystem.optimize_batch_size": {
      "file": "isekaizen/core/cortex/integrated_kt_rpg.py",
      "class": "IntegratedCortexSystem",
      "start_line": 72,
      "end_line": 90
    },
    "IntegratedCortexSystem._calculate_xp_reward": {
      "file": "isekaizen/core/cortex/integrated_kt_rpg.py",
      "class": "IntegratedCortexSystem",
      "start_line": 91,
      "end_line": 100
    },
    "IntegratedCortexSystem._check_level_up": {
      "file": "isekaizen/core/cortex/integrated_kt_rpg.py",
      "class": "IntegratedCortexSystem",
      "start_line": 100,
      "end_line": 113
    },
    "IntegratedCortexSystem._improve_random_skill": {
      "file": "isekaizen/core/cortex/integrated_kt_rpg.py",
      "class": "IntegratedCortexSystem",
      "start_line": 113,
      "end_line": 130
    },
    "IntegratedCortexSystem.process_pattern": {
      "file": "isekaizen/core/cortex/integrated_kt_rpg.py",
      "class": "IntegratedCortexSystem",
      "start_line": 130,
      "end_line": 179
    },
    "PatternOrchestrator.__init__": {
      "file": "isekaizen/core/refactored/base_optimizer.py",
      "class": "PatternOrchestrator",
      "start_line": 69,
      "end_line": 72
    },
    "PatternOrchestrator.get_pattern_flow_metrics": {
      "file": "isekaizen/core/cortex/pattern_orchestrator.py",
      "class": "PatternOrchestrator",
      "start_line": 173,
      "end_line": 185
    },
    "Pattern.validation_status": {
      "file": "isekaizen/core/cortex/pattern_store.py",
      "class": "Pattern",
      "start_line": 68,
      "end_line": 96
    },
    "Pattern.create": {
      "file": "isekaizen/core/cortex/pattern_store.py",
      "class": "Pattern",
      "start_line": 97,
      "end_line": 121
    },
    "PatternStore.__init__": {
      "file": "isekaizen/core/cortex/pattern_store.py",
      "class": "PatternStore",
      "start_line": 134,
      "end_line": 156
    },
    "PatternStore._initialize_directories": {
      "file": "isekaizen/core/cortex/pattern_store.py",
      "class": "PatternStore",
      "start_line": 156,
      "end_line": 163
    },
    "PatternStore.get_value_threshold": {
      "file": "isekaizen/core/cortex/pattern_store.py",
      "class": "PatternStore",
      "start_line": 163,
      "end_line": 167
    },
    "PatternStore._get_pattern_path": {
      "file": "isekaizen/core/cortex/pattern_store.py",
      "class": "PatternStore",
      "start_line": 167,
      "end_line": 171
    },
    "ResourceManager.__init__": {
      "file": "isekaizen/core/refactored/base_optimizer.py",
      "class": "ResourceManager",
      "start_line": 77,
      "end_line": 80
    },
    "ResourceManager._init_memory_pools": {
      "file": "isekaizen/cortex/resource_manager.py",
      "class": "ResourceManager",
      "start_line": 74,
      "end_line": 107
    },
    "ResourceManager._get_chunks_for_memory": {
      "file": "isekaizen/cortex/resource_manager.py",
      "class": "ResourceManager",
      "start_line": 107,
      "end_line": 160
    },
    "ResourceManager.get_memory_usage": {
      "file": "isekaizen/cortex/resource_manager.py",
      "class": "ResourceManager",
      "start_line": 296,
      "end_line": 330
    },
    "ResourceManager.get_status": {
      "file": "isekaizen/cortex/resource_manager.py",
      "class": "ResourceManager",
      "start_line": 331,
      "end_line": 343
    },
    "ResourceManager.get_available_memory": {
      "file": "isekaizen/core/cortex/resource_manager.py",
      "class": "ResourceManager",
      "start_line": 87,
      "end_line": 97
    },
    "RPGCortexManager.__init__": {
      "file": "isekaizen/core/refactored/base_optimizer.py",
      "class": "RPGCortexManager",
      "start_line": 55,
      "end_line": 63
    },
    "RPGCortexManager._calculate_xp_reward": {
      "file": "isekaizen/core/cortex/rpg_manager.py",
      "class": "RPGCortexManager",
      "start_line": 70,
      "end_line": 76
    },
    "RPGCortexManager._check_level_up": {
      "file": "isekaizen/core/cortex/rpg_manager.py",
      "class": "RPGCortexManager",
      "start_line": 76,
      "end_line": 87
    },
    "RPGCortexManager._improve_random_skill": {
      "file": "isekaizen/core/cortex/rpg_manager.py",
      "class": "RPGCortexManager",
      "start_line": 87,
      "end_line": 95
    },
    "RPGCortexManager._skill_check": {
      "file": "isekaizen/core/cortex/rpg_manager.py",
      "class": "RPGCortexManager",
      "start_line": 95,
      "end_line": 106
    },
    "RPGCortexManager.process_pattern": {
      "file": "isekaizen/core/refactored/base_optimizer.py",
      "class": "RPGCortexManager",
      "start_line": 64,
      "end_line": 67
    },
    "SemanticPatternRegistry.get_pattern_flow_status": {
      "file": "isekaizen/core/cortex/semantic_core.py",
      "class": "SemanticPatternRegistry",
      "start_line": 127,
      "end_line": 131
    },
    "SemanticPatternRegistry._calculate_semantic_similarity": {
      "file": "isekaizen/core/cortex/semantic_core.py",
      "class": "SemanticPatternRegistry",
      "start_line": 162,
      "end_line": 184
    },
    "DomainPatternExtractor.__init__": {
      "file": "isekaizen/core/cortex/semantic_core.py",
      "class": "DomainPatternExtractor",
      "start_line": 187,
      "end_line": 190
    },
    "DomainPatternExtractor.extract_text_semantics": {
      "file": "isekaizen/core/cortex/semantic_core.py",
      "class": "DomainPatternExtractor",
      "start_line": 243,
      "end_line": 268
    },
    "DomainPatternExtractor.extract_emotion_semantics": {
      "file": "isekaizen/core/cortex/semantic_core.py",
      "class": "DomainPatternExtractor",
      "start_line": 268,
      "end_line": 292
    },
    "BaseSpecialist.__init__": {
      "file": "isekaizen/core/specialists/base.py",
      "class": "BaseSpecialist",
      "start_line": 11,
      "end_line": 22
    },
    "BaseSpecialist.process_text": {
      "file": "benchmarks.old/models/src/specialists/base.py",
      "class": "BaseSpecialist",
      "start_line": 14,
      "end_line": 18
    },
    "SentimentSpecialist.__init__": {
      "file": "isekaizen/core/specialists/sentiment.py",
      "class": "SentimentSpecialist",
      "start_line": 22,
      "end_line": 74
    },
    "SentimentSpecialist._calculate_emotional_metrics": {
      "file": "isekaizen/core/specialists/sentiment.py",
      "class": "SentimentSpecialist",
      "start_line": 300,
      "end_line": 327
    },
    "SentimentSpecialist._identify_emotional_pattern": {
      "file": "isekaizen/core/specialists/sentiment.py",
      "class": "SentimentSpecialist",
      "start_line": 134,
      "end_line": 202
    },
    "SentimentSpecialist.process_text": {
      "file": "benchmarks.old/models/src/specialists/sentiment.py",
      "class": "SentimentSpecialist",
      "start_line": 158,
      "end_line": 187
    },
    "TextSpecialist.__init__": {
      "file": "isekaizen/core/specialists/text.py",
      "class": "TextSpecialist",
      "start_line": 22,
      "end_line": 63
    },
    "TextSpecialist._calculate_linguistic_metrics": {
      "file": "isekaizen/core/specialists/text.py",
      "class": "TextSpecialist",
      "start_line": 64,
      "end_line": 86
    },
    "TextSpecialist._identify_patterns": {
      "file": "isekaizen/core/specialists/text.py",
      "class": "TextSpecialist",
      "start_line": 88,
      "end_line": 125
    },
    "TextSpecialist.process_text": {
      "file": "benchmarks.old/models/src/specialists/text.py",
      "class": "TextSpecialist",
      "start_line": 111,
      "end_line": 131
    },
    "VisionSpecialist.__init__": {
      "file": "isekaizen/core/specialists/vision.py",
      "class": "VisionSpecialist",
      "start_line": 23,
      "end_line": 49
    },
    "VisionSpecialist.initialize_model": {
      "file": "benchmarks.old/models/src/specialists/vision.py",
      "class": "VisionSpecialist",
      "start_line": 49,
      "end_line": 55
    },
    "VisionSpecialist._calculate_spatial_metrics": {
      "file": "isekaizen/core/specialists/vision.py",
      "class": "VisionSpecialist",
      "start_line": 49,
      "end_line": 99
    },
    "VisionSpecialist._identify_spatial_patterns": {
      "file": "isekaizen/core/specialists/vision.py",
      "class": "VisionSpecialist",
      "start_line": 100,
      "end_line": 131
    },
    "VisionSpecialist.preprocess_input": {
      "file": "benchmarks.old/models/src/specialists/vision.py",
      "class": "VisionSpecialist",
      "start_line": 93,
      "end_line": 98
    },
    "VisionSpecialist.identify_patterns": {
      "file": "benchmarks.old/models/src/specialists/vision.py",
      "class": "VisionSpecialist",
      "start_line": 98,
      "end_line": 135
    },
    "VisionSpecialist.process_input": {
      "file": "isekaizen/core/specialists/vision.py",
      "class": "VisionSpecialist",
      "start_line": 132,
      "end_line": 207
    },
    "VisionSpecialist.save_state": {
      "file": "benchmarks.old/models/src/specialists/vision.py",
      "class": "VisionSpecialist",
      "start_line": 182,
      "end_line": 186
    },
    "VisionSpecialist.load_state": {
      "file": "benchmarks.old/models/src/specialists/vision.py",
      "class": "VisionSpecialist",
      "start_line": 186,
      "end_line": 190
    },
    "SystemConfiguration.__init__": {
      "file": "benchmarks.old/models/src/utils/config.py",
      "class": "SystemConfiguration",
      "start_line": 44,
      "end_line": 64
    },
    "SystemConfiguration.get_resource_limits": {
      "file": "benchmarks.old/models/src/utils/config.py",
      "class": "SystemConfiguration",
      "start_line": 65,
      "end_line": 72
    },
    "SystemConfiguration.get_memory_pool_config": {
      "file": "benchmarks.old/models/src/utils/config.py",
      "class": "SystemConfiguration",
      "start_line": 73,
      "end_line": 81
    },
    "SystemConfiguration.get_kt_parameters": {
      "file": "benchmarks.old/models/src/utils/config.py",
      "class": "SystemConfiguration",
      "start_line": 82,
      "end_line": 89
    },
    "EnhancedDataFetcher.__init__": {
      "file": "benchmarks.old/models/src/utils/data_fetcher.py",
      "class": "EnhancedDataFetcher",
      "start_line": 25,
      "end_line": 46
    },
    "EnhancedDataFetcher._extract_features": {
      "file": "benchmarks.old/models/src/utils/data_fetcher.py",
      "class": "EnhancedDataFetcher",
      "start_line": 171,
      "end_line": 193
    },
    "EnhancedDataFetcher.get_metrics": {
      "file": "benchmarks.old/models/src/utils/data_fetcher.py",
      "class": "EnhancedDataFetcher",
      "start_line": 210,
      "end_line": 218
    },
    "InputTranslator.translate_raw_input": {
      "file": "isekaizen/utils/input_translator.py",
      "class": "InputTranslator",
      "start_line": 17,
      "end_line": 47
    },
    "IntegrationTestHarness.__init__": {
      "file": "benchmarks.old/models/src/utils/integration_test.py",
      "class": "IntegrationTestHarness",
      "start_line": 20,
      "end_line": 38
    },
    "IntegrationTestHarness.allocate_specialist_resources": {
      "file": "benchmarks.old/models/src/utils/integration_test.py",
      "class": "IntegrationTestHarness",
      "start_line": 39,
      "end_line": 51
    },
    "IntegrationTestHarness.test_specialist_integration": {
      "file": "benchmarks.old/models/src/utils/integration_test.py",
      "class": "IntegrationTestHarness",
      "start_line": 51,
      "end_line": 117
    },
    "CustomJSONEncoder.default": {
      "file": "benchmarks.old/models/src/utils/json_serializer.py",
      "class": "CustomJSONEncoder",
      "start_line": 11,
      "end_line": 23
    },
    "KTBatchOptimizer.__init__": {
      "file": "isekaizen/utils/kt_batch_optimizer.py",
      "class": "KTBatchOptimizer",
      "start_line": 24,
      "end_line": 47
    },
    "KTBatchOptimizer._calculate_cognitive_load": {
      "file": "benchmarks.old/models/src/utils/kt_batch_optimizer_v3.py",
      "class": "KTBatchOptimizer",
      "start_line": 60,
      "end_line": 77
    },
    "KTBatchOptimizer._calculate_efficiency": {
      "file": "isekaizen/utils/kt_batch_optimizer.py",
      "class": "KTBatchOptimizer",
      "start_line": 55,
      "end_line": 82
    },
    "KTBatchOptimizer.optimize_batch_size": {
      "file": "isekaizen/utils/kt_batch_optimizer.py",
      "class": "KTBatchOptimizer",
      "start_line": 82,
      "end_line": 122
    },
    "KTBatchOptimizer._calculate_gpu_efficiency": {
      "file": "benchmarks.old/models/src/utils/kt_batch_optimizer_v2.py",
      "class": "KTBatchOptimizer",
      "start_line": 41,
      "end_line": 52
    },
    "KTBatchOptimizer._estimate_memory_requirement": {
      "file": "benchmarks.old/models/src/utils/kt_batch_optimizer_v3.py",
      "class": "KTBatchOptimizer",
      "start_line": 129,
      "end_line": 142
    },
    "KTBatchOptimizer._log_batch_metrics": {
      "file": "benchmarks.old/models/src/utils/kt_batch_optimizer_v3.py",
      "class": "KTBatchOptimizer",
      "start_line": 77,
      "end_line": 93
    },
    "KTBatchOptimizer._save_results": {
      "file": "benchmarks.old/models/src/utils/kt_batch_optimizer_v3.py",
      "class": "KTBatchOptimizer",
      "start_line": 93,
      "end_line": 111
    },
    "KTBatchOptimizer._calculate_theoretical_max_efficiency": {
      "file": "benchmarks.old/models/src/utils/kt_batch_optimizer_v3.py",
      "class": "KTBatchOptimizer",
      "start_line": 111,
      "end_line": 116
    },
    "KTBatchOptimizer.run_kt_benchmark": {
      "file": "benchmarks.old/models/src/utils/kt_batch_optimizer_v3.py",
      "class": "KTBatchOptimizer",
      "start_line": 217,
      "end_line": 264
    },
    "KTBatchOptimizer._log_final_results": {
      "file": "benchmarks.old/models/src/utils/kt_batch_optimizer_v3.py",
      "class": "KTBatchOptimizer",
      "start_line": 264,
      "end_line": 294
    },
    "ResourceManager.allocate_resources": {
      "file": "isekaizen/core/cortex/resource_manager.py",
      "class": "ResourceManager",
      "start_line": 31,
      "end_line": 55
    },
    "ResourceManager.release_resources": {
      "file": "isekaizen/core/cortex/resource_manager.py",
      "class": "ResourceManager",
      "start_line": 55,
      "end_line": 87
    },
    "Pattern.update_flow_stage": {
      "file": "isekaizen/cortex/utils/types.py",
      "class": "Pattern",
      "start_line": 61,
      "end_line": 69
    },
    "ProcessingError.__init__": {
      "file": "isekaizen/cortex/utils/types.py",
      "class": "ProcessingError",
      "start_line": 121,
      "end_line": 126
    },
    "ResourceError.__init__": {
      "file": "isekaizen/cortex/utils/types.py",
      "class": "ResourceError",
      "start_line": 128,
      "end_line": 136
    },
    "VisionDiagnostic.__init__": {
      "file": "benchmarks.old/models/src/utils/vision_diagnostic.py",
      "class": "VisionDiagnostic",
      "start_line": 16,
      "end_line": 35
    },
    "VisionDiagnostic._simulate_yolo_inference": {
      "file": "benchmarks.old/models/src/utils/vision_diagnostic.py",
      "class": "VisionDiagnostic",
      "start_line": 36,
      "end_line": 66
    },
    "VisionDiagnostic.run_diagnostics": {
      "file": "benchmarks.old/models/src/utils/vision_diagnostic.py",
      "class": "VisionDiagnostic",
      "start_line": 66,
      "end_line": 115
    },
    "VisionDiagnostic._generate_recommendations": {
      "file": "benchmarks.old/models/src/utils/vision_diagnostic.py",
      "class": "VisionDiagnostic",
      "start_line": 117,
      "end_line": 150
    },
    "TrainingLogAnalyzer.__init__": {
      "file": "benchmarks.old/models/src/utils/analysist_tools/log_analyzer.py",
      "class": "TrainingLogAnalyzer",
      "start_line": 15,
      "end_line": 40
    },
    "TrainingLogAnalyzer._parse_timestamp": {
      "file": "benchmarks.old/models/src/utils/analysist_tools/log_analyzer.py",
      "class": "TrainingLogAnalyzer",
      "start_line": 40,
      "end_line": 59
    },
    "TrainingLogAnalyzer._extract_batch_info": {
      "file": "benchmarks.old/models/src/utils/analysist_tools/log_analyzer.py",
      "class": "TrainingLogAnalyzer",
      "start_line": 59,
      "end_line": 94
    },
    "TrainingLogAnalyzer._calculate_processing_time": {
      "file": "benchmarks.old/models/src/utils/analysist_tools/log_analyzer.py",
      "class": "TrainingLogAnalyzer",
      "start_line": 94,
      "end_line": 112
    },
    "TrainingLogAnalyzer.analyze_log": {
      "file": "benchmarks.old/models/src/utils/analysist_tools/log_analyzer.py",
      "class": "TrainingLogAnalyzer",
      "start_line": 112,
      "end_line": 163
    },
    "TrainingLogAnalyzer._calculate_acceleration": {
      "file": "benchmarks.old/models/src/utils/analysist_tools/log_analyzer.py",
      "class": "TrainingLogAnalyzer",
      "start_line": 163,
      "end_line": 190
    },
    "TrainingLogAnalyzer._generate_analysis_report": {
      "file": "benchmarks.old/models/src/utils/analysist_tools/log_analyzer.py",
      "class": "TrainingLogAnalyzer",
      "start_line": 190,
      "end_line": 253
    },
    "TrainingLogAnalyzer.generate_visualizations": {
      "file": "benchmarks.old/models/src/utils/analysist_tools/log_analyzer.py",
      "class": "TrainingLogAnalyzer",
      "start_line": 253,
      "end_line": 317
    },
    "SpinalCordIntegrationLayer.__init__": {
      "file": "benchmarks.old/models/src/utils/scil/core.py",
      "class": "SpinalCordIntegrationLayer",
      "start_line": 34,
      "end_line": 63
    },
    "SpinalCordIntegrationLayer._setup_logging": {
      "file": "benchmarks.old/models/src/utils/scil/core.py",
      "class": "SpinalCordIntegrationLayer",
      "start_line": 63,
      "end_line": 76
    },
    "SpinalCordIntegrationLayer._warmup_cuda": {
      "file": "benchmarks.old/models/src/utils/scil/core.py",
      "class": "SpinalCordIntegrationLayer",
      "start_line": 146,
      "end_line": 181
    },
    "SpinalCordIntegrationLayer.get_status": {
      "file": "benchmarks.old/models/src/utils/scil/core.py",
      "class": "SpinalCordIntegrationLayer",
      "start_line": 219,
      "end_line": 234
    },
    "SpinalCordIntegrationLayer.get_batch_optimizer_stats": {
      "file": "benchmarks.old/models/src/utils/scil/core.py",
      "class": "SpinalCordIntegrationLayer",
      "start_line": 235,
      "end_line": 242
    },
    "SpinalCordIntegrationLayer._calculate_memory_requirement": {
      "file": "benchmarks.old/models/src/utils/scil/core.py",
      "class": "SpinalCordIntegrationLayer",
      "start_line": 399,
      "end_line": 425
    },
    "SpinalCordIntegrationLayer._determine_chunk_size": {
      "file": "benchmarks.old/models/src/utils/scil/core.py",
      "class": "SpinalCordIntegrationLayer",
      "start_line": 521,
      "end_line": 535
    },
    "MemoryPoolManager.__init__": {
      "file": "benchmarks.old/models/src/utils/scil/memory_pool.py",
      "class": "MemoryPoolManager",
      "start_line": 54,
      "end_line": 75
    },
    "MemoryPoolManager._calculate_pool_sizes": {
      "file": "benchmarks.old/models/src/utils/scil/memory_pool.py",
      "class": "MemoryPoolManager",
      "start_line": 75,
      "end_line": 152
    },
    "MemoryPoolManager._initialize_pools": {
      "file": "benchmarks.old/models/src/utils/scil/memory_pool.py",
      "class": "MemoryPoolManager",
      "start_line": 152,
      "end_line": 198
    },
    "MemoryPoolManager.allocate_chunk": {
      "file": "benchmarks.old/models/src/utils/scil/memory_pool.py",
      "class": "MemoryPoolManager",
      "start_line": 198,
      "end_line": 232
    },
    "MemoryPoolManager.deallocate_chunk": {
      "file": "benchmarks.old/models/src/utils/scil/memory_pool.py",
      "class": "MemoryPoolManager",
      "start_line": 232,
      "end_line": 253
    },
    "MemoryPoolManager._recycle_chunks": {
      "file": "benchmarks.old/models/src/utils/scil/memory_pool.py",
      "class": "MemoryPoolManager",
      "start_line": 253,
      "end_line": 274
    },
    "MemoryPoolManager._update_memory_usage": {
      "file": "benchmarks.old/models/src/utils/scil/memory_pool.py",
      "class": "MemoryPoolManager",
      "start_line": 274,
      "end_line": 286
    },
    "MemoryPoolManager.get_pool_stats": {
      "file": "benchmarks.old/models/src/utils/scil/memory_pool.py",
      "class": "MemoryPoolManager",
      "start_line": 287,
      "end_line": 306
    },
    "MemoryPoolManager.get_memory_usage": {
      "file": "benchmarks.old/models/src/utils/scil/memory_pool.py",
      "class": "MemoryPoolManager",
      "start_line": 306,
      "end_line": 320
    },
    "MemoryPoolManager.mark_chunk_fragmented": {
      "file": "benchmarks.old/models/src/utils/scil/memory_pool.py",
      "class": "MemoryPoolManager",
      "start_line": 321,
      "end_line": 340
    },
    "DomainSpecificValidator.__init__": {
      "file": "benchmarks.old/models/src/utils/training/domain_validator.py",
      "class": "DomainSpecificValidator",
      "start_line": 21,
      "end_line": 74
    },
    "DomainSpecificValidator.validate_pattern_features": {
      "file": "benchmarks.old/models/src/utils/training/domain_validator.py",
      "class": "DomainSpecificValidator",
      "start_line": 74,
      "end_line": 100
    },
    "DomainSpecificValidator.validate_semantic_rules": {
      "file": "benchmarks.old/models/src/utils/training/domain_validator.py",
      "class": "DomainSpecificValidator",
      "start_line": 100,
      "end_line": 133
    },
    "DomainSpecificValidator.validate_transfer_compatibility": {
      "file": "benchmarks.old/models/src/utils/training/domain_validator.py",
      "class": "DomainSpecificValidator",
      "start_line": 133,
      "end_line": 205
    },
    "DomainSpecificValidator.run_validation": {
      "file": "benchmarks.old/models/src/utils/training/domain_validator.py",
      "class": "DomainSpecificValidator",
      "start_line": 205,
      "end_line": 283
    },
    "DomainSpecificValidator.save_results": {
      "file": "benchmarks.old/models/src/utils/training/domain_validator.py",
      "class": "DomainSpecificValidator",
      "start_line": 283,
      "end_line": 320
    },
    "MNISTPatternTest.__init__": {
      "file": "benchmarks.old/models/src/utils/training/mnist_test.py",
      "class": "MNISTPatternTest",
      "start_line": 13,
      "end_line": 38
    },
    "MNISTPatternTest.prepare_data": {
      "file": "benchmarks.old/models/src/utils/training/mnist_test.py",
      "class": "MNISTPatternTest",
      "start_line": 38,
      "end_line": 103
    },
    "MNISTPatternTest.run_test": {
      "file": "benchmarks.old/models/src/utils/training/mnist_test.py",
      "class": "MNISTPatternTest",
      "start_line": 103,
      "end_line": 167
    },
    "PatternLearningValidator.__init__": {
      "file": "benchmarks.old/models/src/utils/training/pattern_learning_validator.py",
      "class": "PatternLearningValidator",
      "start_line": 21,
      "end_line": 54
    },
    "PatternLearningValidator._generate_validation_patterns": {
      "file": "benchmarks.old/models/src/utils/training/pattern_learning_validator.py",
      "class": "PatternLearningValidator",
      "start_line": 54,
      "end_line": 106
    },
    "PatternLearningValidator._prepare_domain_data": {
      "file": "benchmarks.old/models/src/utils/training/pattern_learning_validator.py",
      "class": "PatternLearningValidator",
      "start_line": 106,
      "end_line": 142
    },
    "PatternLearningValidator._test_cross_domain_transfer": {
      "file": "benchmarks.old/models/src/utils/training/pattern_learning_validator.py",
      "class": "PatternLearningValidator",
      "start_line": 142,
      "end_line": 182
    },
    "PatternLearningValidator._calculate_pattern_similarity": {
      "file": "benchmarks.old/models/src/utils/training/pattern_learning_validator.py",
      "class": "PatternLearningValidator",
      "start_line": 182,
      "end_line": 212
    },
    "PatternLearningValidator._create_novel_variant": {
      "file": "benchmarks.old/models/src/utils/training/pattern_learning_validator.py",
      "class": "PatternLearningValidator",
      "start_line": 212,
      "end_line": 229
    },
    "PatternLearningValidator.test_pattern_recognition": {
      "file": "benchmarks.old/models/src/utils/training/pattern_learning_validator.py",
      "class": "PatternLearningValidator",
      "start_line": 230,
      "end_line": 272
    },
    "PatternLearningValidator.validate_learning": {
      "file": "benchmarks.old/models/src/utils/training/pattern_learning_validator.py",
      "class": "PatternLearningValidator",
      "start_line": 272,
      "end_line": 307
    },
    "PatternLearningValidator.save_results": {
      "file": "benchmarks.old/models/src/utils/training/pattern_learning_validator.py",
      "class": "PatternLearningValidator",
      "start_line": 307,
      "end_line": 330
    },
    "ProgressiveLearningTest.__init__": {
      "file": "benchmarks.old/models/src/utils/training/progressive_learning_test.py",
      "class": "ProgressiveLearningTest",
      "start_line": 17,
      "end_line": 72
    },
    "ProgressiveLearningTest._setup_logging": {
      "file": "benchmarks.old/models/src/utils/training/progressive_learning_test.py",
      "class": "ProgressiveLearningTest",
      "start_line": 72,
      "end_line": 93
    },
    "ProgressiveLearningTest.process_batch": {
      "file": "benchmarks.old/models/src/utils/training/progressive_learning_test.py",
      "class": "ProgressiveLearningTest",
      "start_line": 93,
      "end_line": 155
    },
    "ProgressiveLearningTest.calculate_learning_rate": {
      "file": "benchmarks.old/models/src/utils/training/progressive_learning_test.py",
      "class": "ProgressiveLearningTest",
      "start_line": 155,
      "end_line": 181
    },
    "ProgressiveLearningTest._update_learning_rate": {
      "file": "benchmarks.old/models/src/utils/training/progressive_learning_test.py",
      "class": "ProgressiveLearningTest",
      "start_line": 181,
      "end_line": 192
    },
    "ProgressiveLearningTest.detect_learning_stage": {
      "file": "benchmarks.old/models/src/utils/training/progressive_learning_test.py",
      "class": "ProgressiveLearningTest",
      "start_line": 192,
      "end_line": 222
    },
    "ProgressiveLearningTest._check_stage_transition": {
      "file": "benchmarks.old/models/src/utils/training/progressive_learning_test.py",
      "class": "ProgressiveLearningTest",
      "start_line": 222,
      "end_line": 237
    },
    "ProgressiveLearningTest._verify_stage_transition": {
      "file": "benchmarks.old/models/src/utils/training/progressive_learning_test.py",
      "class": "ProgressiveLearningTest",
      "start_line": 237,
      "end_line": 265
    },
    "ProgressiveLearningTest.save_results": {
      "file": "benchmarks.old/models/src/utils/training/progressive_learning_test.py",
      "class": "ProgressiveLearningTest",
      "start_line": 265,
      "end_line": 305
    },
    "ProgressiveLearningTest.generate_progression_report": {
      "file": "benchmarks.old/models/src/utils/training/progressive_learning_test.py",
      "class": "ProgressiveLearningTest",
      "start_line": 305,
      "end_line": 360
    },
    "RealDomainTest.__init__": {
      "file": "benchmarks.old/models/src/utils/training/real_domain_test.py",
      "class": "RealDomainTest",
      "start_line": 25,
      "end_line": 50
    },
    "RealDomainTest._setup_logging": {
      "file": "benchmarks.old/models/src/utils/training/real_domain_test.py",
      "class": "RealDomainTest",
      "start_line": 51,
      "end_line": 66
    },
    "RealDomainTest._save_results": {
      "file": "benchmarks.old/models/src/utils/training/real_domain_test.py",
      "class": "RealDomainTest",
      "start_line": 189,
      "end_line": 236
    },
    "TestDataSetup.__init__": {
      "file": "benchmarks.old/models/src/utils/training/test_data_setup.py",
      "class": "TestDataSetup",
      "start_line": 11,
      "end_line": 21
    },
    "TestDataSetup.setup_image_data": {
      "file": "benchmarks.old/models/src/utils/training/test_data_setup.py",
      "class": "TestDataSetup",
      "start_line": 21,
      "end_line": 53
    },
    "TestDataSetup._create_circle": {
      "file": "benchmarks.old/models/src/utils/training/test_data_setup.py",
      "class": "TestDataSetup",
      "start_line": 53,
      "end_line": 65
    },
    "TestDataSetup._create_square": {
      "file": "benchmarks.old/models/src/utils/training/test_data_setup.py",
      "class": "TestDataSetup",
      "start_line": 65,
      "end_line": 75
    },
    "TestDataSetup._create_triangle": {
      "file": "benchmarks.old/models/src/utils/training/test_data_setup.py",
      "class": "TestDataSetup",
      "start_line": 75,
      "end_line": 93
    },
    "TestDataSetup._create_cross": {
      "file": "benchmarks.old/models/src/utils/training/test_data_setup.py",
      "class": "TestDataSetup",
      "start_line": 93,
      "end_line": 110
    },
    "TestDataSetup._create_star": {
      "file": "benchmarks.old/models/src/utils/training/test_data_setup.py",
      "class": "TestDataSetup",
      "start_line": 110,
      "end_line": 127
    },
    "TestDataSetup._point_in_triangle": {
      "file": "benchmarks.old/models/src/utils/training/test_data_setup.py",
      "class": "TestDataSetup",
      "start_line": 127,
      "end_line": 146
    },
    "TestDataSetup.setup_text_data": {
      "file": "benchmarks.old/models/src/utils/training/test_data_setup.py",
      "class": "TestDataSetup",
      "start_line": 146,
      "end_line": 209
    },
    "TestDataSetup.setup_emotional_data": {
      "file": "benchmarks.old/models/src/utils/training/test_data_setup.py",
      "class": "TestDataSetup",
      "start_line": 209,
      "end_line": 292
    },
    "TestDataSetup.setup_all": {
      "file": "benchmarks.old/models/src/utils/training/test_data_setup.py",
      "class": "TestDataSetup",
      "start_line": 292,
      "end_line": 300
    },
    "TrainingCoordinator.__init__": {
      "file": "benchmarks.old/models/src/utils/training/training_coordinator.py",
      "class": "TrainingCoordinator",
      "start_line": 25,
      "end_line": 56
    },
    "TrainingCoordinator._should_checkpoint": {
      "file": "benchmarks.old/models/src/utils/training/training_coordinator.py",
      "class": "TrainingCoordinator",
      "start_line": 195,
      "end_line": 203
    },
    "TrainingCoordinator.get_training_metrics": {
      "file": "benchmarks.old/models/src/utils/training/training_coordinator.py",
      "class": "TrainingCoordinator",
      "start_line": 252,
      "end_line": 265
    },
    "TrainingMetricsTracker.__init__": {
      "file": "benchmarks.old/models/src/utils/training/training_metrics.py",
      "class": "TrainingMetricsTracker",
      "start_line": 33,
      "end_line": 69
    },
    "TrainingMetricsTracker.update_traditional_metrics": {
      "file": "benchmarks.old/models/src/utils/training/training_metrics.py",
      "class": "TrainingMetricsTracker",
      "start_line": 69,
      "end_line": 109
    },
    "TrainingMetricsTracker.update_pattern_metrics": {
      "file": "benchmarks.old/models/src/utils/training/training_metrics.py",
      "class": "TrainingMetricsTracker",
      "start_line": 110,
      "end_line": 139
    },
    "TrainingMetricsTracker.get_training_hours": {
      "file": "benchmarks.old/models/src/utils/training/training_metrics.py",
      "class": "TrainingMetricsTracker",
      "start_line": 139,
      "end_line": 143
    },
    "TrainingMetricsTracker.calculate_comparative_metrics": {
      "file": "benchmarks.old/models/src/utils/training/training_metrics.py",
      "class": "TrainingMetricsTracker",
      "start_line": 143,
      "end_line": 185
    },
    "TrainingMetricsTracker.save_metrics": {
      "file": "benchmarks.old/models/src/utils/training/training_metrics.py",
      "class": "TrainingMetricsTracker",
      "start_line": 187,
      "end_line": 205
    },
    "TrainingMetricsTracker.generate_comparison_report": {
      "file": "benchmarks.old/models/src/utils/training/training_metrics.py",
      "class": "TrainingMetricsTracker",
      "start_line": 205,
      "end_line": 256
    },
    "GracefulKiller.__init__": {
      "file": "benchmarks.old/models/src/utils/training/training_prep.py",
      "class": "GracefulKiller",
      "start_line": 18,
      "end_line": 23
    },
    "GracefulKiller._exit_gracefully": {
      "file": "benchmarks.old/models/src/utils/training/training_prep.py",
      "class": "GracefulKiller",
      "start_line": 23,
      "end_line": 26
    },
    "TrainingPreparationSystem.__init__": {
      "file": "benchmarks.old/models/src/utils/training/training_prep.py",
      "class": "TrainingPreparationSystem",
      "start_line": 29,
      "end_line": 60
    },
    "TrainingPreparationSystem.timeout_context": {
      "file": "benchmarks.old/models/src/utils/training/training_prep.py",
      "class": "TrainingPreparationSystem",
      "start_line": 62,
      "end_line": 81
    },
    "TrainingPreparationSystem._cleanup_gpu": {
      "file": "benchmarks.old/models/src/utils/training/training_prep.py",
      "class": "TrainingPreparationSystem",
      "start_line": 81,
      "end_line": 95
    },
    "TrainingPreparationSystem.setup_logging": {
      "file": "benchmarks.old/models/src/utils/training/training_prep.py",
      "class": "TrainingPreparationSystem",
      "start_line": 95,
      "end_line": 117
    },
    "SimplePatternMediator.__init__": {
      "file": "isekaizen/cli/train_dataset.py",
      "class": "SimplePatternMediator",
      "start_line": 679,
      "end_line": 696
    },
    "SimplePatternMediator.update_with_batch_recognition": {
      "file": "isekaizen/cli/train_dataset.py",
      "class": "SimplePatternMediator",
      "start_line": 696,
      "end_line": 705
    },
    "SimplePatternMediator.end_epoch": {
      "file": "isekaizen/cli/train_dataset.py",
      "class": "SimplePatternMediator",
      "start_line": 705,
      "end_line": 724
    },
    "SimplePatternMediator.get_pattern_risks": {
      "file": "isekaizen/cli/train_dataset.py",
      "class": "SimplePatternMediator",
      "start_line": 724,
      "end_line": 754
    },
    "SimplePatternMediator.get_pattern_accuracies": {
      "file": "isekaizen/cli/train_dataset.py",
      "class": "SimplePatternMediator",
      "start_line": 754,
      "end_line": 784
    },
    "CognitiveEfficiencyCalculator.__init__": {
      "file": "isekaizen/cognitive/efficiency.py",
      "class": "CognitiveEfficiencyCalculator",
      "start_line": 19,
      "end_line": 30
    },
    "CognitiveEfficiencyCalculator.calculate_optimal_batch_boundaries": {
      "file": "isekaizen/cognitive/efficiency.py",
      "class": "CognitiveEfficiencyCalculator",
      "start_line": 30,
      "end_line": 84
    },
    "CognitiveEfficiencyCalculator.calculate_resonance_zone": {
      "file": "isekaizen/cognitive/efficiency.py",
      "class": "CognitiveEfficiencyCalculator",
      "start_line": 86,
      "end_line": 101
    },
    "BaseOptimizer.__init__": {
      "file": "isekaizen/core/base_optimizer.py",
      "class": "BaseOptimizer",
      "start_line": 21,
      "end_line": 82
    },
    "BaseOptimizer._run_diagnostics": {
      "file": "isekaizen/core/base_optimizer.py",
      "class": "BaseOptimizer",
      "start_line": 82,
      "end_line": 121
    },
    "BaseOptimizer.get_optimal_batch_size": {
      "file": "isekaizen/core/base_optimizer.py",
      "class": "BaseOptimizer",
      "start_line": 122,
      "end_line": 131
    },
    "BaseOptimizer.update_with_metrics": {
      "file": "isekaizen/core/base_optimizer.py",
      "class": "BaseOptimizer",
      "start_line": 131,
      "end_line": 140
    },
    "BaseOptimizer.update_with_loss_info": {
      "file": "isekaizen/core/base_optimizer.py",
      "class": "BaseOptimizer",
      "start_line": 140,
      "end_line": 153
    },
    "BaseOptimizer.increment_epoch": {
      "file": "isekaizen/core/base_optimizer.py",
      "class": "BaseOptimizer",
      "start_line": 153,
      "end_line": 157
    },
    "BaseOptimizer.get_progress": {
      "file": "isekaizen/core/base_optimizer.py",
      "class": "BaseOptimizer",
      "start_line": 157,
      "end_line": 168
    },
    "BaseOptimizer.get_batch_range": {
      "file": "isekaizen/core/base_optimizer.py",
      "class": "BaseOptimizer",
      "start_line": 168,
      "end_line": 177
    },
    "EVEConfig.validate": {
      "file": "isekaizen/core/config.py",
      "class": "EVEConfig",
      "start_line": 28,
      "end_line": 42
    },
    "TrainingConfig.validate": {
      "file": "isekaizen/core/config.py",
      "class": "TrainingConfig",
      "start_line": 54,
      "end_line": 71
    },
    "ModelConfig.validate": {
      "file": "isekaizen/core/config.py",
      "class": "ModelConfig",
      "start_line": 80,
      "end_line": 101
    },
    "DataConfig.validate": {
      "file": "isekaizen/core/config.py",
      "class": "DataConfig",
      "start_line": 109,
      "end_line": 119
    },
    "IsekaiZenConfig.validate": {
      "file": "isekaizen/core/config.py",
      "class": "IsekaiZenConfig",
      "start_line": 127,
      "end_line": 134
    },
    "IsekaiZenConfig.from_dict": {
      "file": "isekaizen/core/config.py",
      "class": "IsekaiZenConfig",
      "start_line": 135,
      "end_line": 162
    },
    "BatchSizeSelector.__init__": {
      "file": "isekaizen/core/optimizers.py",
      "class": "BatchSizeSelector",
      "start_line": 22,
      "end_line": 51
    },
    "BatchSizeSelector.update_training_state": {
      "file": "isekaizen/core/optimizers.py",
      "class": "BatchSizeSelector",
      "start_line": 52,
      "end_line": 62
    },
    "BatchSizeSelector.get_optimal_batch_size": {
      "file": "isekaizen/core/optimizers.py",
      "class": "BatchSizeSelector",
      "start_line": 63,
      "end_line": 72
    },
    "BatchSizeSelector.increment_epoch": {
      "file": "isekaizen/core/optimizers.py",
      "class": "BatchSizeSelector",
      "start_line": 72,
      "end_line": 76
    },
    "AugmentationManager.__init__": {
      "file": "isekaizen/data/augmentation.py",
      "class": "AugmentationManager",
      "start_line": 38,
      "end_line": 60
    },
    "AugmentationManager.preload_augmentation_levels": {
      "file": "isekaizen/data/augmentation.py",
      "class": "AugmentationManager",
      "start_line": 60,
      "end_line": 72
    },
    "AugmentationManager.get_image_augmentation_transform": {
      "file": "isekaizen/data/augmentation.py",
      "class": "AugmentationManager",
      "start_line": 72,
      "end_line": 119
    },
    "AugmentationManager.apply_adaptive_augmentation": {
      "file": "isekaizen/data/augmentation.py",
      "class": "AugmentationManager",
      "start_line": 119,
      "end_line": 189
    },
    "AugmentationManager._determine_augmentation_level": {
      "file": "isekaizen/data/augmentation.py",
      "class": "AugmentationManager",
      "start_line": 189,
      "end_line": 271
    },
    "AugmentationManager._get_focused_patterns": {
      "file": "isekaizen/data/augmentation.py",
      "class": "AugmentationManager",
      "start_line": 271,
      "end_line": 306
    },
    "AugmentationManager.get_augmentation_history": {
      "file": "isekaizen/data/augmentation.py",
      "class": "AugmentationManager",
      "start_line": 306,
      "end_line": 315
    },
    "AugmentedDataset.__init__": {
      "file": "isekaizen/pattern/pre_augmentation.py",
      "class": "AugmentedDataset",
      "start_line": 27,
      "end_line": 56
    },
    "AugmentedDataset._generate_augmentations": {
      "file": "isekaizen/data/augmented_dataset.py",
      "class": "AugmentedDataset",
      "start_line": 71,
      "end_line": 201
    },
    "AugmentedDataset.add_augmentations": {
      "file": "isekaizen/data/augmented_dataset.py",
      "class": "AugmentedDataset",
      "start_line": 201,
      "end_line": 306
    },
    "AugmentedDataset.__len__": {
      "file": "isekaizen/pattern/pre_augmentation.py",
      "class": "AugmentedDataset",
      "start_line": 56,
      "end_line": 62
    },
    "AugmentedDataset.__getitem__": {
      "file": "isekaizen/pattern/pre_augmentation.py",
      "class": "AugmentedDataset",
      "start_line": 62,
      "end_line": 79
    },
    "AugmentedDataset.get_augmentation_info": {
      "file": "isekaizen/pattern/pre_augmentation.py",
      "class": "AugmentedDataset",
      "start_line": 79,
      "end_line": 99
    },
    "AugmentedDataset.get_augmentation_counts": {
      "file": "isekaizen/data/augmented_dataset.py",
      "class": "AugmentedDataset",
      "start_line": 359,
      "end_line": 374
    },
    "TransformedSubset.__init__": {
      "file": "isekaizen/data/augmented_dataset.py",
      "class": "TransformedSubset",
      "start_line": 389,
      "end_line": 415
    },
    "TransformedSubset.__len__": {
      "file": "isekaizen/data/augmented_dataset.py",
      "class": "TransformedSubset",
      "start_line": 415,
      "end_line": 419
    },
    "TransformedSubset.__getitem__": {
      "file": "isekaizen/data/augmented_dataset.py",
      "class": "TransformedSubset",
      "start_line": 419,
      "end_line": 455
    },
    "ParameterTuner.tune_parameters": {
      "file": "isekaizen/extensions/parameter_tuning.py",
      "class": "ParameterTuner",
      "start_line": 28,
      "end_line": 40
    },
    "ParameterTuner.predict_optimal_parameters": {
      "file": "isekaizen/extensions/parameter_tuning.py",
      "class": "ParameterTuner",
      "start_line": 41,
      "end_line": 53
    },
    "CognitiveEfficiencyTuner.__init__": {
      "file": "isekaizen/extensions/parameter_tuning.py",
      "class": "CognitiveEfficiencyTuner",
      "start_line": 62,
      "end_line": 67
    },
    "CognitiveEfficiencyTuner.tune_parameters": {
      "file": "isekaizen/extensions/parameter_tuning.py",
      "class": "CognitiveEfficiencyTuner",
      "start_line": 67,
      "end_line": 85
    },
    "CognitiveEfficiencyTuner.predict_optimal_parameters": {
      "file": "isekaizen/extensions/parameter_tuning.py",
      "class": "CognitiveEfficiencyTuner",
      "start_line": 86,
      "end_line": 99
    },
    "WorkloadSpecificOptimizer.detect_workload_type": {
      "file": "isekaizen/extensions/parameter_tuning.py",
      "class": "WorkloadSpecificOptimizer",
      "start_line": 110,
      "end_line": 122
    },
    "WorkloadSpecificOptimizer.get_optimal_parameters": {
      "file": "isekaizen/extensions/parameter_tuning.py",
      "class": "WorkloadSpecificOptimizer",
      "start_line": 123,
      "end_line": 135
    },
    "WorkloadSpecificOptimizer.train_from_history": {
      "file": "isekaizen/extensions/parameter_tuning.py",
      "class": "WorkloadSpecificOptimizer",
      "start_line": 136,
      "end_line": 146
    },
    "HardwareAnalyzer.__init__": {
      "file": "isekaizen/hardware/analyzer.py",
      "class": "HardwareAnalyzer",
      "start_line": 25,
      "end_line": 48
    },
    "HardwareAnalyzer.cleanup_memory": {
      "file": "isekaizen/hardware/analyzer.py",
      "class": "HardwareAnalyzer",
      "start_line": 48,
      "end_line": 92
    },
    "HardwareAnalyzer.get_memory_stats": {
      "file": "isekaizen/hardware/analyzer.py",
      "class": "HardwareAnalyzer",
      "start_line": 92,
      "end_line": 116
    },
    "HardwareAnalyzer._analyze_cpu_memory": {
      "file": "isekaizen/hardware/analyzer.py",
      "class": "HardwareAnalyzer",
      "start_line": 117,
      "end_line": 137
    },
    "HardwareAnalyzer.analyze_memory": {
      "file": "isekaizen/hardware/analyzer.py",
      "class": "HardwareAnalyzer",
      "start_line": 138,
      "end_line": 166
    },
    "HardwareAnalyzer.get_memory_safety_factor": {
      "file": "isekaizen/hardware/analyzer.py",
      "class": "HardwareAnalyzer",
      "start_line": 167,
      "end_line": 181
    },
    "HardwareAnalyzer.get_compute_capabilities": {
      "file": "isekaizen/hardware/analyzer.py",
      "class": "HardwareAnalyzer",
      "start_line": 181,
      "end_line": 221
    },
    "ModelMemoryAnalyzer.__init__": {
      "file": "isekaizen/hardware/memory.py",
      "class": "ModelMemoryAnalyzer",
      "start_line": 20,
      "end_line": 46
    },
    "ModelMemoryAnalyzer._calculate_parameter_memory": {
      "file": "isekaizen/hardware/memory.py",
      "class": "ModelMemoryAnalyzer",
      "start_line": 46,
      "end_line": 56
    },
    "ModelMemoryAnalyzer.estimate_single_sample_memory": {
      "file": "isekaizen/hardware/memory.py",
      "class": "ModelMemoryAnalyzer",
      "start_line": 56,
      "end_line": 91
    },
    "ModelMemoryAnalyzer._estimate_cpu_memory": {
      "file": "isekaizen/hardware/memory.py",
      "class": "ModelMemoryAnalyzer",
      "start_line": 91,
      "end_line": 114
    },
    "ModelMemoryAnalyzer.calculate_max_batch_size": {
      "file": "isekaizen/hardware/memory.py",
      "class": "ModelMemoryAnalyzer",
      "start_line": 114,
      "end_line": 214
    },
    "ModelMemoryAnalyzer.estimate_batch_memory": {
      "file": "isekaizen/hardware/memory.py",
      "class": "ModelMemoryAnalyzer",
      "start_line": 214,
      "end_line": 268
    },
    "Mediator.__init__": {
      "file": "isekaizen/mediators/base.py",
      "class": "Mediator",
      "start_line": 23,
      "end_line": 27
    },
    "EVECore.__init__": {
      "file": "isekaizen/optimizers/eve.py",
      "class": "EVECore",
      "start_line": 25,
      "end_line": 57
    },
    "EVECore.__setstate__": {
      "file": "isekaizen/optimizers/eve.py",
      "class": "EVECore",
      "start_line": 57,
      "end_line": 62
    },
    "EVECore.get_pattern_betas": {
      "file": "isekaizen/optimizers/eve.py",
      "class": "EVECore",
      "start_line": 62,
      "end_line": 66
    },
    "EVECore.step": {
      "file": "isekaizen/optimizers/eve.py",
      "class": "EVECore",
      "start_line": 67,
      "end_line": 134
    },
    "EVEPatternMomentum.__init__": {
      "file": "isekaizen/optimizers/eve.py",
      "class": "EVEPatternMomentum",
      "start_line": 136,
      "end_line": 168
    },
    "EVEPatternMomentum.step": {
      "file": "isekaizen/optimizers/eve.py",
      "class": "EVEPatternMomentum",
      "start_line": 169,
      "end_line": 247
    },
    "EVERiskAdaptive.__init__": {
      "file": "isekaizen/optimizers/eve.py",
      "class": "EVERiskAdaptive",
      "start_line": 249,
      "end_line": 284
    },
    "EVERiskAdaptive.adjust_betas_for_risk": {
      "file": "isekaizen/optimizers/eve.py",
      "class": "EVERiskAdaptive",
      "start_line": 284,
      "end_line": 294
    },
    "EVERiskAdaptive.step": {
      "file": "isekaizen/optimizers/eve.py",
      "class": "EVERiskAdaptive",
      "start_line": 295,
      "end_line": 359
    },
    "EVENaturalWeights.__init__": {
      "file": "isekaizen/optimizers/eve/base.py",
      "class": "EVENaturalWeights",
      "start_line": 34,
      "end_line": 79
    },
    "EVENaturalWeights.__setstate__": {
      "file": "isekaizen/optimizers/eve.py",
      "class": "EVENaturalWeights",
      "start_line": 423,
      "end_line": 429
    },
    "EVENaturalWeights.initialize_from_pattern_map": {
      "file": "isekaizen/optimizers/eve.py",
      "class": "EVENaturalWeights",
      "start_line": 429,
      "end_line": 575
    },
    "EVENaturalWeights.update_accuracy_metrics": {
      "file": "isekaizen/optimizers/eve/base.py",
      "class": "EVENaturalWeights",
      "start_line": 154,
      "end_line": 165
    },
    "EVENaturalWeights.get_dynamic_confidence_threshold": {
      "file": "isekaizen/optimizers/eve.py",
      "class": "EVENaturalWeights",
      "start_line": 596,
      "end_line": 629
    },
    "EVENaturalWeights.calculate_dynamic_weight_decay": {
      "file": "isekaizen/optimizers/eve.py",
      "class": "EVENaturalWeights",
      "start_line": 629,
      "end_line": 692
    },
    "EVENaturalWeights.calculate_natural_weight_adjustment": {
      "file": "isekaizen/optimizers/eve.py",
      "class": "EVENaturalWeights",
      "start_line": 692,
      "end_line": 712
    },
    "EVENaturalWeights.step": {
      "file": "isekaizen/optimizers/eve/base.py",
      "class": "EVENaturalWeights",
      "start_line": 79,
      "end_line": 154
    },
    "EVENaturalWeights.get_pattern_weights": {
      "file": "isekaizen/optimizers/eve.py",
      "class": "EVENaturalWeights",
      "start_line": 836,
      "end_line": 848
    },
    "EVENaturalWeights.update_with_ratios": {
      "file": "isekaizen/optimizers/eve.py",
      "class": "EVENaturalWeights",
      "start_line": 848,
      "end_line": 893
    },
    "EVENaturalWeights.get_pattern_weight_decays": {
      "file": "isekaizen/optimizers/eve.py",
      "class": "EVENaturalWeights",
      "start_line": 893,
      "end_line": 897
    },
    "EVENaturalWeights.calculate_unified_risk_accuracy_ratio": {
      "file": "isekaizen/optimizers/eve.py",
      "class": "EVENaturalWeights",
      "start_line": 897,
      "end_line": 921
    },
    "EVENaturalWeights.calculate_risk_accuracy_ratios": {
      "file": "isekaizen/optimizers/eve.py",
      "class": "EVENaturalWeights",
      "start_line": 921,
      "end_line": 946
    },
    "EVESimplifiedRatio.__init__": {
      "file": "isekaizen/optimizers/eve_simplified.py",
      "class": "EVESimplifiedRatio",
      "start_line": 28,
      "end_line": 39
    },
    "EVESimplifiedRatio.update_with_ratios": {
      "file": "isekaizen/optimizers/eve_simplified.py",
      "class": "EVESimplifiedRatio",
      "start_line": 39,
      "end_line": 88
    },
    "EVESimplifiedRatio.apply_decision": {
      "file": "isekaizen/optimizers/eve_simplified.py",
      "class": "EVESimplifiedRatio",
      "start_line": 88,
      "end_line": 116
    },
    "EVEUnifiedRatio.__init__": {
      "file": "isekaizen/optimizers/eve/unified_ratio.py",
      "class": "EVEUnifiedRatio",
      "start_line": 48,
      "end_line": 130
    },
    "EVEUnifiedRatio.update_equilibrium_bounds": {
      "file": "isekaizen/optimizers/eve/unified_ratio.py",
      "class": "EVEUnifiedRatio",
      "start_line": 130,
      "end_line": 162
    },
    "EVEUnifiedRatio.update_cognitive_metrics": {
      "file": "isekaizen/optimizers/eve_unified_ratio.py",
      "class": "EVEUnifiedRatio",
      "start_line": 172,
      "end_line": 242
    },
    "EVEUnifiedRatio.calculate_cognitive_efficiency": {
      "file": "isekaizen/optimizers/eve_unified_ratio.py",
      "class": "EVEUnifiedRatio",
      "start_line": 242,
      "end_line": 264
    },
    "EVEUnifiedRatio._setup_own_mediator": {
      "file": "isekaizen/optimizers/eve_unified_ratio.py",
      "class": "EVEUnifiedRatio",
      "start_line": 264,
      "end_line": 507
    },
    "EVEUnifiedRatio.set_pattern_mediator": {
      "file": "isekaizen/optimizers/eve_unified_ratio.py",
      "class": "EVEUnifiedRatio",
      "start_line": 507,
      "end_line": 512
    },
    "EVEUnifiedRatio.calculate_unified_risk_accuracy_ratio": {
      "file": "isekaizen/optimizers/eve/unified_ratio.py",
      "class": "EVEUnifiedRatio",
      "start_line": 162,
      "end_line": 190
    },
    "EVEUnifiedRatio.calculate_risk_accuracy_ratios": {
      "file": "isekaizen/optimizers/eve/unified_ratio.py",
      "class": "EVEUnifiedRatio",
      "start_line": 190,
      "end_line": 219
    },
    "EVEUnifiedRatio.calculate_natural_weight_adjustment": {
      "file": "isekaizen/optimizers/eve/unified_ratio.py",
      "class": "EVEUnifiedRatio",
      "start_line": 219,
      "end_line": 298
    },
    "EVEUnifiedRatio.step": {
      "file": "isekaizen/optimizers/eve/unified_ratio.py",
      "class": "EVEUnifiedRatio",
      "start_line": 298,
      "end_line": 366
    },
    "EVEUnifiedRatio.update_accuracy_metrics_with_epoch": {
      "file": "isekaizen/optimizers/eve/unified_ratio.py",
      "class": "EVEUnifiedRatio",
      "start_line": 366,
      "end_line": 422
    },
    "EVEUnifiedRatio.get_pattern_risks": {
      "file": "isekaizen/optimizers/eve/unified_ratio.py",
      "class": "EVEUnifiedRatio",
      "start_line": 422,
      "end_line": 426
    },
    "EVEUnifiedRatio.get_learning_rate_history": {
      "file": "isekaizen/optimizers/eve/unified_ratio.py",
      "class": "EVEUnifiedRatio",
      "start_line": 430,
      "end_line": 434
    },
    "EVEUnifiedRatio.get_bound_status_history": {
      "file": "isekaizen/optimizers/eve/unified_ratio.py",
      "class": "EVEUnifiedRatio",
      "start_line": 434,
      "end_line": 440
    },
    "EVEUnifiedRatio.get_bound_adjustment_history": {
      "file": "isekaizen/optimizers/eve/unified_ratio.py",
      "class": "EVEUnifiedRatio",
      "start_line": 440,
      "end_line": 446
    },
    "EVEUnifiedRatio.get_current_bounds": {
      "file": "isekaizen/optimizers/eve/unified_ratio.py",
      "class": "EVEUnifiedRatio",
      "start_line": 446,
      "end_line": 452
    },
    "EVEUnifiedRatio.get_cognitive_efficiency": {
      "file": "isekaizen/optimizers/eve_unified_ratio.py",
      "class": "EVEUnifiedRatio",
      "start_line": 985,
      "end_line": 991
    },
    "InternalPatternMediator.__init__": {
      "file": "isekaizen/optimizers/eve_unified_ratio.py",
      "class": "InternalPatternMediator",
      "start_line": 287,
      "end_line": 309
    },
    "InternalPatternMediator.update_from_batch": {
      "file": "isekaizen/optimizers/eve_unified_ratio.py",
      "class": "InternalPatternMediator",
      "start_line": 309,
      "end_line": 375
    },
    "InternalPatternMediator._recalculate_metrics": {
      "file": "isekaizen/optimizers/eve_unified_ratio.py",
      "class": "InternalPatternMediator",
      "start_line": 375,
      "end_line": 411
    },
    "InternalPatternMediator.end_epoch": {
      "file": "isekaizen/optimizers/eve_unified_ratio.py",
      "class": "InternalPatternMediator",
      "start_line": 411,
      "end_line": 448
    },
    "InternalPatternMediator.set_pattern_service": {
      "file": "isekaizen/optimizers/eve_unified_ratio.py",
      "class": "InternalPatternMediator",
      "start_line": 448,
      "end_line": 452
    },
    "InternalPatternMediator.get_pattern_accuracies": {
      "file": "isekaizen/optimizers/eve_unified_ratio.py",
      "class": "InternalPatternMediator",
      "start_line": 452,
      "end_line": 456
    },
    "InternalPatternMediator.get_pattern_risks": {
      "file": "isekaizen/optimizers/eve_unified_ratio.py",
      "class": "InternalPatternMediator",
      "start_line": 456,
      "end_line": 460
    },
    "InternalPatternMediator.update_accuracies": {
      "file": "isekaizen/optimizers/eve_unified_ratio.py",
      "class": "InternalPatternMediator",
      "start_line": 460,
      "end_line": 470
    },
    "FallbackMediator.__init__": {
      "file": "isekaizen/optimizers/eve_unified_ratio.py",
      "class": "FallbackMediator",
      "start_line": 478,
      "end_line": 483
    },
    "FallbackMediator.update_from_batch": {
      "file": "isekaizen/optimizers/eve_unified_ratio.py",
      "class": "FallbackMediator",
      "start_line": 483,
      "end_line": 486
    },
    "FallbackMediator.end_epoch": {
      "file": "isekaizen/optimizers/eve_unified_ratio.py",
      "class": "FallbackMediator",
      "start_line": 486,
      "end_line": 489
    },
    "FallbackMediator.get_pattern_accuracies": {
      "file": "isekaizen/optimizers/eve_unified_ratio.py",
      "class": "FallbackMediator",
      "start_line": 489,
      "end_line": 492
    },
    "FallbackMediator.get_pattern_risks": {
      "file": "isekaizen/optimizers/eve_unified_ratio.py",
      "class": "FallbackMediator",
      "start_line": 492,
      "end_line": 495
    },
    "FallbackMediator.set_pattern_service": {
      "file": "isekaizen/optimizers/eve_unified_ratio.py",
      "class": "FallbackMediator",
      "start_line": 495,
      "end_line": 498
    },
    "FallbackMediator.update_accuracies": {
      "file": "isekaizen/optimizers/eve_unified_ratio.py",
      "class": "FallbackMediator",
      "start_line": 498,
      "end_line": 504
    },
    "HeuristicBatchSelector.__init__": {
      "file": "isekaizen/optimizers/heuristic.py",
      "class": "HeuristicBatchSelector",
      "start_line": 24,
      "end_line": 64
    },
    "HeuristicBatchSelector.update_training_state": {
      "file": "isekaizen/optimizers/heuristic.py",
      "class": "HeuristicBatchSelector",
      "start_line": 64,
      "end_line": 80
    },
    "HeuristicBatchSelector.get_optimal_batch_size": {
      "file": "isekaizen/optimizers/heuristic.py",
      "class": "HeuristicBatchSelector",
      "start_line": 80,
      "end_line": 166
    },
    "HeuristicBatchSelector.increment_epoch": {
      "file": "isekaizen/optimizers/heuristic.py",
      "class": "HeuristicBatchSelector",
      "start_line": 166,
      "end_line": 171
    },
    "IsekaiZenOptimizer.__init__": {
      "file": "isekaizen/core/refactored/base_optimizer.py",
      "class": "IsekaiZenOptimizer",
      "start_line": 100,
      "end_line": 198
    },
    "IsekaiZenOptimizer._run_diagnostics": {
      "file": "isekaizen/core/refactored/base_optimizer.py",
      "class": "IsekaiZenOptimizer",
      "start_line": 199,
      "end_line": 241
    },
    "IsekaiZenOptimizer._initial_hardware_mapping": {
      "file": "isekaizen/optimizers/isekaizen.py",
      "class": "IsekaiZenOptimizer",
      "start_line": 205,
      "end_line": 455
    },
    "IsekaiZenOptimizer._refine_batch_size_range": {
      "file": "isekaizen/optimizers/isekaizen.py",
      "class": "IsekaiZenOptimizer",
      "start_line": 455,
      "end_line": 657
    },
    "IsekaiZenOptimizer._analyze_layer_frequencies": {
      "file": "isekaizen/optimizers/isekaizen.py",
      "class": "IsekaiZenOptimizer",
      "start_line": 657,
      "end_line": 692
    },
    "IsekaiZenOptimizer._calculate_observer_overhead": {
      "file": "isekaizen/optimizers/isekaizen.py",
      "class": "IsekaiZenOptimizer",
      "start_line": 692,
      "end_line": 706
    },
    "IsekaiZenOptimizer._find_resonance_zone": {
      "file": "isekaizen/optimizers/isekaizen.py",
      "class": "IsekaiZenOptimizer",
      "start_line": 706,
      "end_line": 983
    },
    "IsekaiZenOptimizer._report_diagnostics": {
      "file": "isekaizen/optimizers/isekaizen.py",
      "class": "IsekaiZenOptimizer",
      "start_line": 983,
      "end_line": 1053
    },
    "IsekaiZenOptimizer.base_cognitive_efficiency": {
      "file": "isekaizen/optimizers/isekaizen.py",
      "class": "IsekaiZenOptimizer",
      "start_line": 1053,
      "end_line": 1067
    },
    "IsekaiZenOptimizer.parallel_processing_penalty": {
      "file": "isekaizen/optimizers/isekaizen.py",
      "class": "IsekaiZenOptimizer",
      "start_line": 1067,
      "end_line": 1085
    },
    "IsekaiZenOptimizer.energy_requirement": {
      "file": "isekaizen/optimizers/isekaizen.py",
      "class": "IsekaiZenOptimizer",
      "start_line": 1085,
      "end_line": 1121
    },
    "IsekaiZenOptimizer._get_lane_energy_allocation": {
      "file": "isekaizen/optimizers/isekaizen.py",
      "class": "IsekaiZenOptimizer",
      "start_line": 1121,
      "end_line": 1156
    },
    "IsekaiZenOptimizer.cognitive_efficiency": {
      "file": "isekaizen/optimizers/isekaizen.py",
      "class": "IsekaiZenOptimizer",
      "start_line": 1156,
      "end_line": 1244
    },
    "IsekaiZenOptimizer.estimate_model_complexity": {
      "file": "isekaizen/optimizers/isekaizen.py",
      "class": "IsekaiZenOptimizer",
      "start_line": 1244,
      "end_line": 1278
    },
    "IsekaiZenOptimizer.estimate_available_energy": {
      "file": "isekaizen/optimizers/isekaizen.py",
      "class": "IsekaiZenOptimizer",
      "start_line": 1278,
      "end_line": 1302
    },
    "IsekaiZenOptimizer.estimate_gradient_impact": {
      "file": "isekaizen/optimizers/isekaizen.py",
      "class": "IsekaiZenOptimizer",
      "start_line": 1302,
      "end_line": 1378
    },
    "IsekaiZenOptimizer.estimate_cognitive_load": {
      "file": "isekaizen/optimizers/isekaizen.py",
      "class": "IsekaiZenOptimizer",
      "start_line": 1378,
      "end_line": 1450
    },
    "IsekaiZenOptimizer.precision_impact": {
      "file": "isekaizen/optimizers/isekaizen.py",
      "class": "IsekaiZenOptimizer",
      "start_line": 1450,
      "end_line": 1494
    },
    "IsekaiZenOptimizer.update_training_state": {
      "file": "isekaizen/core/refactored/base_optimizer.py",
      "class": "IsekaiZenOptimizer",
      "start_line": 260,
      "end_line": 291
    },
    "IsekaiZenOptimizer.get_sweet_spot_batch": {
      "file": "isekaizen/optimizers/isekaizen.py",
      "class": "IsekaiZenOptimizer",
      "start_line": 1541,
      "end_line": 1568
    },
    "IsekaiZenOptimizer._select_lane_for_batch": {
      "file": "isekaizen/optimizers/isekaizen.py",
      "class": "IsekaiZenOptimizer",
      "start_line": 1568,
      "end_line": 1610
    },
    "IsekaiZenOptimizer._select_optimal_lane": {
      "file": "isekaizen/optimizers/isekaizen.py",
      "class": "IsekaiZenOptimizer",
      "start_line": 1610,
      "end_line": 1704
    },
    "IsekaiZenOptimizer.get_optimal_batch_size": {
      "file": "isekaizen/core/refactored/base_optimizer.py",
      "class": "IsekaiZenOptimizer",
      "start_line": 518,
      "end_line": 529
    },
    "IsekaiZenOptimizer.increment_epoch": {
      "file": "isekaizen/core/refactored/base_optimizer.py",
      "class": "IsekaiZenOptimizer",
      "start_line": 529,
      "end_line": 533
    },
    "PotholeAwareIsekaiZen.__init__": {
      "file": "isekaizen/optimizers/pothole_aware.py",
      "class": "PotholeAwareIsekaiZen",
      "start_line": 31,
      "end_line": 100
    },
    "PotholeAwareIsekaiZen.update_with_loss_info": {
      "file": "isekaizen/optimizers/pothole_aware.py",
      "class": "PotholeAwareIsekaiZen",
      "start_line": 100,
      "end_line": 144
    },
    "PotholeAwareIsekaiZen._identify_data_regions": {
      "file": "isekaizen/optimizers/pothole_aware.py",
      "class": "PotholeAwareIsekaiZen",
      "start_line": 144,
      "end_line": 167
    },
    "PotholeAwareIsekaiZen._get_region_for_index": {
      "file": "isekaizen/optimizers/pothole_aware.py",
      "class": "PotholeAwareIsekaiZen",
      "start_line": 167,
      "end_line": 183
    },
    "PotholeAwareIsekaiZen._random_batch_size_in_resonance": {
      "file": "isekaizen/optimizers/pothole_aware.py",
      "class": "PotholeAwareIsekaiZen",
      "start_line": 183,
      "end_line": 200
    },
    "PotholeAwareIsekaiZen.get_pothole_severity_for_region": {
      "file": "isekaizen/optimizers/pothole_aware.py",
      "class": "PotholeAwareIsekaiZen",
      "start_line": 200,
      "end_line": 213
    },
    "PotholeAwareIsekaiZen.get_overall_pothole_map": {
      "file": "isekaizen/optimizers/pothole_aware.py",
      "class": "PotholeAwareIsekaiZen",
      "start_line": 213,
      "end_line": 222
    },
    "PotholeAwareIsekaiZen.visualize_pothole_map": {
      "file": "isekaizen/optimizers/pothole_aware.py",
      "class": "PotholeAwareIsekaiZen",
      "start_line": 222,
      "end_line": 268
    },
    "PotholeAwareIsekaiZen.get_optimal_batch_size": {
      "file": "isekaizen/optimizers/pothole_aware.py",
      "class": "PotholeAwareIsekaiZen",
      "start_line": 268,
      "end_line": 378
    },
    "PotholeAwareIsekaiZen._get_candidate_batch_sizes": {
      "file": "isekaizen/optimizers/pothole_aware.py",
      "class": "PotholeAwareIsekaiZen",
      "start_line": 378,
      "end_line": 420
    },
    "StaticBatchSelector.__init__": {
      "file": "isekaizen/optimizers/static.py",
      "class": "StaticBatchSelector",
      "start_line": 21,
      "end_line": 46
    },
    "StaticBatchSelector.update_training_state": {
      "file": "isekaizen/optimizers/static.py",
      "class": "StaticBatchSelector",
      "start_line": 46,
      "end_line": 57
    },
    "StaticBatchSelector.get_optimal_batch_size": {
      "file": "isekaizen/optimizers/static.py",
      "class": "StaticBatchSelector",
      "start_line": 57,
      "end_line": 66
    },
    "PatternResponsiveAugmenter.__init__": {
      "file": "isekaizen/pattern/augmentation.py",
      "class": "PatternResponsiveAugmenter",
      "start_line": 29,
      "end_line": 69
    },
    "PatternResponsiveAugmenter._extract_pattern_types": {
      "file": "isekaizen/pattern/augmentation.py",
      "class": "PatternResponsiveAugmenter",
      "start_line": 70,
      "end_line": 104
    },
    "PatternResponsiveAugmenter.augment_dataset": {
      "file": "isekaizen/pattern/augmentation.py",
      "class": "PatternResponsiveAugmenter",
      "start_line": 104,
      "end_line": 181
    },
    "PatternResponsiveAugmenter._find_pattern_examples": {
      "file": "isekaizen/pattern/augmentation.py",
      "class": "PatternResponsiveAugmenter",
      "start_line": 181,
      "end_line": 257
    },
    "PatternResponsiveAugmenter._find_examples_from_standardized_map": {
      "file": "isekaizen/pattern/augmentation.py",
      "class": "PatternResponsiveAugmenter",
      "start_line": 257,
      "end_line": 310
    },
    "PatternResponsiveAugmenter._augment_structural_pattern": {
      "file": "isekaizen/pattern/augmentation.py",
      "class": "PatternResponsiveAugmenter",
      "start_line": 310,
      "end_line": 336
    },
    "PatternResponsiveAugmenter._augment_statistical_pattern": {
      "file": "isekaizen/pattern/augmentation.py",
      "class": "PatternResponsiveAugmenter",
      "start_line": 336,
      "end_line": 363
    },
    "PatternResponsiveAugmenter._augment_temporal_pattern": {
      "file": "isekaizen/pattern/augmentation.py",
      "class": "PatternResponsiveAugmenter",
      "start_line": 363,
      "end_line": 408
    },
    "PatternResponsiveAugmenter.augment_pattern": {
      "file": "isekaizen/pattern/augmentation.py",
      "class": "PatternResponsiveAugmenter",
      "start_line": 408,
      "end_line": 493
    },
    "UnderFittingProtectedOptimizer.__init__": {
      "file": "isekaizen/pattern/batch_underfitting_optimizer.py",
      "class": "UnderFittingProtectedOptimizer",
      "start_line": 23,
      "end_line": 74
    },
    "UnderFittingProtectedOptimizer.update_batch_size": {
      "file": "isekaizen/pattern/batch_underfitting_optimizer.py",
      "class": "UnderFittingProtectedOptimizer",
      "start_line": 74,
      "end_line": 132
    },
    "UnderFittingProtectedOptimizer.get_optimal_batch_size": {
      "file": "isekaizen/pattern/batch_underfitting_optimizer.py",
      "class": "UnderFittingProtectedOptimizer",
      "start_line": 132,
      "end_line": 178
    },
    "UnderFittingProtectedOptimizer.update_accuracy_metrics": {
      "file": "isekaizen/pattern/batch_underfitting_optimizer.py",
      "class": "UnderFittingProtectedOptimizer",
      "start_line": 178,
      "end_line": 197
    },
    "PatternRecognitionService.__init__": {
      "file": "isekaizen/pattern/detection.py",
      "class": "PatternRecognitionService",
      "start_line": 14,
      "end_line": 65
    },
    "PatternRecognitionService._load_pattern_assignments": {
      "file": "isekaizen/pattern/detection.py",
      "class": "PatternRecognitionService",
      "start_line": 65,
      "end_line": 127
    },
    "PatternRecognitionService._load_from_standardized_map": {
      "file": "isekaizen/pattern/detection.py",
      "class": "PatternRecognitionService",
      "start_line": 127,
      "end_line": 199
    },
    "PatternRecognitionService.get_pattern_type": {
      "file": "isekaizen/pattern/detection.py",
      "class": "PatternRecognitionService",
      "start_line": 199,
      "end_line": 253
    },
    "PatternRecognitionService.get_unique_pattern_types": {
      "file": "isekaizen/pattern/detection.py",
      "class": "PatternRecognitionService",
      "start_line": 253,
      "end_line": 265
    },
    "PatternRecognitionService.get_batch_pattern_states": {
      "file": "isekaizen/pattern/detection.py",
      "class": "PatternRecognitionService",
      "start_line": 265,
      "end_line": 332
    },
    "PatternRecognitionService.update_with_batch_results": {
      "file": "isekaizen/pattern/detection.py",
      "class": "PatternRecognitionService",
      "start_line": 332,
      "end_line": 372
    },
    "PatternRecognitionTracker.__init__": {
      "file": "isekaizen/core/refactored/risk_aware_optimizer.py",
      "class": "PatternRecognitionTracker",
      "start_line": 67,
      "end_line": 112
    },
    "PatternRecognitionTracker.initialize_from_pattern_map": {
      "file": "isekaizen/pattern/tracking.py",
      "class": "PatternRecognitionTracker",
      "start_line": 21,
      "end_line": 73
    },
    "PatternRecognitionTracker.initialize_from_standardized_map": {
      "file": "isekaizen/pattern/tracking.py",
      "class": "PatternRecognitionTracker",
      "start_line": 73,
      "end_line": 138
    },
    "PatternRecognitionTracker.update_epoch_performance": {
      "file": "isekaizen/pattern/tracking.py",
      "class": "PatternRecognitionTracker",
      "start_line": 138,
      "end_line": 150
    },
    "PatternRecognitionTracker.get_pattern_risks": {
      "file": "isekaizen/pattern/tracking.py",
      "class": "PatternRecognitionTracker",
      "start_line": 150,
      "end_line": 193
    },
    "PatternRecognitionTracker._calculate_trend_risk": {
      "file": "isekaizen/pattern/tracking.py",
      "class": "PatternRecognitionTracker",
      "start_line": 193,
      "end_line": 219
    },
    "PatternRecognitionTracker._calculate_stability_risk": {
      "file": "isekaizen/pattern/tracking.py",
      "class": "PatternRecognitionTracker",
      "start_line": 219,
      "end_line": 236
    },
    "PatternRecognitionTracker.get_current_recognition_rates": {
      "file": "isekaizen/core/refactored/risk_aware_optimizer.py",
      "class": "PatternRecognitionTracker",
      "start_line": 195,
      "end_line": 207
    },
    "PatternRecognitionTracker.update_with_pattern_recognition": {
      "file": "isekaizen/pattern/tracking.py",
      "class": "PatternRecognitionTracker",
      "start_line": 249,
      "end_line": 273
    },
    "PatternRecognitionTracker.update_pattern_stats": {
      "file": "isekaizen/pattern/tracking.py",
      "class": "PatternRecognitionTracker",
      "start_line": 273,
      "end_line": 297
    },
    "BatchOptimizer.__init__": {
      "file": "isekaizen/public/batch_optimizer.py",
      "class": "BatchOptimizer",
      "start_line": 23,
      "end_line": 48
    },
    "BatchOptimizer.find_optimal_batch_size": {
      "file": "isekaizen/public/batch_optimizer.py",
      "class": "BatchOptimizer",
      "start_line": 48,
      "end_line": 91
    },
    "BatchOptimizer._benchmark_batch_size": {
      "file": "isekaizen/public/batch_optimizer.py",
      "class": "BatchOptimizer",
      "start_line": 91,
      "end_line": 142
    },
    "CIFAR10Augmented.__init__": {
      "file": "isekaizen/semantic/compatibility.py",
      "class": "CIFAR10Augmented",
      "start_line": 21,
      "end_line": 69
    },
    "CIFAR10Augmented.create_augmentation_indices": {
      "file": "isekaizen/semantic/compatibility.py",
      "class": "CIFAR10Augmented",
      "start_line": 70,
      "end_line": 111
    },
    "CIFAR10Augmented.__len__": {
      "file": "isekaizen/semantic/compatibility.py",
      "class": "CIFAR10Augmented",
      "start_line": 111,
      "end_line": 114
    },
    "CIFAR10Augmented.__getitem__": {
      "file": "isekaizen/semantic/compatibility.py",
      "class": "CIFAR10Augmented",
      "start_line": 114,
      "end_line": 136
    },
    "SpecialistRegistry.__init__": {
      "file": "isekaizen/semantic/clean_specialists.py",
      "class": "SpecialistRegistry",
      "start_line": 20,
      "end_line": 31
    },
    "SpecialistRegistry.register_specialist": {
      "file": "isekaizen/semantic/clean_specialists.py",
      "class": "SpecialistRegistry",
      "start_line": 31,
      "end_line": 43
    },
    "SpecialistRegistry.load_available_specialists": {
      "file": "isekaizen/semantic/clean_specialists.py",
      "class": "SpecialistRegistry",
      "start_line": 43,
      "end_line": 91
    },
    "SpecialistRegistry.get_specialist": {
      "file": "isekaizen/semantic/clean_specialists.py",
      "class": "SpecialistRegistry",
      "start_line": 91,
      "end_line": 103
    },
    "SpecialistRegistry.has_specialist": {
      "file": "isekaizen/semantic/clean_specialists.py",
      "class": "SpecialistRegistry",
      "start_line": 103,
      "end_line": 115
    },
    "EnhancedPatternMapperClean.__init__": {
      "file": "isekaizen/semantic/clean_specialists.py",
      "class": "EnhancedPatternMapperClean",
      "start_line": 123,
      "end_line": 156
    },
    "EnhancedPatternMapperClean._process_with_specialist": {
      "file": "isekaizen/semantic/clean_specialists.py",
      "class": "EnhancedPatternMapperClean",
      "start_line": 157,
      "end_line": 196
    },
    "EnhancedPatternMapperClean._enhance_with_specialists": {
      "file": "isekaizen/semantic/clean_specialists.py",
      "class": "EnhancedPatternMapperClean",
      "start_line": 196,
      "end_line": 271
    },
    "EnhancedPatternMapperClean._select_stratified_samples": {
      "file": "isekaizen/semantic/clean_specialists.py",
      "class": "EnhancedPatternMapperClean",
      "start_line": 271,
      "end_line": 304
    },
    "EnhancedPatternMapperClean._get_text_for_label": {
      "file": "isekaizen/semantic/clean_specialists.py",
      "class": "EnhancedPatternMapperClean",
      "start_line": 304,
      "end_line": 344
    },
    "EnhancedPatternMapperClean._analyze_pattern_relationships": {
      "file": "isekaizen/semantic/clean_specialists.py",
      "class": "EnhancedPatternMapperClean",
      "start_line": 344,
      "end_line": 435
    },
    "EnhancedPatternMapperClean.create_map": {
      "file": "isekaizen/semantic/clean_specialists.py",
      "class": "EnhancedPatternMapperClean",
      "start_line": 435,
      "end_line": 470
    },
    "EnhancedPatternMapperClean.visualize_map": {
      "file": "isekaizen/semantic/clean_specialists.py",
      "class": "EnhancedPatternMapperClean",
      "start_line": 470,
      "end_line": 490
    },
    "SemanticTopographicalMapper.__init__": {
      "file": "isekaizen/semantic/mapper_math.py",
      "class": "SemanticTopographicalMapper",
      "start_line": 54,
      "end_line": 97
    },
    "SemanticTopographicalMapper.load_map": {
      "file": "isekaizen/semantic/mapper_math.py",
      "class": "SemanticTopographicalMapper",
      "start_line": 221,
      "end_line": 239
    },
    "SemanticTopographicalMapper.save_map": {
      "file": "isekaizen/semantic/mapper_math.py",
      "class": "SemanticTopographicalMapper",
      "start_line": 202,
      "end_line": 221
    },
    "SemanticTopographicalMapper._detect_system_resources": {
      "file": "isekaizen/semantic/mapper_math.py",
      "class": "SemanticTopographicalMapper",
      "start_line": 97,
      "end_line": 121
    },
    "SemanticTopographicalMapper.create_map": {
      "file": "isekaizen/semantic/mapper_math.py",
      "class": "SemanticTopographicalMapper",
      "start_line": 121,
      "end_line": 202
    },
    "SemanticTopographicalMapper.visualize_map": {
      "file": "isekaizen/semantic/mapper_math.py",
      "class": "SemanticTopographicalMapper",
      "start_line": 239,
      "end_line": 321
    },
    "SemanticTopographicalMapper._extract_features_labels": {
      "file": "isekaizen/semantic/mapper_math.py",
      "class": "SemanticTopographicalMapper",
      "start_line": 322,
      "end_line": 387
    },
    "SemanticTopographicalMapper._create_feature_extractor": {
      "file": "isekaizen/semantic/mapper_math.py",
      "class": "SemanticTopographicalMapper",
      "start_line": 387,
      "end_line": 414
    },
    "SemanticTopographicalMapper._train_proxy_ensemble": {
      "file": "isekaizen/semantic/mapper_math.py",
      "class": "SemanticTopographicalMapper",
      "start_line": 414,
      "end_line": 490
    },
    "SemanticTopographicalMapper._get_ensemble_predictions": {
      "file": "isekaizen/semantic/mapper_math.py",
      "class": "SemanticTopographicalMapper",
      "start_line": 490,
      "end_line": 536
    },
    "SemanticTopographicalMapper._calculate_disagreement": {
      "file": "isekaizen/semantic/mapper_math.py",
      "class": "SemanticTopographicalMapper",
      "start_line": 536,
      "end_line": 584
    },
    "SemanticTopographicalMapper._analyze_local_topology": {
      "file": "isekaizen/semantic/mapper_math.py",
      "class": "SemanticTopographicalMapper",
      "start_line": 584,
      "end_line": 663
    },
    "SemanticTopographicalMapper._calculate_information_measures": {
      "file": "isekaizen/semantic/mapper_math.py",
      "class": "SemanticTopographicalMapper",
      "start_line": 663,
      "end_line": 713
    },
    "SemanticTopographicalMapper._combine_difficulty_scores": {
      "file": "isekaizen/semantic/mapper_math.py",
      "class": "SemanticTopographicalMapper",
      "start_line": 713,
      "end_line": 742
    },
    "SemanticTopographicalMapper._cluster_examples": {
      "file": "isekaizen/semantic/mapper_math.py",
      "class": "SemanticTopographicalMapper",
      "start_line": 742,
      "end_line": 794
    },
    "SemanticTopographicalMapper._validate_map": {
      "file": "isekaizen/semantic/mapper_math.py",
      "class": "SemanticTopographicalMapper",
      "start_line": 795,
      "end_line": 827
    },
    "SemanticTopographicalMapper._summarize_difficulty_distribution": {
      "file": "isekaizen/semantic/mapper_math.py",
      "class": "SemanticTopographicalMapper",
      "start_line": 828,
      "end_line": 857
    },
    "FeatureExtractor.__init__": {
      "file": "isekaizen/semantic/mapper_math.py",
      "class": "FeatureExtractor",
      "start_line": 396,
      "end_line": 408
    },
    "FeatureExtractor.forward": {
      "file": "isekaizen/semantic/mapper_math.py",
      "class": "FeatureExtractor",
      "start_line": 409,
      "end_line": 412
    },
    "TopographicalAwareIsekaiZen.__init__": {
      "file": "isekaizen/semantic/optimizer.py",
      "class": "TopographicalAwareIsekaiZen",
      "start_line": 25,
      "end_line": 71
    },
    "TopographicalAwareIsekaiZen._initialize_from_map": {
      "file": "isekaizen/semantic/optimizer.py",
      "class": "TopographicalAwareIsekaiZen",
      "start_line": 71,
      "end_line": 89
    },
    "TopographicalAwareIsekaiZen._analyze_difficulty_distribution": {
      "file": "isekaizen/semantic/optimizer.py",
      "class": "TopographicalAwareIsekaiZen",
      "start_line": 89,
      "end_line": 119
    },
    "TopographicalAwareIsekaiZen._configure_lanes_from_map": {
      "file": "isekaizen/semantic/optimizer.py",
      "class": "TopographicalAwareIsekaiZen",
      "start_line": 120,
      "end_line": 162
    },
    "TopographicalAwareIsekaiZen._configure_batch_preferences": {
      "file": "isekaizen/semantic/optimizer.py",
      "class": "TopographicalAwareIsekaiZen",
      "start_line": 162,
      "end_line": 190
    },
    "TopographicalAwareIsekaiZen._update_resonance_zones": {
      "file": "isekaizen/semantic/optimizer.py",
      "class": "TopographicalAwareIsekaiZen",
      "start_line": 191,
      "end_line": 236
    },
    "TopographicalAwareIsekaiZen._configure_curriculum": {
      "file": "isekaizen/semantic/optimizer.py",
      "class": "TopographicalAwareIsekaiZen",
      "start_line": 236,
      "end_line": 275
    },
    "TopographicalAwareIsekaiZen.get_optimal_batch_size": {
      "file": "isekaizen/semantic/optimizer.py",
      "class": "TopographicalAwareIsekaiZen",
      "start_line": 275,
      "end_line": 294
    },
    "TopographicalAwareIsekaiZen._get_difficulty_aware_batch_size": {
      "file": "isekaizen/semantic/optimizer.py",
      "class": "TopographicalAwareIsekaiZen",
      "start_line": 294,
      "end_line": 335
    },
    "TopographicalAwareIsekaiZen._get_curriculum_batch_size": {
      "file": "isekaizen/semantic/optimizer.py",
      "class": "TopographicalAwareIsekaiZen",
      "start_line": 335,
      "end_line": 361
    },
    "TopographicalAwareIsekaiZen.increment_epoch": {
      "file": "isekaizen/semantic/optimizer.py",
      "class": "TopographicalAwareIsekaiZen",
      "start_line": 361,
      "end_line": 369
    },
    "TopographicalAwareIsekaiZen.visualize_topology": {
      "file": "isekaizen/semantic/optimizer.py",
      "class": "TopographicalAwareIsekaiZen",
      "start_line": 369,
      "end_line": 414
    },
    "SimpleCNN.__init__": {
      "file": "isekaizen/semantic/validation_metrics.py",
      "class": "SimpleCNN",
      "start_line": 51,
      "end_line": 71
    },
    "SimpleCNN.forward": {
      "file": "isekaizen/semantic/validation_metrics.py",
      "class": "SimpleCNN",
      "start_line": 72,
      "end_line": 77
    },
    "SimpleMLP.__init__": {
      "file": "isekaizen/semantic/validation_metrics.py",
      "class": "SimpleMLP",
      "start_line": 94,
      "end_line": 106
    },
    "SimpleMLP.forward": {
      "file": "isekaizen/semantic/validation_metrics.py",
      "class": "SimpleMLP",
      "start_line": 107,
      "end_line": 110
    },
    "FallbackModel.__init__": {
      "file": "isekaizen/semantic/validation_metrics.py",
      "class": "FallbackModel",
      "start_line": 115,
      "end_line": 120
    },
    "FallbackModel.forward": {
      "file": "isekaizen/semantic/validation_metrics.py",
      "class": "FallbackModel",
      "start_line": 120,
      "end_line": 126
    },
    "BatchProcessedPatternMapper.__init__": {
      "file": "isekaizen/tools/pattern_mapper.py",
      "class": "BatchProcessedPatternMapper",
      "start_line": 68,
      "end_line": 94
    },
    "BatchProcessedPatternMapper.load_dataset": {
      "file": "isekaizen/tools/pattern_mapper.py",
      "class": "BatchProcessedPatternMapper",
      "start_line": 94,
      "end_line": 181
    },
    "BatchProcessedPatternMapper.run_hardware_diagnostics": {
      "file": "isekaizen/tools/pattern_mapper.py",
      "class": "BatchProcessedPatternMapper",
      "start_line": 181,
      "end_line": 270
    },
    "BatchProcessedPatternMapper.create_pattern_map_batched": {
      "file": "isekaizen/tools/pattern_mapper.py",
      "class": "BatchProcessedPatternMapper",
      "start_line": 270,
      "end_line": 386
    },
    "BatchProcessedPatternMapper._extract_batch_features": {
      "file": "isekaizen/tools/pattern_mapper.py",
      "class": "BatchProcessedPatternMapper",
      "start_line": 386,
      "end_line": 478
    },
    "BatchProcessedPatternMapper._determine_pattern_type": {
      "file": "isekaizen/tools/pattern_mapper.py",
      "class": "BatchProcessedPatternMapper",
      "start_line": 478,
      "end_line": 514
    },
    "BatchProcessedPatternMapper._calculate_pattern_complexity": {
      "file": "isekaizen/tools/pattern_mapper.py",
      "class": "BatchProcessedPatternMapper",
      "start_line": 514,
      "end_line": 555
    },
    "BatchProcessedPatternMapper._calculate_pattern_complexity_stats": {
      "file": "isekaizen/tools/pattern_mapper.py",
      "class": "BatchProcessedPatternMapper",
      "start_line": 555,
      "end_line": 592
    },
    "BatchProcessedPatternMapper._order_patterns_by_complexity": {
      "file": "isekaizen/tools/pattern_mapper.py",
      "class": "BatchProcessedPatternMapper",
      "start_line": 592,
      "end_line": 624
    },
    "BatchProcessedPatternMapper.save_pattern_map": {
      "file": "isekaizen/tools/pattern_mapper.py",
      "class": "BatchProcessedPatternMapper",
      "start_line": 625,
      "end_line": 663
    },
    "BatchProcessedPatternMapper.create_visualizations": {
      "file": "isekaizen/tools/pattern_mapper.py",
      "class": "BatchProcessedPatternMapper",
      "start_line": 663,
      "end_line": 813
    },
    "AdaptiveTrainer.__init__": {
      "file": "isekaizen/trainer/adaptive_trainer.py",
      "class": "AdaptiveTrainer",
      "start_line": 26,
      "end_line": 126
    },
    "AdaptiveTrainer.train": {
      "file": "isekaizen/trainer/adaptive_trainer.py",
      "class": "AdaptiveTrainer",
      "start_line": 126,
      "end_line": 286
    },
    "AdaptiveTrainer._train_epoch": {
      "file": "isekaizen/trainer/adaptive_trainer.py",
      "class": "AdaptiveTrainer",
      "start_line": 286,
      "end_line": 332
    },
    "ModelTrainer.__init__": {
      "file": "isekaizen/trainer/model_trainer.py",
      "class": "ModelTrainer",
      "start_line": 22,
      "end_line": 84
    },
    "ModelTrainer.train": {
      "file": "isekaizen/trainer/model_trainer.py",
      "class": "ModelTrainer",
      "start_line": 84,
      "end_line": 180
    },
    "ModelTrainer._train_epoch": {
      "file": "isekaizen/trainer/model_trainer.py",
      "class": "ModelTrainer",
      "start_line": 180,
      "end_line": 226
    },
    "ModelTrainer._validate": {
      "file": "isekaizen/trainer/model_trainer.py",
      "class": "ModelTrainer",
      "start_line": 226,
      "end_line": 267
    },
    "ModelTrainer.evaluate": {
      "file": "isekaizen/trainer/model_trainer.py",
      "class": "ModelTrainer",
      "start_line": 267,
      "end_line": 284
    },
    "ModelTrainer.save_model": {
      "file": "isekaizen/trainer/model_trainer.py",
      "class": "ModelTrainer",
      "start_line": 285,
      "end_line": 300
    },
    "ModelTrainer.load_model": {
      "file": "isekaizen/trainer/model_trainer.py",
      "class": "ModelTrainer",
      "start_line": 300,
      "end_line": 310
    },
    "ModelBenchmark.__init__": {
      "file": "isekaizen/utils/benchmarking.py",
      "class": "ModelBenchmark",
      "start_line": 33,
      "end_line": 50
    },
    "ModelBenchmark.run_inference_benchmark": {
      "file": "isekaizen/utils/benchmarking.py",
      "class": "ModelBenchmark",
      "start_line": 50,
      "end_line": 129
    },
    "ModelBenchmark.run_training_benchmark": {
      "file": "isekaizen/utils/benchmarking.py",
      "class": "ModelBenchmark",
      "start_line": 129,
      "end_line": 227
    },
    "ModelBenchmark.plot_results": {
      "file": "isekaizen/utils/benchmarking.py",
      "class": "ModelBenchmark",
      "start_line": 227,
      "end_line": 264
    },
    "InputTranslator._translate_visual_input": {
      "file": "isekaizen/utils/input_translator.py",
      "class": "InputTranslator",
      "start_line": 49,
      "end_line": 62
    },
    "InputTranslator._translate_linguistic_input": {
      "file": "isekaizen/utils/input_translator.py",
      "class": "InputTranslator",
      "start_line": 64,
      "end_line": 77
    },
    "InputTranslator._translate_emotional_input": {
      "file": "isekaizen/utils/input_translator.py",
      "class": "InputTranslator",
      "start_line": 79,
      "end_line": 92
    },
    "KTBatchOptimizer._estimate_min_batch": {
      "file": "isekaizen/utils/kt_batch_optimizer.py",
      "class": "KTBatchOptimizer",
      "start_line": 47,
      "end_line": 51
    },
    "KTBatchOptimizer._estimate_max_batch": {
      "file": "isekaizen/utils/kt_batch_optimizer.py",
      "class": "KTBatchOptimizer",
      "start_line": 51,
      "end_line": 55
    },
    "MemoryTracker.__init__": {
      "file": "isekaizen/utils/memory.py",
      "class": "MemoryTracker",
      "start_line": 32,
      "end_line": 55
    },
    "MemoryTracker.reset": {
      "file": "isekaizen/utils/memory.py",
      "class": "MemoryTracker",
      "start_line": 55,
      "end_line": 61
    },
    "MemoryTracker.snapshot": {
      "file": "isekaizen/utils/memory.py",
      "class": "MemoryTracker",
      "start_line": 61,
      "end_line": 100
    },
    "MemoryTracker.track_function": {
      "file": "isekaizen/utils/memory.py",
      "class": "MemoryTracker",
      "start_line": 100,
      "end_line": 130
    },
    "MemoryTracker.get_log": {
      "file": "isekaizen/utils/memory.py",
      "class": "MemoryTracker",
      "start_line": 130,
      "end_line": 139
    },
    "MemoryTracker.plot_memory_usage": {
      "file": "isekaizen/utils/memory.py",
      "class": "MemoryTracker",
      "start_line": 139,
      "end_line": 198
    },
    "PrecisionOptimizer.__init__": {
      "file": "isekaizen/utils/precision.py",
      "class": "PrecisionOptimizer",
      "start_line": 31,
      "end_line": 57
    },
    "PrecisionOptimizer.get_effective_parameter_count": {
      "file": "isekaizen/utils/precision.py",
      "class": "PrecisionOptimizer",
      "start_line": 57,
      "end_line": 95
    },
    "PrecisionOptimizer.convert_to_mixed_precision": {
      "file": "isekaizen/utils/precision.py",
      "class": "PrecisionOptimizer",
      "start_line": 95,
      "end_line": 129
    },
    "PrecisionOptimizer.quantize_model": {
      "file": "isekaizen/utils/precision.py",
      "class": "PrecisionOptimizer",
      "start_line": 129,
      "end_line": 172
    },
    "PrecisionOptimizer.analyze_precision_tradeoffs": {
      "file": "isekaizen/utils/precision.py",
      "class": "PrecisionOptimizer",
      "start_line": 172,
      "end_line": 255
    },
    "CortexFlowMetadata.update_flow_stage": {
      "file": "isekaizen/utils/types.py",
      "class": "CortexFlowMetadata",
      "start_line": 51,
      "end_line": 58
    },
    "ResourceManager.get_allocation_status": {
      "file": "isekaizen/core/cortex/resource_manager.py",
      "class": "ResourceManager",
      "start_line": 97,
      "end_line": 111
    },
    "BatchSizeOptimizer.__init__": {
      "file": "isekaizen/core/optimization/batch_sizing.py",
      "class": "BatchSizeOptimizer",
      "start_line": 41,
      "end_line": 111
    },
    "BatchSizeOptimizer.get_hardware_batch_limits": {
      "file": "isekaizen/core/optimization/batch_sizing.py",
      "class": "BatchSizeOptimizer",
      "start_line": 111,
      "end_line": 346
    },
    "BatchSizeOptimizer.get_available_memory": {
      "file": "isekaizen/core/optimization/batch_sizing.py",
      "class": "BatchSizeOptimizer",
      "start_line": 346,
      "end_line": 355
    },
    "BatchSizeOptimizer.update_batch_size": {
      "file": "isekaizen/core/optimization/batch_sizing.py",
      "class": "BatchSizeOptimizer",
      "start_line": 355,
      "end_line": 509
    },
    "BatchSizeOptimizer._calculate_pattern_adjustment": {
      "file": "isekaizen/core/optimization/batch_sizing.py",
      "class": "BatchSizeOptimizer",
      "start_line": 509,
      "end_line": 546
    },
    "BatchSizeOptimizer._calculate_memory_limited_batch_size": {
      "file": "isekaizen/core/optimization/batch_sizing.py",
      "class": "BatchSizeOptimizer",
      "start_line": 546,
      "end_line": 583
    },
    "BatchSizeOptimizer.get_batch_size_history": {
      "file": "isekaizen/core/optimization/batch_sizing.py",
      "class": "BatchSizeOptimizer",
      "start_line": 583,
      "end_line": 592
    },
    "BatchSizeOptimizer.reset": {
      "file": "isekaizen/core/optimization/batch_sizing.py",
      "class": "BatchSizeOptimizer",
      "start_line": 592,
      "end_line": 606
    },
    "PatternEquilibriumTracker.__init__": {
      "file": "isekaizen/mediators/ratio/equilibrium_mediator.py",
      "class": "PatternEquilibriumTracker",
      "start_line": 22,
      "end_line": 57
    },
    "PatternEquilibriumTracker._calculate_equilibrium_bounds": {
      "file": "isekaizen/core/optimizer/unified_ratio/equilibrium_bounds.py",
      "class": "PatternEquilibriumTracker",
      "start_line": 66,
      "end_line": 114
    },
    "PatternEquilibriumTracker.update_pattern_statuses": {
      "file": "isekaizen/core/optimizer/unified_ratio/equilibrium_bounds.py",
      "class": "PatternEquilibriumTracker",
      "start_line": 114,
      "end_line": 174
    },
    "PatternEquilibriumTracker.get_patterns_below_min": {
      "file": "isekaizen/mediators/ratio/equilibrium_mediator.py",
      "class": "PatternEquilibriumTracker",
      "start_line": 197,
      "end_line": 217
    },
    "PatternEquilibriumTracker.get_patterns_above_max": {
      "file": "isekaizen/mediators/ratio/equilibrium_mediator.py",
      "class": "PatternEquilibriumTracker",
      "start_line": 218,
      "end_line": 238
    },
    "PatternEquilibriumTracker.get_bounds_for_pattern": {
      "file": "isekaizen/core/optimizer/unified_ratio/equilibrium_bounds.py",
      "class": "PatternEquilibriumTracker",
      "start_line": 182,
      "end_line": 188
    },
    "PatternEquilibriumTracker.get_bounds_status_history": {
      "file": "isekaizen/core/optimizer/unified_ratio/equilibrium_bounds.py",
      "class": "PatternEquilibriumTracker",
      "start_line": 188,
      "end_line": 192
    },
    "PatternEquilibriumTracker.get_bounds_adjustment_history": {
      "file": "isekaizen/core/optimizer/unified_ratio/equilibrium_bounds.py",
      "class": "PatternEquilibriumTracker",
      "start_line": 192,
      "end_line": 196
    },
    "PatternEquilibriumTracker.get_current_bounds": {
      "file": "isekaizen/mediators/ratio/equilibrium_mediator.py",
      "class": "PatternEquilibriumTracker",
      "start_line": 239,
      "end_line": 248
    },
    "PatternEquilibriumTracker.adjust_bounds_for_train_test_ratio": {
      "file": "isekaizen/core/optimizer/unified_ratio/equilibrium_bounds.py",
      "class": "PatternEquilibriumTracker",
      "start_line": 220,
      "end_line": 288
    },
    "IsekaiZenOptimizer._analyze_device_capabilities": {
      "file": "isekaizen/core/refactored/base_optimizer.py",
      "class": "IsekaiZenOptimizer",
      "start_line": 241,
      "end_line": 260
    },
    "IsekaiZenOptimizer._update_stability_metrics": {
      "file": "isekaizen/core/refactored/base_optimizer.py",
      "class": "IsekaiZenOptimizer",
      "start_line": 291,
      "end_line": 361
    },
    "IsekaiZenOptimizer.get_stability_score": {
      "file": "isekaizen/core/refactored/base_optimizer.py",
      "class": "IsekaiZenOptimizer",
      "start_line": 361,
      "end_line": 370
    },
    "IsekaiZenOptimizer.is_training_stable": {
      "file": "isekaizen/core/refactored/base_optimizer.py",
      "class": "IsekaiZenOptimizer",
      "start_line": 370,
      "end_line": 379
    },
    "IsekaiZenOptimizer.start_epoch_timer": {
      "file": "isekaizen/core/refactored/base_optimizer.py",
      "class": "IsekaiZenOptimizer",
      "start_line": 379,
      "end_line": 383
    },
    "IsekaiZenOptimizer.end_epoch_timer": {
      "file": "isekaizen/core/refactored/base_optimizer.py",
      "class": "IsekaiZenOptimizer",
      "start_line": 383,
      "end_line": 398
    },
    "IsekaiZenOptimizer.estimate_remaining_time": {
      "file": "isekaizen/core/refactored/base_optimizer.py",
      "class": "IsekaiZenOptimizer",
      "start_line": 398,
      "end_line": 414
    },
    "IsekaiZenOptimizer.format_time_estimate": {
      "file": "isekaizen/core/refactored/base_optimizer.py",
      "class": "IsekaiZenOptimizer",
      "start_line": 414,
      "end_line": 434
    },
    "IsekaiZenOptimizer.is_time_constrained": {
      "file": "isekaizen/core/refactored/base_optimizer.py",
      "class": "IsekaiZenOptimizer",
      "start_line": 434,
      "end_line": 443
    },
    "IsekaiZenOptimizer.should_continue_epoch": {
      "file": "isekaizen/core/refactored/base_optimizer.py",
      "class": "IsekaiZenOptimizer",
      "start_line": 443,
      "end_line": 456
    },
    "IsekaiZenOptimizer.process_pattern": {
      "file": "isekaizen/core/refactored/base_optimizer.py",
      "class": "IsekaiZenOptimizer",
      "start_line": 456,
      "end_line": 484
    },
    "IsekaiZenOptimizer.get_current_state": {
      "file": "isekaizen/core/refactored/base_optimizer.py",
      "class": "IsekaiZenOptimizer",
      "start_line": 533,
      "end_line": 569
    },
    "Pattern.__init__": {
      "file": "isekaizen/core/refactored/base_optimizer.py",
      "class": "Pattern",
      "start_line": 45,
      "end_line": 53
    },
    "EnhancedPatternResponsiveOptimizer.__init__": {
      "file": "isekaizen/core/optimizer/enhanced_pattern_responsive.py",
      "class": "EnhancedPatternResponsiveOptimizer",
      "start_line": 30,
      "end_line": 105
    },
    "EnhancedPatternResponsiveOptimizer.update_with_epoch_metrics": {
      "file": "isekaizen/core/optimizer/enhanced_pattern_responsive.py",
      "class": "EnhancedPatternResponsiveOptimizer",
      "start_line": 105,
      "end_line": 126
    },
    "EnhancedPatternResponsiveOptimizer._calculate_training_efficiency": {
      "file": "isekaizen/core/optimizer/enhanced_pattern_responsive.py",
      "class": "EnhancedPatternResponsiveOptimizer",
      "start_line": 126,
      "end_line": 169
    },
    "EnhancedPatternResponsiveOptimizer.should_adapt_patterns": {
      "file": "isekaizen/core/optimizer/enhanced_pattern_responsive.py",
      "class": "EnhancedPatternResponsiveOptimizer",
      "start_line": 169,
      "end_line": 247
    },
    "EnhancedPatternResponsiveOptimizer.adapt_dataset": {
      "file": "isekaizen/core/optimizer/enhanced_pattern_responsive.py",
      "class": "EnhancedPatternResponsiveOptimizer",
      "start_line": 247,
      "end_line": 449
    },
    "EnhancedPatternResponsiveOptimizer.update_with_batch_results": {
      "file": "isekaizen/core/optimizer/enhanced_pattern_responsive.py",
      "class": "EnhancedPatternResponsiveOptimizer",
      "start_line": 450,
      "end_line": 468
    },
    "EnhancedPatternResponsiveOptimizer.update_with_pattern_recognition": {
      "file": "isekaizen/core/optimizer/enhanced_pattern_responsive.py",
      "class": "EnhancedPatternResponsiveOptimizer",
      "start_line": 468,
      "end_line": 482
    },
    "EnhancedPatternResponsiveOptimizer.adjust_batch_size_for_risk": {
      "file": "isekaizen/core/optimizer/enhanced_pattern_responsive.py",
      "class": "EnhancedPatternResponsiveOptimizer",
      "start_line": 482,
      "end_line": 526
    },
    "EnhancedPatternResponsiveOptimizer.get_optimal_batch_size": {
      "file": "isekaizen/core/optimizer/enhanced_pattern_responsive.py",
      "class": "EnhancedPatternResponsiveOptimizer",
      "start_line": 526,
      "end_line": 582
    },
    "EnhancedPatternResponsiveOptimizer.get_status": {
      "file": "isekaizen/core/optimizer/enhanced_pattern_responsive.py",
      "class": "EnhancedPatternResponsiveOptimizer",
      "start_line": 582,
      "end_line": 605
    },
    "EnhancedPatternResponsiveOptimizer._detect_training_stagnation": {
      "file": "isekaizen/core/optimizer/enhanced_pattern_responsive.py",
      "class": "EnhancedPatternResponsiveOptimizer",
      "start_line": 605,
      "end_line": 634
    },
    "EnhancedPatternResponsiveOptimizer._find_risk_optimized_batch_size": {
      "file": "isekaizen/core/optimizer/enhanced_pattern_responsive.py",
      "class": "EnhancedPatternResponsiveOptimizer",
      "start_line": 634,
      "end_line": 673
    },
    "EnhancedRiskAssessmentTracker.__init__": {
      "file": "isekaizen/core/optimizer/enhanced_risk_assessment.py",
      "class": "EnhancedRiskAssessmentTracker",
      "start_line": 31,
      "end_line": 89
    },
    "EnhancedRiskAssessmentTracker._extract_pattern_types": {
      "file": "isekaizen/core/optimizer/enhanced_risk_assessment.py",
      "class": "EnhancedRiskAssessmentTracker",
      "start_line": 89,
      "end_line": 112
    },
    "EnhancedRiskAssessmentTracker._get_pattern_type": {
      "file": "isekaizen/core/optimizer/enhanced_risk_assessment.py",
      "class": "EnhancedRiskAssessmentTracker",
      "start_line": 112,
      "end_line": 133
    },
    "EnhancedRiskAssessmentTracker._calculate_epoch_efficiency": {
      "file": "isekaizen/core/optimizer/enhanced_risk_assessment.py",
      "class": "EnhancedRiskAssessmentTracker",
      "start_line": 133,
      "end_line": 178
    },
    "EnhancedRiskAssessmentTracker.update_with_epoch_metrics": {
      "file": "isekaizen/core/optimizer/enhanced_risk_assessment.py",
      "class": "EnhancedRiskAssessmentTracker",
      "start_line": 178,
      "end_line": 254
    },
    "EnhancedRiskAssessmentTracker._detect_instability": {
      "file": "isekaizen/core/optimizer/enhanced_risk_assessment.py",
      "class": "EnhancedRiskAssessmentTracker",
      "start_line": 254,
      "end_line": 290
    },
    "EnhancedRiskAssessmentTracker._update_risk_levels": {
      "file": "isekaizen/core/optimizer/enhanced_risk_assessment.py",
      "class": "EnhancedRiskAssessmentTracker",
      "start_line": 290,
      "end_line": 326
    },
    "EnhancedRiskAssessmentTracker._determine_risk_level": {
      "file": "isekaizen/core/optimizer/enhanced_risk_assessment.py",
      "class": "EnhancedRiskAssessmentTracker",
      "start_line": 326,
      "end_line": 354
    },
    "EnhancedRiskAssessmentTracker._generate_risk_patterns": {
      "file": "isekaizen/core/optimizer/enhanced_risk_assessment.py",
      "class": "EnhancedRiskAssessmentTracker",
      "start_line": 354,
      "end_line": 437
    },
    "EnhancedRiskAssessmentTracker._determine_risk_level_from_factor": {
      "file": "isekaizen/core/optimizer/enhanced_risk_assessment.py",
      "class": "EnhancedRiskAssessmentTracker",
      "start_line": 437,
      "end_line": 456
    },
    "EnhancedRiskAssessmentTracker._log_risk_assessment": {
      "file": "isekaizen/core/optimizer/enhanced_risk_assessment.py",
      "class": "EnhancedRiskAssessmentTracker",
      "start_line": 456,
      "end_line": 480
    },
    "EnhancedRiskAssessmentTracker.assess_risk": {
      "file": "isekaizen/core/optimizer/enhanced_risk_assessment.py",
      "class": "EnhancedRiskAssessmentTracker",
      "start_line": 480,
      "end_line": 539
    },
    "EnhancedRiskAssessmentTracker.calculate_mitigation_adjustment": {
      "file": "isekaizen/core/optimizer/enhanced_risk_assessment.py",
      "class": "EnhancedRiskAssessmentTracker",
      "start_line": 539,
      "end_line": 568
    },
    "EnhancedRiskAssessmentTracker.update_mitigation_results": {
      "file": "isekaizen/core/optimizer/enhanced_risk_assessment.py",
      "class": "EnhancedRiskAssessmentTracker",
      "start_line": 568,
      "end_line": 591
    },
    "EnhancedRiskAssessmentTracker.get_current_risk_metrics": {
      "file": "isekaizen/core/optimizer/enhanced_risk_assessment.py",
      "class": "EnhancedRiskAssessmentTracker",
      "start_line": 591,
      "end_line": 606
    },
    "EnhancedRiskAssessmentTracker.snapshot_risk_metrics": {
      "file": "isekaizen/core/optimizer/enhanced_risk_assessment.py",
      "class": "EnhancedRiskAssessmentTracker",
      "start_line": 606,
      "end_line": 636
    },
    "PatternResponsiveOptimizer.__init__": {
      "file": "isekaizen/core/optimizer/pattern_responsive_optimizer.py",
      "class": "PatternResponsiveOptimizer",
      "start_line": 30,
      "end_line": 87
    },
    "PatternResponsiveOptimizer.should_adapt_patterns": {
      "file": "isekaizen/core/optimizer/pattern_responsive_optimizer.py",
      "class": "PatternResponsiveOptimizer",
      "start_line": 87,
      "end_line": 122
    },
    "PatternResponsiveOptimizer.get_responsive_patterns": {
      "file": "isekaizen/core/optimizer/pattern_responsive_optimizer.py",
      "class": "PatternResponsiveOptimizer",
      "start_line": 122,
      "end_line": 146
    },
    "PatternResponsiveOptimizer.adapt_dataset": {
      "file": "isekaizen/core/optimizer/pattern_responsive_optimizer.py",
      "class": "PatternResponsiveOptimizer",
      "start_line": 146,
      "end_line": 225
    },
    "PatternResponsiveOptimizer.get_optimal_batch_size": {
      "file": "isekaizen/core/optimizer/pattern_responsive_optimizer.py",
      "class": "PatternResponsiveOptimizer",
      "start_line": 226,
      "end_line": 245
    },
    "PatternResponsiveOptimizer.get_status": {
      "file": "isekaizen/core/optimizer/pattern_responsive_optimizer.py",
      "class": "PatternResponsiveOptimizer",
      "start_line": 245,
      "end_line": 269
    },
    "PatternRiskAccuracyTracker.__init__": {
      "file": "isekaizen/core/optimizer/risk_accuracy/pattern_risk_accuracy_tracker.py",
      "class": "PatternRiskAccuracyTracker",
      "start_line": 23,
      "end_line": 62
    },
    "PatternRiskAccuracyTracker._extract_pattern_types": {
      "file": "isekaizen/core/optimizer/risk_accuracy/pattern_risk_accuracy_tracker.py",
      "class": "PatternRiskAccuracyTracker",
      "start_line": 62,
      "end_line": 85
    },
    "PatternRiskAccuracyTracker._extract_pattern_preferences": {
      "file": "isekaizen/core/optimizer/risk_accuracy/pattern_risk_accuracy_tracker.py",
      "class": "PatternRiskAccuracyTracker",
      "start_line": 85,
      "end_line": 95
    },
    "PatternRiskAccuracyTracker._get_pattern_type": {
      "file": "isekaizen/core/optimizer/risk_accuracy/pattern_risk_accuracy_tracker.py",
      "class": "PatternRiskAccuracyTracker",
      "start_line": 95,
      "end_line": 116
    },
    "PatternRiskAccuracyTracker.update_with_batch_results": {
      "file": "isekaizen/core/optimizer/risk_accuracy/pattern_risk_accuracy_tracker.py",
      "class": "PatternRiskAccuracyTracker",
      "start_line": 116,
      "end_line": 140
    },
    "PatternRiskAccuracyTracker.update_with_epoch_results": {
      "file": "isekaizen/core/optimizer/risk_accuracy/pattern_risk_accuracy_tracker.py",
      "class": "PatternRiskAccuracyTracker",
      "start_line": 140,
      "end_line": 187
    },
    "PatternRiskAccuracyTracker.get_pattern_risks": {
      "file": "isekaizen/core/optimizer/risk_accuracy/pattern_risk_accuracy_tracker.py",
      "class": "PatternRiskAccuracyTracker",
      "start_line": 217,
      "end_line": 229
    },
    "PatternRiskAccuracyTracker.get_current_recognition_rates": {
      "file": "isekaizen/core/optimizer/pattern_risk_accuracy_tracker.py",
      "class": "PatternRiskAccuracyTracker",
      "start_line": 285,
      "end_line": 306
    },
    "PatternRiskAccuracyTracker.get_pattern_accuracies": {
      "file": "isekaizen/core/optimizer/risk_accuracy/pattern_risk_accuracy_tracker.py",
      "class": "PatternRiskAccuracyTracker",
      "start_line": 230,
      "end_line": 242
    },
    "PatternRiskAccuracyTracker.get_overall_risk": {
      "file": "isekaizen/core/optimizer/risk_accuracy/pattern_risk_accuracy_tracker.py",
      "class": "PatternRiskAccuracyTracker",
      "start_line": 243,
      "end_line": 272
    },
    "PatternRiskAccuracyTracker._calculate_weighted_risk": {
      "file": "isekaizen/core/optimizer/pattern_risk_accuracy_tracker.py",
      "class": "PatternRiskAccuracyTracker",
      "start_line": 355,
      "end_line": 382
    },
    "PreAugmentOptimizer._calculate_hardware_min_batch": {
      "file": "isekaizen/core/optimizer/pre_augment_optimizer.py",
      "class": "PreAugmentOptimizer",
      "start_line": 46,
      "end_line": 94
    },
    "PreAugmentOptimizer.__init__": {
      "file": "isekaizen/core/optimizer/pre_augment_optimizer.py",
      "class": "PreAugmentOptimizer",
      "start_line": 94,
      "end_line": 162
    },
    "PreAugmentOptimizer.adjust_batch_size_for_patterns": {
      "file": "isekaizen/core/optimizer/pre_augment_optimizer.py",
      "class": "PreAugmentOptimizer",
      "start_line": 162,
      "end_line": 178
    },
    "PreAugmentOptimizer.adjust_batch_size_for_risk": {
      "file": "isekaizen/core/optimizer/pre_augment_optimizer.py",
      "class": "PreAugmentOptimizer",
      "start_line": 178,
      "end_line": 194
    },
    "PreAugmentOptimizer.adjust_batch_size_for_stability": {
      "file": "isekaizen/core/optimizer/pre_augment_optimizer.py",
      "class": "PreAugmentOptimizer",
      "start_line": 194,
      "end_line": 210
    },
    "PreAugmentOptimizer.update_batch_size": {
      "file": "isekaizen/core/optimizer/pre_augment_optimizer.py",
      "class": "PreAugmentOptimizer",
      "start_line": 210,
      "end_line": 256
    },
    "PreAugmentOptimizer.get_optimal_batch_size": {
      "file": "isekaizen/core/optimizer/pre_augment_optimizer.py",
      "class": "PreAugmentOptimizer",
      "start_line": 256,
      "end_line": 302
    },
    "RiskPattern.__init__": {
      "file": "isekaizen/core/refactored/risk_aware_optimizer.py",
      "class": "RiskPattern",
      "start_line": 31,
      "end_line": 40
    },
    "RiskPattern.update_mitigation": {
      "file": "isekaizen/core/refactored/risk_aware_optimizer.py",
      "class": "RiskPattern",
      "start_line": 40,
      "end_line": 47
    },
    "RiskPattern.to_dict": {
      "file": "isekaizen/core/refactored/risk_aware_optimizer.py",
      "class": "RiskPattern",
      "start_line": 47,
      "end_line": 58
    },
    "PatternRecognitionTracker._extract_example_patterns": {
      "file": "isekaizen/core/refactored/risk_aware_optimizer.py",
      "class": "PatternRecognitionTracker",
      "start_line": 112,
      "end_line": 135
    },
    "PatternRecognitionTracker.update_recognition": {
      "file": "isekaizen/core/refactored/risk_aware_optimizer.py",
      "class": "PatternRecognitionTracker",
      "start_line": 135,
      "end_line": 158
    },
    "PatternRecognitionTracker.update_batch_recognition": {
      "file": "isekaizen/core/refactored/risk_aware_optimizer.py",
      "class": "PatternRecognitionTracker",
      "start_line": 158,
      "end_line": 170
    },
    "PatternRecognitionTracker._get_pattern_type": {
      "file": "isekaizen/core/refactored/risk_aware_optimizer.py",
      "class": "PatternRecognitionTracker",
      "start_line": 170,
      "end_line": 195
    },
    "PatternRecognitionTracker.get_preferred_pattern_recognition_rate": {
      "file": "isekaizen/core/refactored/risk_aware_optimizer.py",
      "class": "PatternRecognitionTracker",
      "start_line": 208,
      "end_line": 226
    },
    "PatternRecognitionTracker.get_challenging_pattern_recognition_rate": {
      "file": "isekaizen/core/refactored/risk_aware_optimizer.py",
      "class": "PatternRecognitionTracker",
      "start_line": 226,
      "end_line": 244
    },
    "PatternRecognitionTracker.snapshot_recognition_stats": {
      "file": "isekaizen/core/refactored/risk_aware_optimizer.py",
      "class": "PatternRecognitionTracker",
      "start_line": 244,
      "end_line": 267
    },
    "RiskAssessmentTracker.__init__": {
      "file": "isekaizen/core/refactored/risk_aware_optimizer.py",
      "class": "RiskAssessmentTracker",
      "start_line": 275,
      "end_line": 318
    },
    "RiskAssessmentTracker._calculate_risk_thresholds": {
      "file": "isekaizen/core/refactored/risk_aware_optimizer.py",
      "class": "RiskAssessmentTracker",
      "start_line": 318,
      "end_line": 334
    },
    "RiskAssessmentTracker._extract_risk_patterns": {
      "file": "isekaizen/core/refactored/risk_aware_optimizer.py",
      "class": "RiskAssessmentTracker",
      "start_line": 335,
      "end_line": 392
    },
    "RiskAssessmentTracker.assess_risk": {
      "file": "isekaizen/core/refactored/risk_aware_optimizer.py",
      "class": "RiskAssessmentTracker",
      "start_line": 392,
      "end_line": 478
    },
    "RiskAssessmentTracker.update_mitigation_results": {
      "file": "isekaizen/core/refactored/risk_aware_optimizer.py",
      "class": "RiskAssessmentTracker",
      "start_line": 478,
      "end_line": 501
    },
    "RiskAssessmentTracker.get_current_risk_metrics": {
      "file": "isekaizen/core/refactored/risk_aware_optimizer.py",
      "class": "RiskAssessmentTracker",
      "start_line": 501,
      "end_line": 516
    },
    "RiskAssessmentTracker.snapshot_risk_metrics": {
      "file": "isekaizen/core/refactored/risk_aware_optimizer.py",
      "class": "RiskAssessmentTracker",
      "start_line": 516,
      "end_line": 536
    },
    "RiskAssessmentTracker.calculate_mitigation_adjustment": {
      "file": "isekaizen/core/refactored/risk_aware_optimizer.py",
      "class": "RiskAssessmentTracker",
      "start_line": 536,
      "end_line": 572
    },
    "RiskAwarePatternIsekaiZen.__init__": {
      "file": "isekaizen/core/refactored/risk_aware_optimizer.py",
      "class": "RiskAwarePatternIsekaiZen",
      "start_line": 581,
      "end_line": 641
    },
    "RiskAwarePatternIsekaiZen.update_with_pattern_recognition": {
      "file": "isekaizen/core/refactored/risk_aware_optimizer.py",
      "class": "RiskAwarePatternIsekaiZen",
      "start_line": 641,
      "end_line": 671
    },
    "RiskAwarePatternIsekaiZen.update_with_batch_results": {
      "file": "isekaizen/core/refactored/risk_aware_optimizer.py",
      "class": "RiskAwarePatternIsekaiZen",
      "start_line": 671,
      "end_line": 694
    },
    "RiskAwarePatternIsekaiZen._update_batch_preferences": {
      "file": "isekaizen/core/refactored/risk_aware_optimizer.py",
      "class": "RiskAwarePatternIsekaiZen",
      "start_line": 694,
      "end_line": 745
    },
    "RiskAwarePatternIsekaiZen.adjust_batch_size_for_patterns": {
      "file": "isekaizen/core/refactored/risk_aware_optimizer.py",
      "class": "RiskAwarePatternIsekaiZen",
      "start_line": 745,
      "end_line": 806
    },
    "RiskAwarePatternIsekaiZen.adjust_batch_size_for_risk": {
      "file": "isekaizen/core/refactored/risk_aware_optimizer.py",
      "class": "RiskAwarePatternIsekaiZen",
      "start_line": 806,
      "end_line": 853
    },
    "RiskAwarePatternIsekaiZen.adjust_batch_size_for_stability": {
      "file": "isekaizen/core/refactored/risk_aware_optimizer.py",
      "class": "RiskAwarePatternIsekaiZen",
      "start_line": 853,
      "end_line": 905
    },
    "RiskAwarePatternIsekaiZen.get_optimal_batch_size": {
      "file": "isekaizen/core/refactored/risk_aware_optimizer.py",
      "class": "RiskAwarePatternIsekaiZen",
      "start_line": 905,
      "end_line": 970
    },
    "RiskAwarePatternIsekaiZen.evaluate": {
      "file": "isekaizen/core/refactored/risk_aware_optimizer.py",
      "class": "RiskAwarePatternIsekaiZen",
      "start_line": 970,
      "end_line": 1013
    },
    "RiskAwarePatternIsekaiZen.get_status": {
      "file": "isekaizen/core/refactored/risk_aware_optimizer.py",
      "class": "RiskAwarePatternIsekaiZen",
      "start_line": 1013,
      "end_line": 1038
    },
    "RiskAwarePatternIsekaiZen.train_epoch": {
      "file": "isekaizen/core/refactored/risk_aware_optimizer.py",
      "class": "RiskAwarePatternIsekaiZen",
      "start_line": 1038,
      "end_line": 1178
    },
    "SimplifiedRatioTracker.__init__": {
      "file": "isekaizen/core/optimizer/simplified_ratio_tracker.py",
      "class": "SimplifiedRatioTracker",
      "start_line": 23,
      "end_line": 31
    },
    "SimplifiedRatioTracker.update_train_test_ratio": {
      "file": "isekaizen/core/optimizer/simplified_ratio_tracker.py",
      "class": "SimplifiedRatioTracker",
      "start_line": 31,
      "end_line": 58
    },
    "SimplifiedRatioTracker.update_pattern_accuracies": {
      "file": "isekaizen/core/optimizer/simplified_ratio_tracker.py",
      "class": "SimplifiedRatioTracker",
      "start_line": 58,
      "end_line": 117
    },
    "SimplifiedRatioTracker.get_current_train_test_ratio": {
      "file": "isekaizen/core/optimizer/simplified_ratio_tracker.py",
      "class": "SimplifiedRatioTracker",
      "start_line": 117,
      "end_line": 123
    },
    "SimplifiedRatioTracker.get_current_risk_accuracy_ratio": {
      "file": "isekaizen/core/optimizer/simplified_ratio_tracker.py",
      "class": "SimplifiedRatioTracker",
      "start_line": 123,
      "end_line": 129
    },
    "SimplifiedRatioTracker.get_pattern_change_summary": {
      "file": "isekaizen/core/optimizer/simplified_ratio_tracker.py",
      "class": "SimplifiedRatioTracker",
      "start_line": 129,
      "end_line": 144
    },
    "SimplifiedRatioTracker.get_underperforming_patterns": {
      "file": "isekaizen/core/optimizer/simplified_ratio_tracker.py",
      "class": "SimplifiedRatioTracker",
      "start_line": 144,
      "end_line": 163
    },
    "SimplifiedPatternResponsiveOptimizer.__init__": {
      "file": "isekaizen/core/optimizer/simplified_responsive.py",
      "class": "SimplifiedPatternResponsiveOptimizer",
      "start_line": 32,
      "end_line": 87
    },
    "SimplifiedPatternResponsiveOptimizer.get_optimizer": {
      "file": "isekaizen/core/optimizer/simplified_responsive.py",
      "class": "SimplifiedPatternResponsiveOptimizer",
      "start_line": 87,
      "end_line": 102
    },
    "SimplifiedPatternResponsiveOptimizer.should_adapt_patterns": {
      "file": "isekaizen/core/optimizer/simplified_responsive.py",
      "class": "SimplifiedPatternResponsiveOptimizer",
      "start_line": 102,
      "end_line": 140
    },
    "SimplifiedPatternResponsiveOptimizer.adapt_dataset": {
      "file": "isekaizen/core/optimizer/simplified_responsive.py",
      "class": "SimplifiedPatternResponsiveOptimizer",
      "start_line": 140,
      "end_line": 221
    },
    "SimplifiedPatternResponsiveOptimizer.get_optimal_batch_size": {
      "file": "isekaizen/core/optimizer/simplified_responsive.py",
      "class": "SimplifiedPatternResponsiveOptimizer",
      "start_line": 222,
      "end_line": 269
    },
    "SimplifiedPatternResponsiveOptimizer.update_with_epoch_metrics": {
      "file": "isekaizen/core/optimizer/simplified_responsive.py",
      "class": "SimplifiedPatternResponsiveOptimizer",
      "start_line": 269,
      "end_line": 307
    },
    "SimplifiedPatternResponsiveOptimizer.update_with_pattern_recognition": {
      "file": "isekaizen/core/optimizer/simplified_responsive.py",
      "class": "SimplifiedPatternResponsiveOptimizer",
      "start_line": 307,
      "end_line": 358
    },
    "IsekaiZenTrainer.__init__": {
      "file": "isekaizen/core/refactored/trainer.py",
      "class": "IsekaiZenTrainer",
      "start_line": 23,
      "end_line": 72
    },
    "IsekaiZenTrainer.set_batch_optimizer": {
      "file": "isekaizen/core/refactored/trainer.py",
      "class": "IsekaiZenTrainer",
      "start_line": 72,
      "end_line": 81
    },
    "IsekaiZenTrainer.train_epoch": {
      "file": "isekaizen/core/refactored/trainer.py",
      "class": "IsekaiZenTrainer",
      "start_line": 81,
      "end_line": 248
    },
    "IsekaiZenTrainer.evaluate": {
      "file": "isekaizen/core/refactored/trainer.py",
      "class": "IsekaiZenTrainer",
      "start_line": 248,
      "end_line": 297
    },
    "IsekaiZenTrainer.train": {
      "file": "isekaizen/core/refactored/trainer.py",
      "class": "IsekaiZenTrainer",
      "start_line": 298,
      "end_line": 403
    },
    "IsekaiZenTrainer.save_model": {
      "file": "isekaizen/core/refactored/trainer.py",
      "class": "IsekaiZenTrainer",
      "start_line": 403,
      "end_line": 418
    },
    "IsekaiZenTrainer.load_model": {
      "file": "isekaizen/core/refactored/trainer.py",
      "class": "IsekaiZenTrainer",
      "start_line": 418,
      "end_line": 435
    },
    "PatternTracker.__init__": {
      "file": "isekaizen/core/pattern/tracking.py",
      "class": "PatternTracker",
      "start_line": 63,
      "end_line": 90
    },
    "PatternTracker._initialize_from_pattern_map": {
      "file": "isekaizen/core/pattern/tracking.py",
      "class": "PatternTracker",
      "start_line": 90,
      "end_line": 119
    },
    "PatternTracker.update_from_batch": {
      "file": "isekaizen/core/pattern/tracking.py",
      "class": "PatternTracker",
      "start_line": 119,
      "end_line": 192
    },
    "PatternTracker._recalculate_metrics": {
      "file": "isekaizen/core/pattern/tracking.py",
      "class": "PatternTracker",
      "start_line": 192,
      "end_line": 227
    },
    "PatternTracker.end_epoch": {
      "file": "isekaizen/core/pattern/tracking.py",
      "class": "PatternTracker",
      "start_line": 227,
      "end_line": 269
    },
    "PatternTracker.get_pattern_accuracies": {
      "file": "isekaizen/core/pattern/tracking.py",
      "class": "PatternTracker",
      "start_line": 270,
      "end_line": 279
    },
    "PatternTracker.get_pattern_risks": {
      "file": "isekaizen/core/pattern/tracking.py",
      "class": "PatternTracker",
      "start_line": 279,
      "end_line": 288
    },
    "PatternTracker.update_accuracy": {
      "file": "isekaizen/core/pattern/tracking.py",
      "class": "PatternTracker",
      "start_line": 288,
      "end_line": 311
    },
    "PatternTracker.get_unified_risk_accuracy_ratios": {
      "file": "isekaizen/core/pattern/tracking.py",
      "class": "PatternTracker",
      "start_line": 311,
      "end_line": 334
    },
    "BaseSpecialist.process_input": {
      "file": "isekaizen/core/specialists/base.py",
      "class": "BaseSpecialist",
      "start_line": 24,
      "end_line": 28
    },
    "BaseSpecialist.update_metrics": {
      "file": "isekaizen/core/specialists/base.py",
      "class": "BaseSpecialist",
      "start_line": 28,
      "end_line": 49
    },
    "SentimentSpecialist._analyze_text_sentiment": {
      "file": "isekaizen/core/specialists/sentiment.py",
      "class": "SentimentSpecialist",
      "start_line": 76,
      "end_line": 132
    },
    "SentimentSpecialist.process_input": {
      "file": "isekaizen/core/specialists/sentiment.py",
      "class": "SentimentSpecialist",
      "start_line": 202,
      "end_line": 299
    },
    "TextSpecialist.process_input": {
      "file": "isekaizen/core/specialists/text.py",
      "class": "TextSpecialist",
      "start_line": 125,
      "end_line": 206
    },
    "TierBoundaries.__init__": {
      "file": "isekaizen/core/tier_management/tier_manager.py",
      "class": "TierBoundaries",
      "start_line": 35,
      "end_line": 49
    },
    "TierBoundaries.validate_boundaries": {
      "file": "isekaizen/core/tier_management/tier_manager.py",
      "class": "TierBoundaries",
      "start_line": 50,
      "end_line": 65
    },
    "TierBoundaries.from_system_load": {
      "file": "isekaizen/core/tier_management/tier_manager.py",
      "class": "TierBoundaries",
      "start_line": 66,
      "end_line": 82
    },
    "TierBoundaries.get_tier_for_priority": {
      "file": "isekaizen/core/tier_management/tier_manager.py",
      "class": "TierBoundaries",
      "start_line": 82,
      "end_line": 99
    },
    "TierComponent.__init__": {
      "file": "isekaizen/core/tier_management/tier_manager.py",
      "class": "TierComponent",
      "start_line": 110,
      "end_line": 136
    },
    "TierComponent.set_priority": {
      "file": "isekaizen/core/tier_management/tier_manager.py",
      "class": "TierComponent",
      "start_line": 136,
      "end_line": 150
    },
    "TierComponent.execute": {
      "file": "isekaizen/core/tier_management/tier_manager.py",
      "class": "TierComponent",
      "start_line": 150,
      "end_line": 170
    },
    "TierManager.__init__": {
      "file": "isekaizen/core/tier_management/tier_manager.py",
      "class": "TierManager",
      "start_line": 180,
      "end_line": 216
    },
    "TierManager.add_component": {
      "file": "isekaizen/core/tier_management/tier_manager.py",
      "class": "TierManager",
      "start_line": 216,
      "end_line": 246
    },
    "TierManager.remove_component": {
      "file": "isekaizen/core/tier_management/tier_manager.py",
      "class": "TierManager",
      "start_line": 246,
      "end_line": 274
    },
    "TierManager.update_boundaries": {
      "file": "isekaizen/core/tier_management/tier_manager.py",
      "class": "TierManager",
      "start_line": 274,
      "end_line": 297
    },
    "TierManager._reassign_components": {
      "file": "isekaizen/core/tier_management/tier_manager.py",
      "class": "TierManager",
      "start_line": 297,
      "end_line": 324
    },
    "TierManager.allocate_resources": {
      "file": "isekaizen/core/tier_management/tier_manager.py",
      "class": "TierManager",
      "start_line": 324,
      "end_line": 375
    },
    "TierManager._calculate_tier_budgets": {
      "file": "isekaizen/core/tier_management/tier_manager.py",
      "class": "TierManager",
      "start_line": 375,
      "end_line": 422
    },
    "TierManager._allocate_tier_resources": {
      "file": "isekaizen/core/tier_management/tier_manager.py",
      "class": "TierManager",
      "start_line": 423,
      "end_line": 473
    },
    "TierManager.execute_tier": {
      "file": "isekaizen/core/tier_management/tier_manager.py",
      "class": "TierManager",
      "start_line": 473,
      "end_line": 506
    },
    "TierManager.execute_all": {
      "file": "isekaizen/core/tier_management/tier_manager.py",
      "class": "TierManager",
      "start_line": 506,
      "end_line": 537
    },
    "TierManager.get_tier_components": {
      "file": "isekaizen/core/tier_management/tier_manager.py",
      "class": "TierManager",
      "start_line": 537,
      "end_line": 554
    },
    "TierManager.update_component_priority": {
      "file": "isekaizen/core/tier_management/tier_manager.py",
      "class": "TierManager",
      "start_line": 554,
      "end_line": 600
    },
    "EarlyStoppingCallback.__init__": {
      "file": "isekaizen/core/training/callbacks/early_stopping.py",
      "class": "EarlyStoppingCallback",
      "start_line": 32,
      "end_line": 63
    },
    "EarlyStoppingCallback.__call__": {
      "file": "isekaizen/core/training/callbacks/early_stopping.py",
      "class": "EarlyStoppingCallback",
      "start_line": 63,
      "end_line": 113
    },
    "ModelCheckpointCallback.__init__": {
      "file": "isekaizen/core/training/callbacks/model_checkpoint.py",
      "class": "ModelCheckpointCallback",
      "start_line": 33,
      "end_line": 69
    },
    "ModelCheckpointCallback.__call__": {
      "file": "isekaizen/core/training/callbacks/model_checkpoint.py",
      "class": "ModelCheckpointCallback",
      "start_line": 69,
      "end_line": 141
    },
    "UnifiedRatioTracker.__init__": {
      "file": "isekaizen/mediators/ratio/ratio_tracker.py",
      "class": "UnifiedRatioTracker",
      "start_line": 21,
      "end_line": 51
    },
    "UnifiedRatioTracker.calculate_unified_risk_accuracy_ratio": {
      "file": "isekaizen/core/optimizer/unified_ratio/ratio_tracker.py",
      "class": "UnifiedRatioTracker",
      "start_line": 33,
      "end_line": 60
    },
    "UnifiedRatioTracker.store_risk_accuracy_ratios": {
      "file": "isekaizen/core/optimizer/unified_ratio/ratio_tracker.py",
      "class": "UnifiedRatioTracker",
      "start_line": 60,
      "end_line": 75
    },
    "UnifiedRatioTracker.update_pattern_accuracies": {
      "file": "isekaizen/core/optimizer/unified_ratio/ratio_tracker.py",
      "class": "UnifiedRatioTracker",
      "start_line": 75,
      "end_line": 84
    },
    "UnifiedRatioTracker.get_average_ratio": {
      "file": "isekaizen/core/optimizer/unified_ratio/ratio_tracker.py",
      "class": "UnifiedRatioTracker",
      "start_line": 84,
      "end_line": 109
    },
    "UnifiedRatioTracker.get_pattern_ratio": {
      "file": "isekaizen/core/optimizer/unified_ratio/ratio_tracker.py",
      "class": "UnifiedRatioTracker",
      "start_line": 109,
      "end_line": 135
    },
    "UnifiedRatioTracker.get_pattern_risks": {
      "file": "isekaizen/core/optimizer/unified_ratio/ratio_tracker.py",
      "class": "UnifiedRatioTracker",
      "start_line": 135,
      "end_line": 144
    },
    "UnifiedRatioTracker.get_pattern_accuracies": {
      "file": "isekaizen/core/optimizer/unified_ratio/ratio_tracker.py",
      "class": "UnifiedRatioTracker",
      "start_line": 144,
      "end_line": 153
    },
    "UnifiedRatioTrainer._get_pattern_metrics": {
      "file": "isekaizen/core/training/trainer.py",
      "class": "UnifiedRatioTrainer",
      "start_line": 439,
      "end_line": 460
    },
    "UnifiedRatioTrainer._save_checkpoint_if_best": {
      "file": "isekaizen/core/training/trainer.py",
      "class": "UnifiedRatioTrainer",
      "start_line": 460,
      "end_line": 486
    },
    "UnifiedRatioTrainer._save_checkpoint": {
      "file": "isekaizen/core/training/trainer.py",
      "class": "UnifiedRatioTrainer",
      "start_line": 486,
      "end_line": 505
    },
    "UnifiedRatioTrainer.evaluate": {
      "file": "isekaizen/core/training/trainer.py",
      "class": "UnifiedRatioTrainer",
      "start_line": 505,
      "end_line": 527
    },
    "UnifiedRatioTrainer.save_model": {
      "file": "isekaizen/core/training/trainer.py",
      "class": "UnifiedRatioTrainer",
      "start_line": 528,
      "end_line": 551
    },
    "UnifiedRatioTrainer.load_checkpoint": {
      "file": "isekaizen/core/training/trainer.py",
      "class": "UnifiedRatioTrainer",
      "start_line": 551,
      "end_line": 591
    },
    "PatternRiskAccuracyAdapter.__init__": {
      "file": "isekaizen/core/optimizer/risk_accuracy/pattern_adapter.py",
      "class": "PatternRiskAccuracyAdapter",
      "start_line": 25,
      "end_line": 69
    },
    "PatternRiskAccuracyAdapter.should_adapt_dataset": {
      "file": "isekaizen/core/optimizer/risk_accuracy/pattern_adapter.py",
      "class": "PatternRiskAccuracyAdapter",
      "start_line": 69,
      "end_line": 80
    },
    "PatternRiskAccuracyAdapter.update_with_batch_results": {
      "file": "isekaizen/core/optimizer/risk_accuracy/pattern_adapter.py",
      "class": "PatternRiskAccuracyAdapter",
      "start_line": 81,
      "end_line": 91
    },
    "PatternRiskAccuracyAdapter.update_with_epoch_results": {
      "file": "isekaizen/core/optimizer/risk_accuracy/pattern_adapter.py",
      "class": "PatternRiskAccuracyAdapter",
      "start_line": 91,
      "end_line": 101
    },
    "PatternRiskAccuracyAdapter.adapt_dataset": {
      "file": "isekaizen/core/optimizer/risk_accuracy/pattern_adapter.py",
      "class": "PatternRiskAccuracyAdapter",
      "start_line": 101,
      "end_line": 195
    },
    "PatternRiskAccuracyAdapter.get_status": {
      "file": "isekaizen/core/optimizer/risk_accuracy/pattern_adapter.py",
      "class": "PatternRiskAccuracyAdapter",
      "start_line": 196,
      "end_line": 211
    },
    "PatternRiskAccuracyTracker.take_snapshot": {
      "file": "isekaizen/core/optimizer/risk_accuracy/pattern_risk_accuracy_tracker.py",
      "class": "PatternRiskAccuracyTracker",
      "start_line": 187,
      "end_line": 217
    },
    "PatternRiskAccuracyTracker.get_overall_accuracy": {
      "file": "isekaizen/core/optimizer/risk_accuracy/pattern_risk_accuracy_tracker.py",
      "class": "PatternRiskAccuracyTracker",
      "start_line": 272,
      "end_line": 301
    },
    "PatternRiskAccuracyTracker.get_preferred_patterns_metrics": {
      "file": "isekaizen/core/optimizer/risk_accuracy/pattern_risk_accuracy_tracker.py",
      "class": "PatternRiskAccuracyTracker",
      "start_line": 301,
      "end_line": 337
    },
    "PatternRiskAccuracyTracker.get_challenging_patterns_metrics": {
      "file": "isekaizen/core/optimizer/risk_accuracy/pattern_risk_accuracy_tracker.py",
      "class": "PatternRiskAccuracyTracker",
      "start_line": 338,
      "end_line": 374
    },
    "PatternRiskAccuracyTracker.get_status": {
      "file": "isekaizen/core/optimizer/risk_accuracy/pattern_risk_accuracy_tracker.py",
      "class": "PatternRiskAccuracyTracker",
      "start_line": 375,
      "end_line": 391
    },
    "RiskAccuracyOptimizer.__init__": {
      "file": "isekaizen/core/optimizer/risk_accuracy/risk_accuracy_optimizer.py",
      "class": "RiskAccuracyOptimizer",
      "start_line": 29,
      "end_line": 94
    },
    "RiskAccuracyOptimizer.update_with_batch_results": {
      "file": "isekaizen/core/optimizer/risk_accuracy/risk_accuracy_optimizer.py",
      "class": "RiskAccuracyOptimizer",
      "start_line": 94,
      "end_line": 104
    },
    "RiskAccuracyOptimizer.update_with_epoch_metrics": {
      "file": "isekaizen/core/optimizer/risk_accuracy/risk_accuracy_optimizer.py",
      "class": "RiskAccuracyOptimizer",
      "start_line": 104,
      "end_line": 123
    },
    "RiskAccuracyOptimizer.should_adapt_patterns": {
      "file": "isekaizen/core/optimizer/risk_accuracy/risk_accuracy_optimizer.py",
      "class": "RiskAccuracyOptimizer",
      "start_line": 123,
      "end_line": 132
    },
    "RiskAccuracyOptimizer.adapt_dataset": {
      "file": "isekaizen/core/optimizer/risk_accuracy/risk_accuracy_optimizer.py",
      "class": "RiskAccuracyOptimizer",
      "start_line": 132,
      "end_line": 144
    },
    "RiskAccuracyOptimizer.adjust_batch_size_for_risk": {
      "file": "isekaizen/core/optimizer/risk_accuracy/risk_accuracy_optimizer.py",
      "class": "RiskAccuracyOptimizer",
      "start_line": 144,
      "end_line": 184
    },
    "RiskAccuracyOptimizer.adjust_batch_size_for_stability": {
      "file": "isekaizen/core/optimizer/risk_accuracy/risk_accuracy_optimizer.py",
      "class": "RiskAccuracyOptimizer",
      "start_line": 184,
      "end_line": 214
    },
    "RiskAccuracyOptimizer.get_optimal_batch_size": {
      "file": "isekaizen/core/optimizer/risk_accuracy/risk_accuracy_optimizer.py",
      "class": "RiskAccuracyOptimizer",
      "start_line": 214,
      "end_line": 253
    },
    "RiskAccuracyOptimizer.get_status": {
      "file": "isekaizen/core/optimizer/risk_accuracy/risk_accuracy_optimizer.py",
      "class": "RiskAccuracyOptimizer",
      "start_line": 253,
      "end_line": 279
    },
    "PatternDataMediator.initialize": {
      "file": "isekaizen/mediators/pattern_data_mediator/pattern_data_mediator.py",
      "class": "PatternDataMediator",
      "start_line": 51,
      "end_line": 64
    },
    "PatternDataMediator._extract_pattern_types": {
      "file": "isekaizen/mediators/pattern/data_mediator.py",
      "class": "PatternDataMediator",
      "start_line": 66,
      "end_line": 81
    },
    "PatternDataMediator.get_pattern_types": {
      "file": "isekaizen/mediators/pattern/data_mediator.py",
      "class": "PatternDataMediator",
      "start_line": 81,
      "end_line": 85
    },
    "PatternDataMediator.clear_cache": {
      "file": "isekaizen/mediators/pattern/data_mediator.py",
      "class": "PatternDataMediator",
      "start_line": 244,
      "end_line": 258
    },
    "PatternDataMediator.get_metrics": {
      "file": "isekaizen/mediators/pattern/data_mediator.py",
      "class": "PatternDataMediator",
      "start_line": 258,
      "end_line": 273
    },
    "PatternDataMediator._estimate_memory_usage": {
      "file": "isekaizen/mediators/pattern/data_mediator.py",
      "class": "PatternDataMediator",
      "start_line": 273,
      "end_line": 288
    },
    "PatternEquilibriumTracker.initialize": {
      "file": "isekaizen/mediators/ratio/equilibrium_mediator.py",
      "class": "PatternEquilibriumTracker",
      "start_line": 58,
      "end_line": 67
    },
    "PatternEquilibriumTracker._calculate_initial_bounds": {
      "file": "isekaizen/mediators/ratio/equilibrium_mediator.py",
      "class": "PatternEquilibriumTracker",
      "start_line": 67,
      "end_line": 102
    },
    "PatternEquilibriumTracker.update_accuracy": {
      "file": "isekaizen/mediators/ratio/equilibrium_mediator.py",
      "class": "PatternEquilibriumTracker",
      "start_line": 102,
      "end_line": 148
    },
    "PatternEquilibriumTracker.adjust_bounds": {
      "file": "isekaizen/mediators/ratio/equilibrium_mediator.py",
      "class": "PatternEquilibriumTracker",
      "start_line": 148,
      "end_line": 197
    },
    "PatternEquilibriumTracker.get_bound_status_history": {
      "file": "isekaizen/mediators/ratio/equilibrium_mediator.py",
      "class": "PatternEquilibriumTracker",
      "start_line": 248,
      "end_line": 257
    },
    "PatternEquilibriumTracker.get_bound_adjustment_history": {
      "file": "isekaizen/mediators/ratio/equilibrium_mediator.py",
      "class": "PatternEquilibriumTracker",
      "start_line": 257,
      "end_line": 266
    },
    "PatternEquilibriumTracker.end_epoch": {
      "file": "isekaizen/mediators/ratio/equilibrium_mediator.py",
      "class": "PatternEquilibriumTracker",
      "start_line": 266,
      "end_line": 281
    },
    "PatternEquilibriumTracker._cleanup_old_epochs": {
      "file": "isekaizen/mediators/ratio/equilibrium_mediator.py",
      "class": "PatternEquilibriumTracker",
      "start_line": 281,
      "end_line": 304
    },
    "PatternEquilibriumTracker.clear_cache": {
      "file": "isekaizen/mediators/ratio/equilibrium_mediator.py",
      "class": "PatternEquilibriumTracker",
      "start_line": 304,
      "end_line": 317
    },
    "PatternEquilibriumTracker.get_metrics": {
      "file": "isekaizen/mediators/ratio/equilibrium_mediator.py",
      "class": "PatternEquilibriumTracker",
      "start_line": 317,
      "end_line": 341
    },
    "UnifiedRatioTracker.initialize": {
      "file": "isekaizen/mediators/ratio/ratio_tracker.py",
      "class": "UnifiedRatioTracker",
      "start_line": 52,
      "end_line": 62
    },
    "UnifiedRatioTracker._extract_pattern_types": {
      "file": "isekaizen/mediators/ratio/ratio_tracker.py",
      "class": "UnifiedRatioTracker",
      "start_line": 62,
      "end_line": 77
    },
    "UnifiedRatioTracker.update_ratios": {
      "file": "isekaizen/mediators/ratio/ratio_tracker.py",
      "class": "UnifiedRatioTracker",
      "start_line": 77,
      "end_line": 112
    },
    "UnifiedRatioTracker.update_accuracy": {
      "file": "isekaizen/mediators/ratio/ratio_tracker.py",
      "class": "UnifiedRatioTracker",
      "start_line": 112,
      "end_line": 132
    },
    "UnifiedRatioTracker.get_ratios": {
      "file": "isekaizen/mediators/ratio/ratio_tracker.py",
      "class": "UnifiedRatioTracker",
      "start_line": 132,
      "end_line": 147
    },
    "UnifiedRatioTracker.get_accuracy": {
      "file": "isekaizen/mediators/ratio/ratio_tracker.py",
      "class": "UnifiedRatioTracker",
      "start_line": 147,
      "end_line": 162
    },
    "UnifiedRatioTracker.end_epoch": {
      "file": "isekaizen/mediators/ratio/ratio_tracker.py",
      "class": "UnifiedRatioTracker",
      "start_line": 162,
      "end_line": 177
    },
    "UnifiedRatioTracker._cleanup_old_epochs": {
      "file": "isekaizen/mediators/ratio/ratio_tracker.py",
      "class": "UnifiedRatioTracker",
      "start_line": 177,
      "end_line": 200
    },
    "UnifiedRatioTracker.clear_cache": {
      "file": "isekaizen/mediators/ratio/ratio_tracker.py",
      "class": "UnifiedRatioTracker",
      "start_line": 200,
      "end_line": 213
    },
    "UnifiedRatioTracker.get_metrics": {
      "file": "isekaizen/mediators/ratio/ratio_tracker.py",
      "class": "UnifiedRatioTracker",
      "start_line": 213,
      "end_line": 227
    },
    "VisionAugmentationMediator.__init__": {
      "file": "isekaizen/mediators/augmentation/specialized/vision_mediator.py",
      "class": "VisionAugmentationMediator",
      "start_line": 28,
      "end_line": 66
    },
    "VisionAugmentationMediator.initialize": {
      "file": "isekaizen/mediators/augmentation/specialized/vision_mediator.py",
      "class": "VisionAugmentationMediator",
      "start_line": 67,
      "end_line": 82
    },
    "VisionAugmentationMediator._detect_image_properties": {
      "file": "isekaizen/mediators/augmentation/specialized/vision_mediator.py",
      "class": "VisionAugmentationMediator",
      "start_line": 82,
      "end_line": 123
    },
    "VisionAugmentationMediator._init_vision_transformations": {
      "file": "isekaizen/mediators/augmentation/specialized/vision_mediator.py",
      "class": "VisionAugmentationMediator",
      "start_line": 123,
      "end_line": 165
    },
    "VisionAugmentationMediator.get_augmentation_for_pattern": {
      "file": "isekaizen/mediators/augmentation/specialized/vision_mediator.py",
      "class": "VisionAugmentationMediator",
      "start_line": 165,
      "end_line": 217
    },
    "VisionAugmentationMediator.clear_cache": {
      "file": "isekaizen/mediators/augmentation/specialized/vision_mediator.py",
      "class": "VisionAugmentationMediator",
      "start_line": 217,
      "end_line": 223
    },
    "VisionAugmentationMediator.get_metrics": {
      "file": "isekaizen/mediators/augmentation/specialized/vision_mediator.py",
      "class": "VisionAugmentationMediator",
      "start_line": 223,
      "end_line": 238
    },
    "ModelSwapManager.__init__": {
      "file": "isekaizen/research/model_swapping/model_swap_manager.py",
      "class": "ModelSwapManager",
      "start_line": 41,
      "end_line": 76
    },
    "ModelSwapManager.swap_model": {
      "file": "isekaizen/research/model_swapping/model_swap_manager.py",
      "class": "ModelSwapManager",
      "start_line": 76,
      "end_line": 202
    },
    "ModelSwapManager.check_and_swap_model": {
      "file": "isekaizen/research/model_swapping/model_swap_manager.py",
      "class": "ModelSwapManager",
      "start_line": 202,
      "end_line": 293
    },
    "ModelSwapManager._get_model_size_category": {
      "file": "isekaizen/research/model_swapping/model_swap_manager.py",
      "class": "ModelSwapManager",
      "start_line": 293,
      "end_line": 312
    },
    "ModelSwapManager._get_next_model_size": {
      "file": "isekaizen/research/model_swapping/model_swap_manager.py",
      "class": "ModelSwapManager",
      "start_line": 312,
      "end_line": 351
    },
    "EVENaturalWeights.get_learning_rate_history": {
      "file": "isekaizen/optimizers/eve/base.py",
      "class": "EVENaturalWeights",
      "start_line": 165,
      "end_line": 174
    },
    "EVENaturalWeights.get_state_history": {
      "file": "isekaizen/optimizers/eve/base.py",
      "class": "EVENaturalWeights",
      "start_line": 174,
      "end_line": 183
    },
    "EVENaturalWeights.store_state_snapshot": {
      "file": "isekaizen/optimizers/eve/base.py",
      "class": "EVENaturalWeights",
      "start_line": 183,
      "end_line": 195
    },
    "EVENaturalWeights.restore_base_learning_rate": {
      "file": "isekaizen/optimizers/eve/base.py",
      "class": "EVENaturalWeights",
      "start_line": 195,
      "end_line": 201
    },
    "LRBoundaryCalculator.__init__": {
      "file": "isekaizen/optimizers/lr_boundary/lr_boundary_calculator.py",
      "class": "LRBoundaryCalculator",
      "start_line": 27,
      "end_line": 50
    },
    "LRBoundaryCalculator._initialize_pattern_factors": {
      "file": "isekaizen/optimizers/lr_boundary/lr_boundary_calculator.py",
      "class": "LRBoundaryCalculator",
      "start_line": 50,
      "end_line": 118
    },
    "LRBoundaryCalculator.calculate_optimal_lr": {
      "file": "isekaizen/optimizers/lr_boundary/lr_boundary_calculator.py",
      "class": "LRBoundaryCalculator",
      "start_line": 118,
      "end_line": 159
    },
    "LRBoundaryCalculator._calculate_lr_adjustment_from_ratio": {
      "file": "isekaizen/optimizers/lr_boundary/lr_boundary_calculator.py",
      "class": "LRBoundaryCalculator",
      "start_line": 159,
      "end_line": 183
    },
    "LRBoundaryCalculator._calculate_pattern_adjustment": {
      "file": "isekaizen/optimizers/lr_boundary/lr_boundary_calculator.py",
      "class": "LRBoundaryCalculator",
      "start_line": 183,
      "end_line": 199
    },
    "LRBoundaryCalculator.get_current_bounds": {
      "file": "isekaizen/optimizers/lr_boundary/lr_boundary_calculator.py",
      "class": "LRBoundaryCalculator",
      "start_line": 199,
      "end_line": 231
    },
    "LRBoundaryCalculator._calculate_pattern_bounds": {
      "file": "isekaizen/optimizers/lr_boundary/lr_boundary_calculator.py",
      "class": "LRBoundaryCalculator",
      "start_line": 231,
      "end_line": 250
    },
    "RiskAwareEVEOptimizer.__init__": {
      "file": "isekaizen/optimizers/eve/risk_aware.py",
      "class": "RiskAwareEVEOptimizer",
      "start_line": 35,
      "end_line": 141
    },
    "RiskAwareEVEOptimizer._is_fibonacci_check_point": {
      "file": "isekaizen/optimizers/eve/risk_aware.py",
      "class": "RiskAwareEVEOptimizer",
      "start_line": 141,
      "end_line": 177
    },
    "RiskAwareEVEOptimizer.update_learning_rates_by_pattern": {
      "file": "isekaizen/optimizers/eve/risk_aware.py",
      "class": "RiskAwareEVEOptimizer",
      "start_line": 177,
      "end_line": 344
    },
    "RiskAwareEVEOptimizer.apply_pattern_weighted_lr": {
      "file": "isekaizen/optimizers/eve/risk_aware.py",
      "class": "RiskAwareEVEOptimizer",
      "start_line": 344,
      "end_line": 431
    },
    "RiskAwareEVEOptimizer.step": {
      "file": "isekaizen/optimizers/eve/risk_aware.py",
      "class": "RiskAwareEVEOptimizer",
      "start_line": 431,
      "end_line": 491
    },
    "RiskAwareEVEOptimizer.update_accuracy_metrics_with_epoch": {
      "file": "isekaizen/optimizers/eve/risk_aware.py",
      "class": "RiskAwareEVEOptimizer",
      "start_line": 491,
      "end_line": 570
    },
    "RiskAwareEVEOptimizer.get_pattern_lr_multipliers": {
      "file": "isekaizen/optimizers/eve/risk_aware.py",
      "class": "RiskAwareEVEOptimizer",
      "start_line": 570,
      "end_line": 579
    },
    "RiskAwareEVEOptimizer.get_pattern_lr_history": {
      "file": "isekaizen/optimizers/eve/risk_aware.py",
      "class": "RiskAwareEVEOptimizer",
      "start_line": 579,
      "end_line": 588
    },
    "RiskAwareEVEOptimizer.set_pattern_mediator": {
      "file": "isekaizen/optimizers/eve/risk_aware.py",
      "class": "RiskAwareEVEOptimizer",
      "start_line": 588,
      "end_line": 601
    },
    "EVEUnifiedRatio.get_pattern_accuracies": {
      "file": "isekaizen/optimizers/eve/unified_ratio.py",
      "class": "EVEUnifiedRatio",
      "start_line": 426,
      "end_line": 430
    },
    "StreamlinedBatchOptimizer.__init__": {
      "file": "isekaizen/pattern/unified/streamlined_optimizer.py",
      "class": "StreamlinedBatchOptimizer",
      "start_line": 36,
      "end_line": 91
    },
    "StreamlinedBatchOptimizer._run_hardware_diagnostics": {
      "file": "isekaizen/pattern/unified/streamlined_optimizer.py",
      "class": "StreamlinedBatchOptimizer",
      "start_line": 91,
      "end_line": 146
    },
    "StreamlinedBatchOptimizer.update_metrics": {
      "file": "isekaizen/pattern/unified/streamlined_optimizer.py",
      "class": "StreamlinedBatchOptimizer",
      "start_line": 147,
      "end_line": 178
    },
    "StreamlinedBatchOptimizer.get_optimal_batch_size": {
      "file": "isekaizen/pattern/unified/streamlined_optimizer.py",
      "class": "StreamlinedBatchOptimizer",
      "start_line": 178,
      "end_line": 241
    },
    "StreamlinedBatchOptimizer.update_batch_size": {
      "file": "isekaizen/pattern/unified/streamlined_optimizer.py",
      "class": "StreamlinedBatchOptimizer",
      "start_line": 243,
      "end_line": 270
    },
    "UnifiedPatternTracker.__init__": {
      "file": "isekaizen/pattern/unified/unified_tracker.py",
      "class": "UnifiedPatternTracker",
      "start_line": 34,
      "end_line": 128
    },
    "UnifiedPatternTracker.update_from_batch": {
      "file": "isekaizen/pattern/unified/unified_tracker.py",
      "class": "UnifiedPatternTracker",
      "start_line": 128,
      "end_line": 176
    },
    "UnifiedPatternTracker._get_patterns_for_samples": {
      "file": "isekaizen/pattern/unified/unified_tracker.py",
      "class": "UnifiedPatternTracker",
      "start_line": 176,
      "end_line": 218
    },
    "UnifiedPatternTracker._clear_cached_metrics": {
      "file": "isekaizen/pattern/unified/unified_tracker.py",
      "class": "UnifiedPatternTracker",
      "start_line": 218,
      "end_line": 224
    },
    "UnifiedPatternTracker._prune_history": {
      "file": "isekaizen/pattern/unified/unified_tracker.py",
      "class": "UnifiedPatternTracker",
      "start_line": 224,
      "end_line": 241
    },
    "UnifiedPatternTracker.get_pattern_accuracies": {
      "file": "isekaizen/pattern/unified/unified_tracker.py",
      "class": "UnifiedPatternTracker",
      "start_line": 241,
      "end_line": 272
    },
    "UnifiedPatternTracker.calculate_unified_ratio": {
      "file": "isekaizen/pattern/unified/unified_tracker.py",
      "class": "UnifiedPatternTracker",
      "start_line": 272,
      "end_line": 336
    },
    "UnifiedPatternTracker.calculate_pattern_ratios": {
      "file": "isekaizen/pattern/unified/unified_tracker.py",
      "class": "UnifiedPatternTracker",
      "start_line": 336,
      "end_line": 361
    },
    "UnifiedPatternTracker.calculate_equilibrium_bounds": {
      "file": "isekaizen/pattern/unified/unified_tracker.py",
      "class": "UnifiedPatternTracker",
      "start_line": 361,
      "end_line": 428
    },
    "UnifiedPatternTracker.update_equilibrium_status": {
      "file": "isekaizen/pattern/unified/unified_tracker.py",
      "class": "UnifiedPatternTracker",
      "start_line": 428,
      "end_line": 468
    },
    "UnifiedPatternTracker.get_patterns_outside_equilibrium": {
      "file": "isekaizen/pattern/unified/unified_tracker.py",
      "class": "UnifiedPatternTracker",
      "start_line": 468,
      "end_line": 496
    },
    "UnifiedPatternTracker.end_epoch": {
      "file": "isekaizen/pattern/unified/unified_tracker.py",
      "class": "UnifiedPatternTracker",
      "start_line": 497,
      "end_line": 512
    },
    "UnifiedPatternTracker.update_accuracy": {
      "file": "isekaizen/pattern/unified/unified_tracker.py",
      "class": "UnifiedPatternTracker",
      "start_line": 512,
      "end_line": 572
    },
    "UnifiedPatternTracker.get_risk_levels": {
      "file": "isekaizen/pattern/unified/unified_tracker.py",
      "class": "UnifiedPatternTracker",
      "start_line": 572,
      "end_line": 591
    },
    "ModelSwapManager.get_swap_history": {
      "file": "isekaizen/research/model_swapping/model_swap_manager.py",
      "class": "ModelSwapManager",
      "start_line": 351,
      "end_line": 360
    },
    "ModelSwapManager.load_model_fingerprint": {
      "file": "isekaizen/research/model_swapping/model_swap_manager.py",
      "class": "ModelSwapManager",
      "start_line": 360,
      "end_line": 374
    },
    "OptimizedTrainer.__init__": {
      "file": "isekaizen/trainer/optimized/optimized_trainer.py",
      "class": "OptimizedTrainer",
      "start_line": 38,
      "end_line": 208
    },
    "OptimizedTrainer.get_dataloader": {
      "file": "isekaizen/trainer/optimized/optimized_trainer.py",
      "class": "OptimizedTrainer",
      "start_line": 208,
      "end_line": 301
    },
    "OptimizedTrainer.train": {
      "file": "isekaizen/trainer/optimized/optimized_trainer.py",
      "class": "OptimizedTrainer",
      "start_line": 301,
      "end_line": 504
    },
    "OptimizedTrainer._train_epoch": {
      "file": "isekaizen/trainer/optimized/optimized_trainer.py",
      "class": "OptimizedTrainer",
      "start_line": 504,
      "end_line": 611
    },
    "OptimizedTrainer._validate": {
      "file": "isekaizen/trainer/optimized/optimized_trainer.py",
      "class": "OptimizedTrainer",
      "start_line": 611,
      "end_line": 657
    },
    "OptimizedTrainer.update_learning_rate_history": {
      "file": "isekaizen/trainer/optimized/optimized_trainer.py",
      "class": "OptimizedTrainer",
      "start_line": 657,
      "end_line": 666
    },
    "OptimizedTrainer.add_mediator_support_to_optimizer": {
      "file": "isekaizen/trainer/optimized/optimized_trainer.py",
      "class": "OptimizedTrainer",
      "start_line": 666,
      "end_line": 806
    },
    "OptimizedTrainer._run_mini_validation": {
      "file": "isekaizen/trainer/optimized/optimized_trainer.py",
      "class": "OptimizedTrainer",
      "start_line": 806,
      "end_line": 852
    },
    "PatternService.__init__": {
      "file": "isekaizen/trainer/optimized/optimized_trainer.py",
      "class": "PatternService",
      "start_line": 155,
      "end_line": 158
    },
    "PatternService.get_pattern_type": {
      "file": "isekaizen/trainer/optimized/optimized_trainer.py",
      "class": "PatternService",
      "start_line": 158,
      "end_line": 164
    },
    "TestMathematicalImplementation.test_cognitive_efficiency": {
      "file": "testing/integration/test_mathematical_implementation.py",
      "class": "TestMathematicalImplementation",
      "start_line": 33,
      "end_line": 74
    },
    "TestMathematicalImplementation.test_resource_allocation": {
      "file": "testing/integration/test_mathematical_implementation.py",
      "class": "TestMathematicalImplementation",
      "start_line": 74,
      "end_line": 128
    },
    "TestMathematicalImplementation.test_batch_optimization": {
      "file": "testing/integration/test_mathematical_implementation.py",
      "class": "TestMathematicalImplementation",
      "start_line": 128,
      "end_line": 173
    },
    "TestMathematicalImplementation.test_polling_optimization": {
      "file": "testing/integration/test_mathematical_implementation.py",
      "class": "TestMathematicalImplementation",
      "start_line": 173,
      "end_line": 221
    },
    "TestMathematicalImplementation.test_tier_management": {
      "file": "testing/integration/test_mathematical_implementation.py",
      "class": "TestMathematicalImplementation",
      "start_line": 221,
      "end_line": 301
    },
    "TestCognitiveEfficiency.test_cognitive_load_function": {
      "file": "testing/math_validation/test_cognitive_efficiency.py",
      "class": "TestCognitiveEfficiency",
      "start_line": 32,
      "end_line": 48
    },
    "TestCognitiveEfficiency.test_parallel_processing_penalty": {
      "file": "testing/math_validation/test_cognitive_efficiency.py",
      "class": "TestCognitiveEfficiency",
      "start_line": 48,
      "end_line": 65
    },
    "TestCognitiveEfficiency.test_cognitive_efficiency": {
      "file": "testing/math_validation/test_cognitive_efficiency.py",
      "class": "TestCognitiveEfficiency",
      "start_line": 65,
      "end_line": 81
    },
    "TestCognitiveEfficiency.test_extreme_values": {
      "file": "testing/math_validation/test_cognitive_efficiency.py",
      "class": "TestCognitiveEfficiency",
      "start_line": 81,
      "end_line": 95
    },
    "TestCognitiveEfficiency.test_value_range": {
      "file": "testing/math_validation/test_cognitive_efficiency.py",
      "class": "TestCognitiveEfficiency",
      "start_line": 95,
      "end_line": 111
    },
    "TestCognitiveEfficiency.test_parameter_sensitivity": {
      "file": "testing/math_validation/test_cognitive_efficiency.py",
      "class": "TestCognitiveEfficiency",
      "start_line": 111,
      "end_line": 138
    },
    "TestResourceAllocation.test_component_utility_function": {
      "file": "testing/math_validation/test_resource_allocation.py",
      "class": "TestResourceAllocation",
      "start_line": 31,
      "end_line": 47
    },
    "TestResourceAllocation.test_optimize_resource_allocation_simple": {
      "file": "testing/math_validation/test_resource_allocation.py",
      "class": "TestResourceAllocation",
      "start_line": 47,
      "end_line": 64
    },
    "TestResourceAllocation.test_optimize_resource_allocation_priority": {
      "file": "testing/math_validation/test_resource_allocation.py",
      "class": "TestResourceAllocation",
      "start_line": 64,
      "end_line": 84
    },
    "TestResourceAllocation.test_optimize_resource_allocation_min_requirements": {
      "file": "testing/math_validation/test_resource_allocation.py",
      "class": "TestResourceAllocation",
      "start_line": 84,
      "end_line": 101
    },
    "TestResourceAllocation.test_optimize_resource_allocation_insufficient": {
      "file": "testing/math_validation/test_resource_allocation.py",
      "class": "TestResourceAllocation",
      "start_line": 101,
      "end_line": 118
    },
    "TestResourceAllocation.test_optimize_resource_allocation_many_components": {
      "file": "testing/math_validation/test_resource_allocation.py",
      "class": "TestResourceAllocation",
      "start_line": 118,
      "end_line": 138
    },
    "TestResourceAllocation.test_optimize_resource_allocation_utility_parameters": {
      "file": "testing/math_validation/test_resource_allocation.py",
      "class": "TestResourceAllocation",
      "start_line": 138,
      "end_line": 159
    },
    "TestResourceAllocation.test_optimize_resource_allocation_zero_priority": {
      "file": "testing/math_validation/test_resource_allocation.py",
      "class": "TestResourceAllocation",
      "start_line": 159,
      "end_line": 178
    },
    "TestResourceAllocation.test_optimize_resource_allocation_edge_cases": {
      "file": "testing/math_validation/test_resource_allocation.py",
      "class": "TestResourceAllocation",
      "start_line": 178,
      "end_line": 196
    },
    "MockEquilibriumTracker.get_current_bounds": {
      "file": "tests/optimization/risk_aware_test.py",
      "class": "MockEquilibriumTracker",
      "start_line": 106,
      "end_line": 112
    },
    "MockEquilibriumTracker.get_patterns_below_min": {
      "file": "tests/optimization/risk_aware_test.py",
      "class": "MockEquilibriumTracker",
      "start_line": 113,
      "end_line": 116
    },
    "MockEquilibriumTracker.get_patterns_above_max": {
      "file": "tests/optimization/risk_aware_test.py",
      "class": "MockEquilibriumTracker",
      "start_line": 116,
      "end_line": 119
    },
    "EVEUnifiedRatioWithFibonacci.__init__": {
      "file": "utils/analysis/fibonacci-lr-implementation.py",
      "class": "EVEUnifiedRatioWithFibonacci",
      "start_line": 96,
      "end_line": 101
    },
    "EVEUnifiedRatioWithFibonacci.step": {
      "file": "utils/analysis/fibonacci-lr-implementation.py",
      "class": "EVEUnifiedRatioWithFibonacci",
      "start_line": 101,
      "end_line": 115
    },
    "EVEUnifiedRatioWithFibonacci.get_golden_ratio_factor": {
      "file": "utils/analysis/fibonacci-lr-implementation.py",
      "class": "EVEUnifiedRatioWithFibonacci",
      "start_line": 115,
      "end_line": 126
    }
  },
  "updated": "2025-05-05T12:28:38.818001"
}