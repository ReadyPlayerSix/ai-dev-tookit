{
  "path": "D:\\Projects\\isekaiZen\\machine-learning-optimizer\\benchmarks.old\\models\\src\\utils\\types.py",
  "imports": [
    {
      "name": "dataclasses.dataclass",
      "line": 4
    },
    {
      "name": "dataclasses.field",
      "line": 4
    },
    {
      "name": "enum.Enum",
      "line": 5
    },
    {
      "name": "typing.Dict",
      "line": 6
    },
    {
      "name": "typing.Any",
      "line": 6
    },
    {
      "name": "typing.Optional",
      "line": 6
    },
    {
      "name": "typing.Union",
      "line": 6
    },
    {
      "name": "typing.List",
      "line": 6
    },
    {
      "name": "numpy",
      "line": 7
    },
    {
      "name": "datetime.datetime",
      "line": 8
    }
  ],
  "classes": {
    "PatternType": {
      "start_line": 10,
      "end_line": 14,
      "methods": {},
      "class_variables": [
        {
          "name": "OPPORTUNITY",
          "line": 11
        },
        {
          "name": "RISK",
          "line": 12
        }
      ],
      "bases": [
        "Enum"
      ]
    },
    "DomainType": {
      "start_line": 14,
      "end_line": 19,
      "methods": {},
      "class_variables": [
        {
          "name": "VISUAL",
          "line": 15
        },
        {
          "name": "LINGUISTIC",
          "line": 16
        },
        {
          "name": "EMOTIONAL",
          "line": 17
        }
      ],
      "bases": [
        "Enum"
      ]
    },
    "SkillTree": {
      "start_line": 19,
      "end_line": 25,
      "methods": {},
      "class_variables": [
        {
          "name": "PATTERN_RECOGNITION",
          "line": 20
        },
        {
          "name": "RISK_ASSESSMENT",
          "line": 21
        },
        {
          "name": "INTUITION",
          "line": 22
        },
        {
          "name": "PATTERN_MEMORY",
          "line": 23
        }
      ],
      "bases": [
        "Enum"
      ]
    },
    "ProcessingStage": {
      "start_line": 25,
      "end_line": 33,
      "methods": {},
      "class_variables": [
        {
          "name": "INPUT",
          "line": 27
        },
        {
          "name": "TRANSLATION",
          "line": 28
        },
        {
          "name": "SEMANTIC",
          "line": 29
        },
        {
          "name": "PATTERN",
          "line": 30
        },
        {
          "name": "OUTPUT",
          "line": 31
        }
      ],
      "bases": [
        "Enum"
      ],
      "docstring": "Stages in the cortex-first processing pipeline"
    },
    "CortexFlowMetadata": {
      "start_line": 34,
      "end_line": 44,
      "methods": {},
      "class_variables": [],
      "bases": [],
      "docstring": "Metadata for tracking pattern flow through cortex"
    },
    "Pattern": {
      "start_line": 45,
      "end_line": 69,
      "methods": {
        "update_flow_stage": {
          "start_line": 61,
          "end_line": 69,
          "parameters": [
            {
              "name": "self"
            },
            {
              "name": "new_stage",
              "type": "ProcessingStage"
            }
          ],
          "return_type": null,
          "calls": [
            {
              "name": "self.flow_metadata.processing_history.append",
              "line": 64
            },
            {
              "name": "....isoformat",
              "line": 66
            },
            {
              "name": "datetime.now",
              "line": 66
            }
          ],
          "docstring": "Update pattern's position in cortex flow",
          "code_snippet": "    domain_data: Dict[str, Any] = field(default_factory=dict)\n\n    def update_flow_stage(self, new_stage: ProcessingStage, **kwargs):\n        \"\"\"Update pattern's position in cortex flow\"\"\"\n        self.flow_metadata.current_stage = new_stage\n        self.flow_metadata.processing_history.append({\n            \"stage\": new_stage,\n            \"timestamp\": datetime.now().isoformat(),\n            **kwargs\n        })\n\n@dataclass\nclass BatchMetadata:"
        }
      },
      "class_variables": [],
      "bases": [],
      "docstring": "Universal pattern representation with cortex flow tracking"
    },
    "BatchMetadata": {
      "start_line": 71,
      "end_line": 81,
      "methods": {},
      "class_variables": [],
      "bases": [],
      "docstring": "Metadata for batch processing"
    },
    "ResourceAllocation": {
      "start_line": 82,
      "end_line": 93,
      "methods": {},
      "class_variables": [],
      "bases": [],
      "docstring": "Resource allocation for pattern processing"
    },
    "ProcessingResult": {
      "start_line": 94,
      "end_line": 106,
      "methods": {},
      "class_variables": [],
      "bases": [],
      "docstring": "Result of pattern processing with resource tracking"
    },
    "RiskEvent": {
      "start_line": 107,
      "end_line": 119,
      "methods": {},
      "class_variables": [],
      "bases": [],
      "docstring": "Represents a single risk event with cortex flow tracking"
    },
    "ProcessingError": {
      "start_line": 119,
      "end_line": 126,
      "methods": {
        "__init__": {
          "start_line": 121,
          "end_line": 126,
          "parameters": [
            {
              "name": "self"
            },
            {
              "name": "message",
              "type": "str"
            },
            {
              "name": "stage",
              "type": "ProcessingStage"
            },
            {
              "name": "flow_id",
              "type": "str"
            }
          ],
          "return_type": null,
          "calls": [
            {
              "name": "....__init__",
              "line": 124
            },
            {
              "name": "super",
              "line": 124
            }
          ],
          "code_snippet": "class ProcessingError(Exception):\n    \"\"\"Custom exception for pattern processing errors\"\"\"\n    def __init__(self, message: str, stage: ProcessingStage, flow_id: str):\n        self.stage = stage\n        self.flow_id = flow_id\n        super().__init__(f\"Processing error at {stage.value}: {message}\")\n\nclass ResourceError(Exception):\n    \"\"\"Custom exception for resource allocation errors\"\"\"\n    def __init__(self, message: str, resource_type: str, requested: float, available: float):"
        }
      },
      "class_variables": [],
      "bases": [
        "Exception"
      ],
      "docstring": "Custom exception for pattern processing errors"
    },
    "ResourceError": {
      "start_line": 126,
      "end_line": 136,
      "methods": {
        "__init__": {
          "start_line": 128,
          "end_line": 136,
          "parameters": [
            {
              "name": "self"
            },
            {
              "name": "message",
              "type": "str"
            },
            {
              "name": "resource_type",
              "type": "str"
            },
            {
              "name": "requested",
              "type": "float"
            },
            {
              "name": "available",
              "type": "float"
            }
          ],
          "return_type": null,
          "calls": [
            {
              "name": "....__init__",
              "line": 132
            },
            {
              "name": "super",
              "line": 132
            }
          ],
          "code_snippet": "class ResourceError(Exception):\n    \"\"\"Custom exception for resource allocation errors\"\"\"\n    def __init__(self, message: str, resource_type: str, requested: float, available: float):\n        self.resource_type = resource_type\n        self.requested = requested\n        self.available = available\n        super().__init__(\n            f\"Resource error for {resource_type}: \"\n            f\"requested {requested}, available {available}. {message}\"\n        )"
        }
      },
      "class_variables": [],
      "bases": [
        "Exception"
      ],
      "docstring": "Custom exception for resource allocation errors"
    }
  },
  "functions": {},
  "constants": {}
}