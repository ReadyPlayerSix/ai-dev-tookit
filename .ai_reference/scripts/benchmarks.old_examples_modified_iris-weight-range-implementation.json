{
  "path": "D:\\Projects\\isekaiZen\\machine-learning-optimizer\\benchmarks.old\\examples\\modified\\iris-weight-range-implementation.py",
  "imports": [
    {
      "name": "isekaizen.optimizers.eve_unified_ratio.EVEUnifiedRatio",
      "line": 113
    }
  ],
  "classes": {},
  "functions": {
    "register_unified_ratio_optimizer": {
      "start_line": 2,
      "end_line": 73,
      "parameters": [
        {
          "name": "config_params"
        }
      ],
      "return_type": null,
      "calls": [
        {
          "name": "logger.info",
          "line": 65
        },
        {
          "name": "logger.info",
          "line": 66
        },
        {
          "name": "logger.info",
          "line": 67
        },
        {
          "name": "logger.info",
          "line": 68
        },
        {
          "name": "logger.info",
          "line": 71
        },
        {
          "name": "config_params.get",
          "line": 22
        },
        {
          "name": "config_params.get",
          "line": 23
        },
        {
          "name": "config_params.get",
          "line": 24
        },
        {
          "name": "config_params.get",
          "line": 25
        },
        {
          "name": "config_params.get",
          "line": 26
        },
        {
          "name": "config_params.get",
          "line": 27
        },
        {
          "name": "config_params.get",
          "line": 28
        },
        {
          "name": "config_params.get",
          "line": 29
        },
        {
          "name": "config_params.get",
          "line": 30
        },
        {
          "name": "....format",
          "line": 66
        },
        {
          "name": "....format",
          "line": 67
        },
        {
          "name": "....format",
          "line": 68
        },
        {
          "name": "logger.info",
          "line": 70
        },
        {
          "name": "....format",
          "line": 71
        }
      ],
      "docstring": "\n    Register the EVEUnifiedRatio optimizer in the available optimizers.\n    \n    Args:\n        config_params: Optional dictionary with configuration parameters\n    ",
      "code_snippet": "# In the register_unified_ratio_optimizer function, add a new option for iris:\ndef register_unified_ratio_optimizer(config_params=None):\n    \"\"\"\n    Register the EVEUnifiedRatio optimizer in the available optimizers.\n    \n    Args:\n        config_params: Optional dictionary with configuration parameters\n    \"\"\"\n    # Set default configuration values\n    debug_ratios = False\n    debug_bounds = False\n    weight_adjustment_range = \"default\"  # Default value (0.85-1.15)\n    weight_range_iris = False  # New option for dynamic weight range adjustment\n    lr_check_interval = 10  # Default value\n    lr_change_threshold = 0.005  # Default value\n    lr_log_threshold = 0.05  # Default value\n    use_equilibrium_bounds = True  # Default to use equilibrium bounds\n    fibonacci_intervals = None  # For Fibonacci-based sensitivity\n    \n    # Override with provided parameters if any\n    if config_params:\n        debug_ratios = config_params.get('debug_ratios', debug_ratios)\n        debug_bounds = config_params.get('debug_bounds', debug_bounds)\n        weight_adjustment_range = config_params.get('weight_adjustment_range', weight_adjustment_range)\n        weight_range_iris = config_params.get('weight_range_iris', weight_range_iris)  # Get iris option\n        lr_check_interval = config_params.get('lr_check_interval', lr_check_interval)\n        lr_change_threshold = config_params.get('lr_change_threshold', lr_change_threshold)\n        lr_log_threshold = config_params.get('lr_log_threshold', lr_log_threshold)\n        use_equilibrium_bounds = config_params.get('use_equilibrium_bounds', use_equilibrium_bounds)\n        fibonacci_intervals = config_params.get('fibonacci_intervals', None)\n    \n    # Create configuration for the unified ratio optimizer\n    unified_config = {\n        'default': {\n            'optimizer_class': EVEUnifiedRatio,\n            'optimizer_kwargs': {\n                'lr': 0.01,\n                'eps': 1e-8,\n                'base_confidence_threshold': 0.7,\n                'weight_decay': 0.0001,\n                'debug_ratios': debug_ratios,\n                'debug_bounds': debug_bounds,\n                'warmup_epochs': 1,  # Faster warmup\n                'weight_adjustment_range': weight_adjustment_range,\n                'weight_range_iris': weight_range_iris,  # Add iris option to kwargs\n                'lr_check_interval': lr_check_interval,\n                'lr_change_threshold': lr_change_threshold,\n                'lr_log_threshold': lr_log_threshold,\n                'use_equilibrium_bounds': use_equilibrium_bounds\n            },\n            'scheduler_class': optim.lr_scheduler.CosineAnnealingLR,\n            'scheduler_kwargs': {\n                'T_max': 200\n            }\n        }\n    }\n    \n    # If using Fibonacci intervals, we'll set them as an attribute on the optimizer after creation\n    if fibonacci_intervals:\n        unified_config['default']['optimizer_kwargs']['fibonacci_intervals'] = fibonacci_intervals\n    \n    # Update ALL_CONFIGS with the new optimizer\n    ALL_CONFIGS['eve_unified'] = unified_config\n    \n    logger.info(\"EVEUnifiedRatio optimizer registered successfully\")\n    logger.info(\"  Weight adjustment range: {}\".format(weight_adjustment_range))\n    logger.info(\"  Weight range iris: {}\".format(\"Enabled\" if weight_range_iris else \"Disabled\"))\n    logger.info(\"  LR sensitivity: check interval={}, threshold={:.4f}\".format(lr_check_interval, lr_change_threshold))\n    if fibonacci_intervals:\n        logger.info(\"  Using Fibonacci intervals for dynamic sensitivity\")\n    logger.info(\"  Using equilibrium bounds: {}\".format(use_equilibrium_bounds))\n\n# In the main function, modify the argparse to include the new option:\ndef main():\n    # Parse command line arguments"
    },
    "main": {
      "start_line": 161,
      "end_line": 168,
      "parameters": [],
      "return_type": null,
      "calls": [
        {
          "name": "patch_eve_unified_ratio",
          "line": 166
        }
      ],
      "code_snippet": "\n# Call the patch function in the main function before training starts\ndef main():\n    # ... existing code ...\n    \n    # Apply the iris patch to EVEUnifiedRatio if enabled\n    if args.weight_range_iris:\n        patch_eve_unified_ratio()\n    \n    # ... continue with the rest of the main function ..."
    },
    "patch_eve_unified_ratio": {
      "start_line": 109,
      "end_line": 160,
      "parameters": [],
      "return_type": null,
      "calls": [
        {
          "name": "logger.info",
          "line": 158
        },
        {
          "name": "original_calculate_natural_weight_adjustment",
          "line": 154
        },
        {
          "name": "hasattr",
          "line": 124
        },
        {
          "name": "hasattr",
          "line": 127
        },
        {
          "name": "self.pattern_mediator.get_pattern_accuracies",
          "line": 128
        },
        {
          "name": "pattern_accuracies.get",
          "line": 129
        },
        {
          "name": "logger.error",
          "line": 132
        },
        {
          "name": "RuntimeError",
          "line": 133
        },
        {
          "name": "self.equilibrium_tracker.get_patterns_above_max",
          "line": 137
        },
        {
          "name": "logger.info",
          "line": 148
        },
        {
          "name": "logger.info",
          "line": 149
        }
      ],
      "docstring": "\n    Apply runtime patch to EVEUnifiedRatio to support the weight_range_iris option.\n    ",
      "code_snippet": "# to modify the calculate_natural_weight_adjustment method:\n\ndef patch_eve_unified_ratio():\n    \"\"\"\n    Apply runtime patch to EVEUnifiedRatio to support the weight_range_iris option.\n    \"\"\"\n    from isekaizen.optimizers.eve_unified_ratio import EVEUnifiedRatio\n    \n    # Store the original method\n    original_calculate_natural_weight_adjustment = EVEUnifiedRatio.calculate_natural_weight_adjustment\n    \n    def patched_calculate_natural_weight_adjustment(self, pattern_type):\n        \"\"\"\n        Calculate weight adjustment with iris feature that dynamically adjusts range\n        when patterns violate their max bounds.\n        \"\"\"\n        # Check if iris feature is enabled\n        has_iris = hasattr(self, 'weight_range_iris') and self.weight_range_iris\n        \n        # Get pattern accuracy from mediator\n        if hasattr(self, 'pattern_mediator') and self.pattern_mediator is not None:\n            pattern_accuracies = self.pattern_mediator.get_pattern_accuracies()\n            pattern_accuracy = pattern_accuracies.get(pattern_type, 0.5)\n        else:\n            # This should never happen with the self-initializing mediator\n            logger.error(f\"Pattern mediator not available when calculating weight adjustment for {pattern_type}\")\n            raise RuntimeError(\"Pattern mediator not available. This should never happen with self-initializing mediator.\")\n        \n        # If iris is enabled, check for max bound violations to adjust range\n        if has_iris and self.use_equilibrium_bounds:\n            is_above_max = pattern_type in self.equilibrium_tracker.get_patterns_above_max()\n            \n            if is_above_max:\n                # Use wide range for more aggressive correction\n                min_adjust = 0.8\n                max_adjust = 1.2\n                \n                # Apply the more aggressive adjustment\n                adjustment = min_adjust\n                \n                if self.debug_bounds:\n                    logger.info(f\"  {pattern_type} has max bound violation - using iris mode with wider range\")\n                    logger.info(f\"  {pattern_type} weight adjustment: {adjustment:.3f} (with iris, above max bound)\")\n                \n                return adjustment\n        \n        # Continue with the original method for all other cases\n        return original_calculate_natural_weight_adjustment(self, pattern_type)\n    \n    # Apply the patch\n    EVEUnifiedRatio.calculate_natural_weight_adjustment = patched_calculate_natural_weight_adjustment\n    logger.info(\"Applied iris patch to EVEUnifiedRatio for dynamic weight range adjustment\")\n\n# Call the patch function in the main function before training starts\ndef main():\n    # ... existing code ..."
    }
  },
  "constants": {}
}