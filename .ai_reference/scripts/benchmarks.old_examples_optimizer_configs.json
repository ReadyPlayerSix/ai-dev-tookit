{
  "path": "D:\\Projects\\isekaiZen\\machine-learning-optimizer\\benchmarks.old\\examples\\optimizer_configs.py",
  "imports": [
    {
      "name": "torch.optim",
      "line": 8
    },
    {
      "name": "typing.Dict",
      "line": 9
    },
    {
      "name": "typing.Any",
      "line": 9
    },
    {
      "name": "typing.Callable",
      "line": 9
    },
    {
      "name": "typing.Tuple",
      "line": 9
    },
    {
      "name": "typing.List",
      "line": 9
    },
    {
      "name": "typing.Optional",
      "line": 9
    },
    {
      "name": "isekaizen.optimizers.eve.EVECore",
      "line": 10
    },
    {
      "name": "isekaizen.optimizers.eve.EVEPatternMomentum",
      "line": 10
    },
    {
      "name": "isekaizen.optimizers.eve.EVERiskAdaptive",
      "line": 10
    },
    {
      "name": "isekaizen.optimizers.eve.EVENaturalWeights",
      "line": 10
    }
  ],
  "classes": {},
  "functions": {
    "get_optimizer_config": {
      "start_line": 296,
      "end_line": 321,
      "parameters": [
        {
          "name": "optimizer_type",
          "type": "str"
        },
        {
          "name": "variant",
          "type": "str"
        }
      ],
      "return_type": "complex_type",
      "calls": [
        {
          "name": "optimizer_type.lower",
          "line": 307
        },
        {
          "name": "ValueError",
          "line": 310
        },
        {
          "name": "ValueError",
          "line": 316
        },
        {
          "name": "list",
          "line": 311
        },
        {
          "name": "list",
          "line": 317
        },
        {
          "name": "ALL_CONFIGS.keys",
          "line": 311
        },
        {
          "name": "configs.keys",
          "line": 317
        }
      ],
      "docstring": "\n    Get a specific optimizer configuration.\n    \n    Args:\n        optimizer_type: Type of optimizer (sgd, adam, rmsprop, etc.)\n        variant: Specific variant of the optimizer\n        \n    Returns:\n        Dictionary with optimizer configuration\n    ",
      "code_snippet": "}\n\ndef get_optimizer_config(optimizer_type: str, variant: str = 'default') -> Dict[str, Any]:\n    \"\"\"\n    Get a specific optimizer configuration.\n    \n    Args:\n        optimizer_type: Type of optimizer (sgd, adam, rmsprop, etc.)\n        variant: Specific variant of the optimizer\n        \n    Returns:\n        Dictionary with optimizer configuration\n    \"\"\"\n    optimizer_type = optimizer_type.lower()\n    \n    if optimizer_type not in ALL_CONFIGS:\n        raise ValueError(f\"Optimizer type '{optimizer_type}' not found. \"\n                         f\"Available types: {list(ALL_CONFIGS.keys())}\")\n                         \n    configs = ALL_CONFIGS[optimizer_type]\n    \n    if variant not in configs:\n        raise ValueError(f\"Variant '{variant}' not found for optimizer '{optimizer_type}'. \"\n                         f\"Available variants: {list(configs.keys())}\")\n    \n    return configs[variant]\n\ndef list_available_optimizers():\n    \"\"\"\n    List all available optimizer configurations."
    },
    "list_available_optimizers": {
      "start_line": 321,
      "end_line": 332,
      "parameters": [],
      "return_type": null,
      "calls": [
        {
          "name": "list",
          "line": 329
        },
        {
          "name": "configs.keys",
          "line": 329
        },
        {
          "name": "ALL_CONFIGS.items",
          "line": 330
        }
      ],
      "docstring": "\n    List all available optimizer configurations.\n    \n    Returns:\n        Dictionary with optimizer types and their variants\n    ",
      "code_snippet": "    return configs[variant]\n\ndef list_available_optimizers():\n    \"\"\"\n    List all available optimizer configurations.\n    \n    Returns:\n        Dictionary with optimizer types and their variants\n    \"\"\"\n    return {\n        optimizer_type: list(configs.keys())\n        for optimizer_type, configs in ALL_CONFIGS.items()\n    }\n\ndef explain_optimizer_config(optimizer_type: str, variant: str = 'default') -> str:\n    \"\"\""
    },
    "explain_optimizer_config": {
      "start_line": 333,
      "end_line": 367,
      "parameters": [
        {
          "name": "optimizer_type",
          "type": "str"
        },
        {
          "name": "variant",
          "type": "str"
        }
      ],
      "return_type": "str",
      "calls": [
        {
          "name": "get_optimizer_config",
          "line": 344
        },
        {
          "name": "....join",
          "line": 365
        },
        {
          "name": "explanation.append",
          "line": 363
        }
      ],
      "docstring": "\n    Get a human-readable explanation of an optimizer configuration.\n    \n    Args:\n        optimizer_type: Type of optimizer (sgd, adam, rmsprop, etc.)\n        variant: Specific variant of the optimizer\n        \n    Returns:\n        String with explanation\n    ",
      "code_snippet": "    }\n\ndef explain_optimizer_config(optimizer_type: str, variant: str = 'default') -> str:\n    \"\"\"\n    Get a human-readable explanation of an optimizer configuration.\n    \n    Args:\n        optimizer_type: Type of optimizer (sgd, adam, rmsprop, etc.)\n        variant: Specific variant of the optimizer\n        \n    Returns:\n        String with explanation\n    \"\"\"\n    config = get_optimizer_config(optimizer_type, variant)\n    \n    # Get optimizer class name\n    optimizer_class = config['optimizer_class'].__name__\n    \n    # Extract parameters\n    params = config['optimizer_kwargs']\n    \n    # Get scheduler info\n    scheduler_class = config['scheduler_class'].__name__ if config['scheduler_class'] else \"None\"\n    \n    # Build explanation\n    explanation = [\n        f\"Optimizer: {optimizer_class} ({optimizer_type}, {variant} variant)\",\n        f\"Parameters: {params}\",\n        f\"Scheduler: {scheduler_class}\"\n    ]\n    \n    if config['scheduler_class']:\n        explanation.append(f\"Scheduler parameters: {config['scheduler_kwargs']}\")\n    \n    return \"\\n\".join(explanation)"
    }
  },
  "constants": {
    "SGD_CONFIGS": {
      "line": 13
    },
    "ADAM_CONFIGS": {
      "line": 92
    },
    "RMSPROP_CONFIGS": {
      "line": 159
    },
    "ADAGRAD_CONFIGS": {
      "line": 195
    },
    "ADADELTA_CONFIGS": {
      "line": 211
    },
    "EVE_CONFIGS": {
      "line": 227
    },
    "ALL_CONFIGS": {
      "line": 287
    }
  }
}