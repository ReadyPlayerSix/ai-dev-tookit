{
  "path": "D:\\Projects\\isekaiZen\\machine-learning-optimizer\\benchmarks.old\\examples\\modified\\baseline_tests\\run_multiple_baselines.py",
  "imports": [
    {
      "name": "os",
      "line": 6
    },
    {
      "name": "sys",
      "line": 7
    },
    {
      "name": "subprocess",
      "line": 8
    },
    {
      "name": "random",
      "line": 9
    },
    {
      "name": "logging",
      "line": 10
    },
    {
      "name": "datetime.datetime",
      "line": 11
    },
    {
      "name": "traceback",
      "line": 60
    }
  ],
  "classes": {},
  "functions": {
    "main": {
      "start_line": 17,
      "end_line": 52,
      "parameters": [],
      "return_type": null,
      "calls": [
        {
          "name": "logger.info",
          "line": 22
        },
        {
          "name": "range",
          "line": 24
        },
        {
          "name": "logger.info",
          "line": 50
        },
        {
          "name": "random.randint",
          "line": 26
        },
        {
          "name": "logger.info",
          "line": 29
        },
        {
          "name": "str",
          "line": 32
        },
        {
          "name": "str",
          "line": 38
        },
        {
          "name": "subprocess.run",
          "line": 43
        },
        {
          "name": "logger.info",
          "line": 44
        },
        {
          "name": "logger.error",
          "line": 46
        },
        {
          "name": "logger.error",
          "line": 47
        }
      ],
      "docstring": "Run multiple baseline tests.",
      "code_snippet": "logger = logging.getLogger(__name__)\n\ndef main():\n    \"\"\"Run multiple baseline tests.\"\"\"\n    num_runs = 3  # As specified in the test plan\n    epochs = 15\n    \n    logger.info(\"Starting multiple baseline test runs...\")\n    \n    for i in range(1, num_runs + 1):\n        # Generate a unique seed for each run\n        seed = random.randint(1, 10000)\n        run_id = f\"baseline_{i}_seed_{seed}\"\n        \n        logger.info(f\"Starting run {i}/{num_runs} with seed {seed}\")\n        \n        # Set environment variable for random seed\n        os.environ['PYTHONHASHSEED'] = str(seed)\n        \n        # Run the baseline script\n        cmd = [\n            sys.executable,\n            'run_eve_baseline_metrics.py',\n            '--epochs', str(epochs),\n            '--run-id', run_id\n        ]\n        \n        try:\n            result = subprocess.run(cmd, check=True, capture_output=True, text=True)\n            logger.info(f\"Run {i} completed successfully\")\n        except subprocess.CalledProcessError as e:\n            logger.error(f\"Run {i} failed with error code {e.returncode}\")\n            logger.error(f\"Error output: {e.stderr}\")\n            continue\n        \n    logger.info(\"All baseline test runs completed\")\n\n\nif __name__ == \"__main__\":\n    try:"
    }
  },
  "constants": {}
}