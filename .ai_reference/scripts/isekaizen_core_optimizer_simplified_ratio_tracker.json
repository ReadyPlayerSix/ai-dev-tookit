{
  "path": "D:\\Projects\\isekaiZen\\machine-learning-optimizer\\isekaizen\\core\\optimizer\\simplified_ratio_tracker.py",
  "imports": [
    {
      "name": "logging",
      "line": 12
    },
    {
      "name": "math",
      "line": 13
    },
    {
      "name": "typing.Dict",
      "line": 14
    },
    {
      "name": "typing.List",
      "line": 14
    },
    {
      "name": "typing.Any",
      "line": 14
    },
    {
      "name": "typing.Optional",
      "line": 14
    },
    {
      "name": "typing.Tuple",
      "line": 14
    },
    {
      "name": "typing.Set",
      "line": 14
    }
  ],
  "classes": {
    "SimplifiedRatioTracker": {
      "start_line": 18,
      "end_line": 163,
      "methods": {
        "__init__": {
          "start_line": 23,
          "end_line": 31,
          "parameters": [
            {
              "name": "self"
            }
          ],
          "return_type": null,
          "calls": [],
          "code_snippet": "    Much simpler than the complex pattern tracking system.\n    \"\"\"\n    def __init__(self):\n        self.train_test_ratios = []  # History of T/T ratios\n        self.risk_accuracy_ratios = []  # History of R/A ratios\n        self.epoch_accuracies = []  # History of test accuracies\n        self.pattern_accuracies = {}  # Current epoch pattern accuracies\n        self.prev_pattern_accuracies = {}  # Previous epoch pattern accuracies\n        self.epoch_history = []  # Track epoch numbers\n    \n    def update_train_test_ratio(self, epoch, train_acc, test_acc):\n        \"\"\"\n        Update the Train/Test ratio at epoch end."
        },
        "update_train_test_ratio": {
          "start_line": 31,
          "end_line": 58,
          "parameters": [
            {
              "name": "self"
            },
            {
              "name": "epoch"
            },
            {
              "name": "train_acc"
            },
            {
              "name": "test_acc"
            }
          ],
          "return_type": null,
          "calls": [
            {
              "name": "self.epoch_history.append",
              "line": 44
            },
            {
              "name": "self.train_test_ratios.append",
              "line": 50
            },
            {
              "name": "self.epoch_accuracies.append",
              "line": 51
            },
            {
              "name": "logger.info",
              "line": 54
            },
            {
              "name": "max",
              "line": 47
            }
          ],
          "docstring": "\n        Update the Train/Test ratio at epoch end.\n        \n        Args:\n            epoch: Current epoch number\n            train_acc: Training accuracy (0-100)\n            test_acc: Testing/validation accuracy (0-100)\n            \n        Returns:\n            The calculated Train/Test ratio\n        ",
          "code_snippet": "        self.epoch_history = []  # Track epoch numbers\n    \n    def update_train_test_ratio(self, epoch, train_acc, test_acc):\n        \"\"\"\n        Update the Train/Test ratio at epoch end.\n        \n        Args:\n            epoch: Current epoch number\n            train_acc: Training accuracy (0-100)\n            test_acc: Testing/validation accuracy (0-100)\n            \n        Returns:\n            The calculated Train/Test ratio\n        \"\"\"\n        # Store epoch\n        self.epoch_history.append(epoch)\n        \n        # Calculate ratio (with safety for zero test accuracy)\n        tt_ratio = train_acc / max(test_acc, 0.1)  # Prevent division by zero\n        \n        # Store history\n        self.train_test_ratios.append(tt_ratio)\n        self.epoch_accuracies.append(test_acc)\n        \n        # Log the ratio\n        logger.info(f\"Epoch {epoch}: Train/Test ratio = {tt_ratio:.3f} (train: {train_acc:.2f}%, test: {test_acc:.2f}%)\")\n        \n        return tt_ratio\n    \n    def update_pattern_accuracies(self, epoch, pattern_accuracies):\n        \"\"\"\n        Update pattern accuracies and calculate Risk/Accuracy ratio."
        },
        "update_pattern_accuracies": {
          "start_line": 58,
          "end_line": 117,
          "parameters": [
            {
              "name": "self"
            },
            {
              "name": "epoch"
            },
            {
              "name": "pattern_accuracies"
            }
          ],
          "return_type": null,
          "calls": [
            {
              "name": "self.pattern_accuracies.copy",
              "line": 71
            },
            {
              "name": "self.pattern_accuracies.items",
              "line": 83
            },
            {
              "name": "....join",
              "line": 104
            },
            {
              "name": "logger.info",
              "line": 105
            },
            {
              "name": "logger.info",
              "line": 106
            },
            {
              "name": "logger.info",
              "line": 107
            },
            {
              "name": "self.risk_accuracy_ratios.append",
              "line": 109
            },
            {
              "name": "self.risk_accuracy_ratios.append",
              "line": 113
            },
            {
              "name": "logger.info",
              "line": 114
            },
            {
              "name": "pattern_changes.items",
              "line": 104
            }
          ],
          "docstring": "\n        Update pattern accuracies and calculate Risk/Accuracy ratio.\n        This compares current pattern accuracies to previous epoch.\n        \n        Args:\n            epoch: Current epoch number\n            pattern_accuracies: Dictionary of pattern types to accuracy values (0-1)\n            \n        Returns:\n            The calculated Risk/Accuracy ratio\n        ",
          "code_snippet": "        return tt_ratio\n    \n    def update_pattern_accuracies(self, epoch, pattern_accuracies):\n        \"\"\"\n        Update pattern accuracies and calculate Risk/Accuracy ratio.\n        This compares current pattern accuracies to previous epoch.\n        \n        Args:\n            epoch: Current epoch number\n            pattern_accuracies: Dictionary of pattern types to accuracy values (0-1)\n            \n        Returns:\n            The calculated Risk/Accuracy ratio\n        \"\"\"\n        # Store previous accuracies before updating\n        self.prev_pattern_accuracies = self.pattern_accuracies.copy()\n        self.pattern_accuracies = pattern_accuracies\n        \n        # If we have previous data, calculate the Risk/Accuracy ratio\n        if self.prev_pattern_accuracies:\n            # For each pattern, check if accuracy improved\n            risk_patterns = 0\n            total_patterns = 0\n            \n            # Track detailed pattern changes for logging\n            pattern_changes = {}\n            \n            for pattern, accuracy in self.pattern_accuracies.items():\n                if pattern in self.prev_pattern_accuracies:\n                    prev_accuracy = self.prev_pattern_accuracies[pattern]\n                    \n                    # Calculate change\n                    change = accuracy - prev_accuracy\n                    pattern_changes[pattern] = change\n                    \n                    # If accuracy decreased, consider it a risk\n                    if accuracy < prev_accuracy:\n                        risk_patterns += 1\n                    \n                    total_patterns += 1\n            \n            # Calculate overall Risk/Accuracy ratio\n            if total_patterns > 0:\n                ra_ratio = risk_patterns / total_patterns\n            else:\n                ra_ratio = 0.0\n            \n            # Log detailed changes\n            change_details = \", \".join([f\"{p}: {c:+.3f}\" for p, c in pattern_changes.items()])\n            logger.info(f\"Epoch {epoch}: {risk_patterns}/{total_patterns} patterns regressed\")\n            logger.info(f\"Pattern changes: {change_details}\")\n            logger.info(f\"Risk/Accuracy ratio = {ra_ratio:.3f}\")\n            \n            self.risk_accuracy_ratios.append(ra_ratio)\n            return ra_ratio\n        else:\n            # If first epoch, default to 0.0 (no risk yet)\n            self.risk_accuracy_ratios.append(0.0)\n            logger.info(f\"Epoch {epoch}: First epoch, initializing Risk/Accuracy ratio = 0.0\")\n            return 0.0\n    \n    def get_current_train_test_ratio(self):\n        \"\"\"Get the most recent Train/Test ratio.\"\"\"\n        if self.train_test_ratios:"
        },
        "get_current_train_test_ratio": {
          "start_line": 117,
          "end_line": 123,
          "parameters": [
            {
              "name": "self"
            }
          ],
          "return_type": null,
          "calls": [],
          "docstring": "Get the most recent Train/Test ratio.",
          "code_snippet": "            return 0.0\n    \n    def get_current_train_test_ratio(self):\n        \"\"\"Get the most recent Train/Test ratio.\"\"\"\n        if self.train_test_ratios:\n            return self.train_test_ratios[-1]\n        return 1.0  # Default to balanced\n    \n    def get_current_risk_accuracy_ratio(self):\n        \"\"\"Get the most recent Risk/Accuracy ratio.\"\"\"\n        if self.risk_accuracy_ratios:"
        },
        "get_current_risk_accuracy_ratio": {
          "start_line": 123,
          "end_line": 129,
          "parameters": [
            {
              "name": "self"
            }
          ],
          "return_type": null,
          "calls": [],
          "docstring": "Get the most recent Risk/Accuracy ratio.",
          "code_snippet": "        return 1.0  # Default to balanced\n    \n    def get_current_risk_accuracy_ratio(self):\n        \"\"\"Get the most recent Risk/Accuracy ratio.\"\"\"\n        if self.risk_accuracy_ratios:\n            return self.risk_accuracy_ratios[-1]\n        return 0.0  # Default to no risk\n    \n    def get_pattern_change_summary(self):\n        \"\"\"\n        Get a summary of pattern accuracy changes between current and previous epoch."
        },
        "get_pattern_change_summary": {
          "start_line": 129,
          "end_line": 144,
          "parameters": [
            {
              "name": "self"
            }
          ],
          "return_type": null,
          "calls": [
            {
              "name": "self.pattern_accuracies.items",
              "line": 137
            }
          ],
          "docstring": "\n        Get a summary of pattern accuracy changes between current and previous epoch.\n        \n        Returns:\n            Dictionary with pattern types and their accuracy changes\n        ",
          "code_snippet": "        return 0.0  # Default to no risk\n    \n    def get_pattern_change_summary(self):\n        \"\"\"\n        Get a summary of pattern accuracy changes between current and previous epoch.\n        \n        Returns:\n            Dictionary with pattern types and their accuracy changes\n        \"\"\"\n        changes = {}\n        for pattern, accuracy in self.pattern_accuracies.items():\n            if pattern in self.prev_pattern_accuracies:\n                change = accuracy - self.prev_pattern_accuracies[pattern]\n                changes[pattern] = change\n        \n        return changes\n    \n    def get_underperforming_patterns(self, threshold=-0.05):\n        \"\"\"\n        Get patterns that have decreased in accuracy beyond the threshold."
        },
        "get_underperforming_patterns": {
          "start_line": 144,
          "end_line": 163,
          "parameters": [
            {
              "name": "self"
            },
            {
              "name": "threshold"
            }
          ],
          "return_type": null,
          "calls": [
            {
              "name": "self.pattern_accuracies.items",
              "line": 155
            },
            {
              "name": "underperforming.append",
              "line": 159
            }
          ],
          "docstring": "\n        Get patterns that have decreased in accuracy beyond the threshold.\n        \n        Args:\n            threshold: Minimum change to consider a pattern underperforming (negative value)\n            \n        Returns:\n            List of underperforming pattern types\n        ",
          "code_snippet": "        return changes\n    \n    def get_underperforming_patterns(self, threshold=-0.05):\n        \"\"\"\n        Get patterns that have decreased in accuracy beyond the threshold.\n        \n        Args:\n            threshold: Minimum change to consider a pattern underperforming (negative value)\n            \n        Returns:\n            List of underperforming pattern types\n        \"\"\"\n        underperforming = []\n        for pattern, accuracy in self.pattern_accuracies.items():\n            if pattern in self.prev_pattern_accuracies:\n                change = accuracy - self.prev_pattern_accuracies[pattern]\n                if change <= threshold:\n                    underperforming.append(pattern)\n        \n        return underperforming"
        }
      },
      "class_variables": [],
      "bases": [],
      "docstring": "\n    Tracks Train/Test and Risk/Accuracy ratios at the epoch level.\n    Much simpler than the complex pattern tracking system.\n    "
    }
  },
  "functions": {},
  "constants": {}
}