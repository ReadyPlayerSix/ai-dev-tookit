{
  "path": "D:\\Projects\\isekaiZen\\machine-learning-optimizer\\benchmarks.old\\models\\src\\utils\\json_serializer.py",
  "imports": [
    {
      "name": "typing.Any",
      "line": 4
    },
    {
      "name": "json",
      "line": 5
    },
    {
      "name": "datetime.datetime",
      "line": 6
    },
    {
      "name": "pathlib.Path",
      "line": 7
    }
  ],
  "classes": {
    "CustomJSONEncoder": {
      "start_line": 9,
      "end_line": 23,
      "methods": {
        "default": {
          "start_line": 11,
          "end_line": 23,
          "parameters": [
            {
              "name": "self"
            },
            {
              "name": "obj",
              "type": "Any"
            }
          ],
          "return_type": "Any",
          "calls": [
            {
              "name": "hasattr",
              "line": 13
            },
            {
              "name": "isinstance",
              "line": 18
            },
            {
              "name": "....default",
              "line": 21
            },
            {
              "name": "obj.isoformat",
              "line": 19
            },
            {
              "name": "super",
              "line": 21
            },
            {
              "name": "obj.__dict__.items",
              "line": 15
            },
            {
              "name": "k.startswith",
              "line": 16
            }
          ],
          "code_snippet": "class CustomJSONEncoder(json.JSONEncoder):\n    \"\"\"Custom JSON encoder to handle SemanticPattern and other custom objects\"\"\"\n    def default(self, obj: Any) -> Any:\n        # Handle SemanticPattern objects\n        if hasattr(obj, '__dict__'):\n            # Convert object to dictionary, excluding private attributes\n            return {k: v for k, v in obj.__dict__.items() \n                   if not k.startswith('_')}\n        # Handle datetime objects\n        if isinstance(obj, datetime):\n            return obj.isoformat()\n        # Let the base class handle everything else\n        return super().default(obj)\n\ndef setup_assessment_environment():\n    \"\"\"Set up necessary directories and logging\"\"\"\n    # Create required directories"
        }
      },
      "class_variables": [],
      "bases": [
        "..."
      ],
      "docstring": "Custom JSON encoder to handle SemanticPattern and other custom objects"
    }
  },
  "functions": {
    "setup_assessment_environment": {
      "start_line": 23,
      "end_line": 39,
      "parameters": [],
      "return_type": null,
      "calls": [
        {
          "name": "str",
          "line": 37
        },
        {
          "name": "Path",
          "line": 27
        },
        {
          "name": "Path",
          "line": 28
        },
        {
          "name": "Path",
          "line": 29
        },
        {
          "name": "Path",
          "line": 30
        },
        {
          "name": "Path",
          "line": 31
        },
        {
          "name": "directory.mkdir",
          "line": 35
        },
        {
          "name": "Path",
          "line": 37
        }
      ],
      "docstring": "Set up necessary directories and logging",
      "code_snippet": "        return super().default(obj)\n\ndef setup_assessment_environment():\n    \"\"\"Set up necessary directories and logging\"\"\"\n    # Create required directories\n    dirs = [\n        Path(\"logs/assessment\"),\n        Path(\"results/assessment\"),\n        Path(\"data/test_patterns\"),\n        Path(\"data/training\"),\n        Path(\"data/validation\")\n    ]\n    \n    for directory in dirs:\n        directory.mkdir(parents=True, exist_ok=True)\n        \n    return str(Path(\"logs/assessment\"))\n\ndef serialize_results(results: dict) -> str:\n    \"\"\"Safely serialize results using custom encoder\"\"\"\n    return json.dumps(results, cls=CustomJSONEncoder, indent=2)"
    },
    "serialize_results": {
      "start_line": 39,
      "end_line": 43,
      "parameters": [
        {
          "name": "results",
          "type": "dict"
        }
      ],
      "return_type": "str",
      "calls": [
        {
          "name": "json.dumps",
          "line": 41
        }
      ],
      "docstring": "Safely serialize results using custom encoder",
      "code_snippet": "    return str(Path(\"logs/assessment\"))\n\ndef serialize_results(results: dict) -> str:\n    \"\"\"Safely serialize results using custom encoder\"\"\"\n    return json.dumps(results, cls=CustomJSONEncoder, indent=2)"
    }
  },
  "constants": {}
}