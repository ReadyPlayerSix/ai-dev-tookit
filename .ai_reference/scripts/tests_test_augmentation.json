{
  "path": "D:\\Projects\\isekaiZen\\machine-learning-optimizer\\tests\\test_augmentation.py",
  "imports": [
    {
      "name": "os",
      "line": 11
    },
    {
      "name": "sys",
      "line": 12
    },
    {
      "name": "json",
      "line": 13
    },
    {
      "name": "time",
      "line": 14
    },
    {
      "name": "logging",
      "line": 15
    },
    {
      "name": "argparse",
      "line": 16
    },
    {
      "name": "datetime.datetime",
      "line": 17
    },
    {
      "name": "torch",
      "line": 18
    },
    {
      "name": "isekaizen.cli.train.train_cli",
      "line": 73
    },
    {
      "name": "isekaizen.cli.train_augmented.train_with_augmentation",
      "line": 112
    }
  ],
  "classes": {},
  "functions": {
    "run_comparative_test": {
      "start_line": 30,
      "end_line": 166,
      "parameters": [
        {
          "name": "args"
        }
      ],
      "return_type": null,
      "calls": [
        {
          "name": "argparse.ArgumentParser",
          "line": 37
        },
        {
          "name": "parser.add_argument",
          "line": 40
        },
        {
          "name": "parser.add_argument",
          "line": 42
        },
        {
          "name": "parser.add_argument",
          "line": 44
        },
        {
          "name": "parser.add_argument",
          "line": 46
        },
        {
          "name": "parser.add_argument",
          "line": 48
        },
        {
          "name": "parser.add_argument",
          "line": 50
        },
        {
          "name": "parser.parse_args",
          "line": 54
        },
        {
          "name": "os.makedirs",
          "line": 57
        },
        {
          "name": "logger.info",
          "line": 67
        },
        {
          "name": "range",
          "line": 68
        },
        {
          "name": "logger.info",
          "line": 106
        },
        {
          "name": "range",
          "line": 107
        },
        {
          "name": "....strftime",
          "line": 145
        },
        {
          "name": "os.path.join",
          "line": 146
        },
        {
          "name": "logger.info",
          "line": 151
        },
        {
          "name": "logger.info",
          "line": 152
        },
        {
          "name": "logger.info",
          "line": 153
        },
        {
          "name": "logger.info",
          "line": 154
        },
        {
          "name": "logger.info",
          "line": 155
        },
        {
          "name": "logger.info",
          "line": 156
        },
        {
          "name": "logger.info",
          "line": 157
        },
        {
          "name": "logger.info",
          "line": 158
        },
        {
          "name": "logger.info",
          "line": 162
        },
        {
          "name": "vars",
          "line": 63
        },
        {
          "name": "logger.info",
          "line": 69
        },
        {
          "name": "time.time",
          "line": 70
        },
        {
          "name": "train_cli",
          "line": 89
        },
        {
          "name": "....append",
          "line": 93
        },
        {
          "name": "logger.info",
          "line": 98
        },
        {
          "name": "logger.info",
          "line": 108
        },
        {
          "name": "time.time",
          "line": 109
        },
        {
          "name": "train_with_augmentation",
          "line": 128
        },
        {
          "name": "....append",
          "line": 132
        },
        {
          "name": "logger.info",
          "line": 137
        },
        {
          "name": "open",
          "line": 147
        },
        {
          "name": "json.dump",
          "line": 148
        },
        {
          "name": "logger.info",
          "line": 161
        },
        {
          "name": "train_args.append",
          "line": 83
        },
        {
          "name": "train_args.append",
          "line": 86
        },
        {
          "name": "time.time",
          "line": 90
        },
        {
          "name": "sum",
          "line": 102
        },
        {
          "name": "len",
          "line": 102
        },
        {
          "name": "sum",
          "line": 103
        },
        {
          "name": "len",
          "line": 103
        },
        {
          "name": "train_args.append",
          "line": 122
        },
        {
          "name": "train_args.append",
          "line": 125
        },
        {
          "name": "time.time",
          "line": 129
        },
        {
          "name": "sum",
          "line": 141
        },
        {
          "name": "len",
          "line": 141
        },
        {
          "name": "sum",
          "line": 142
        },
        {
          "name": "len",
          "line": 142
        },
        {
          "name": "datetime.now",
          "line": 145
        },
        {
          "name": "os.path.join",
          "line": 79
        },
        {
          "name": "os.path.join",
          "line": 118
        }
      ],
      "docstring": "\n    Run a comparative test between standard and pre-augmented training.\n    \n    Args:\n        args: Command-line arguments\n    ",
      "code_snippet": "logger = logging.getLogger(__name__)\n\ndef run_comparative_test(args=None):\n    \"\"\"\n    Run a comparative test between standard and pre-augmented training.\n    \n    Args:\n        args: Command-line arguments\n    \"\"\"\n    parser = argparse.ArgumentParser(description=\"Compare standard vs pre-pattern augmented training\")\n    \n    # Test configuration\n    parser.add_argument('--model', type=str, default='resnet18',\n                        help='Model architecture to use')\n    parser.add_argument('--pretrained', action='store_true',\n                        help='Use pre-trained model weights')\n    parser.add_argument('--epochs', type=int, default=10,\n                        help='Number of training epochs')\n    parser.add_argument('--trials', type=int, default=3,\n                        help='Number of trials for each method')\n    parser.add_argument('--output-dir', type=str, default='./results',\n                        help='Directory for test results')\n    parser.add_argument('--weight-range-iris', action='store_true',\n                        help='Use weight range iris')\n    \n    # Parse arguments\n    args = parser.parse_args(args)\n    \n    # Create output directory\n    os.makedirs(args.output_dir, exist_ok=True)\n    \n    # Results storage\n    results = {\n        'standard': {'trials': [], 'avg_accuracy': 0.0, 'avg_time': 0.0},\n        'augmented': {'trials': [], 'avg_accuracy': 0.0, 'avg_time': 0.0},\n        'test_config': vars(args)\n    }\n    \n    # Run standard training trials\n    logger.info(f\"Running {args.trials} trials of standard training...\")\n    for trial in range(args.trials):\n        logger.info(f\"Standard training trial {trial+1}/{args.trials}\")\n        start_time = time.time()\n        \n        # Import after path setup to ensure correct imports\n        from isekaizen.cli.train import train_cli\n        \n        # Prepare arguments for standard training\n        train_args = [\n            f\"--model={args.model}\",\n            f\"--epochs={args.epochs}\",\n            f\"--output-dir={os.path.join(args.output_dir, 'standard')}\",\n        ]\n        \n        if args.pretrained:\n            train_args.append(\"--pretrained\")\n            \n        if args.weight_range_iris:\n            train_args.append(\"--weight-range-iris\")\n        \n        # Run standard training\n        val_acc = train_cli(train_args)\n        training_time = time.time() - start_time\n        \n        # Store results\n        results['standard']['trials'].append({\n            'accuracy': val_acc,\n            'time': training_time\n        })\n        \n        logger.info(f\"Trial completed: {val_acc:.2f}% accuracy in {training_time:.2f}s\")\n    \n    # Calculate averages for standard training\n    if results['standard']['trials']:\n        results['standard']['avg_accuracy'] = sum(t['accuracy'] for t in results['standard']['trials']) / len(results['standard']['trials'])\n        results['standard']['avg_time'] = sum(t['time'] for t in results['standard']['trials']) / len(results['standard']['trials'])\n    \n    # Run pre-augmented training trials\n    logger.info(f\"Running {args.trials} trials of pre-augmented training...\")\n    for trial in range(args.trials):\n        logger.info(f\"Pre-augmented training trial {trial+1}/{args.trials}\")\n        start_time = time.time()\n        \n        # Import after path setup to ensure correct imports\n        from isekaizen.cli.train_augmented import train_with_augmentation\n        \n        # Prepare arguments for augmented training\n        train_args = [\n            f\"--model={args.model}\",\n            f\"--epochs={args.epochs}\",\n            f\"--output-dir={os.path.join(args.output_dir, 'augmented')}\",\n        ]\n        \n        if args.pretrained:\n            train_args.append(\"--pretrained\")\n            \n        if args.weight_range_iris:\n            train_args.append(\"--weight-range-iris\")\n        \n        # Run augmented training\n        val_acc = train_with_augmentation(train_args)\n        training_time = time.time() - start_time\n        \n        # Store results\n        results['augmented']['trials'].append({\n            'accuracy': val_acc,\n            'time': training_time\n        })\n        \n        logger.info(f\"Trial completed: {val_acc:.2f}% accuracy in {training_time:.2f}s\")\n    \n    # Calculate averages for augmented training\n    if results['augmented']['trials']:\n        results['augmented']['avg_accuracy'] = sum(t['accuracy'] for t in results['augmented']['trials']) / len(results['augmented']['trials'])\n        results['augmented']['avg_time'] = sum(t['time'] for t in results['augmented']['trials']) / len(results['augmented']['trials'])\n    \n    # Save results\n    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')\n    results_path = os.path.join(args.output_dir, f\"comparison_results_{timestamp}.json\")\n    with open(results_path, 'w') as f:\n        json.dump(results, f, indent=2)\n    \n    # Print comparison\n    logger.info(\"\\n=== COMPARISON RESULTS ===\")\n    logger.info(f\"Standard Training:\")\n    logger.info(f\"  Average Accuracy: {results['standard']['avg_accuracy']:.2f}%\")\n    logger.info(f\"  Average Time: {results['standard']['avg_time']:.2f}s\")\n    logger.info(f\"Pre-Pattern Augmented Training:\")\n    logger.info(f\"  Average Accuracy: {results['augmented']['avg_accuracy']:.2f}%\")\n    logger.info(f\"  Average Time: {results['augmented']['avg_time']:.2f}s\")\n    logger.info(f\"Accuracy Improvement: {results['augmented']['avg_accuracy'] - results['standard']['avg_accuracy']:.2f}%\")\n    if results['standard']['avg_time'] > 0:\n        time_change = (results['augmented']['avg_time'] - results['standard']['avg_time']) / results['standard']['avg_time'] * 100\n        logger.info(f\"Time Change: {time_change:.2f}%\")\n    logger.info(f\"Results saved to {results_path}\")\n    \n    return results\n\nif __name__ == \"__main__\":\n    run_comparative_test()"
    }
  },
  "constants": {}
}