{
  "path": "D:\\Projects\\isekaiZen\\machine-learning-optimizer\\isekaizen\\core\\specialists\\base.py",
  "imports": [
    {
      "name": "abc.ABC",
      "line": 4
    },
    {
      "name": "abc.abstractmethod",
      "line": 4
    },
    {
      "name": "typing.Dict",
      "line": 5
    },
    {
      "name": "typing.Any",
      "line": 5
    },
    {
      "name": "typing.Optional",
      "line": 5
    },
    {
      "name": "torch",
      "line": 6
    }
  ],
  "classes": {
    "BaseSpecialist": {
      "start_line": 8,
      "end_line": 49,
      "methods": {
        "__init__": {
          "start_line": 11,
          "end_line": 22,
          "parameters": [
            {
              "name": "self"
            },
            {
              "name": "domain_type"
            },
            {
              "name": "resource_manager"
            }
          ],
          "return_type": null,
          "calls": [
            {
              "name": "torch.device",
              "line": 14
            },
            {
              "name": "torch.cuda.is_available",
              "line": 14
            }
          ],
          "code_snippet": "    \"\"\"Base class for all specialists\"\"\"\n    \n    def __init__(self, domain_type, resource_manager=None):\n        self.domain = domain_type\n        self.resource_manager = resource_manager\n        self.device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n        self.initialized = True\n        self.metrics = {\n            \"processed_inputs\": 0,\n            \"successful_patterns\": 0,\n            \"failures\": 0,\n            \"average_confidence\": 0.0\n        }\n        \n    @abstractmethod\n    def process_input(self, input_data: Any) -> Dict[str, Any]:"
        },
        "process_input": {
          "start_line": 24,
          "end_line": 28,
          "parameters": [
            {
              "name": "self"
            },
            {
              "name": "input_data",
              "type": "Any"
            }
          ],
          "return_type": "complex_type",
          "calls": [],
          "docstring": "Process input data and return patterns",
          "code_snippet": "        \n    @abstractmethod\n    def process_input(self, input_data: Any) -> Dict[str, Any]:\n        \"\"\"Process input data and return patterns\"\"\"\n        pass\n    \n    def update_metrics(self, success: bool, confidence: Optional[float] = None):\n        \"\"\"Update processing metrics\"\"\"\n        self.metrics[\"processed_inputs\"] += 1"
        },
        "update_metrics": {
          "start_line": 28,
          "end_line": 49,
          "parameters": [
            {
              "name": "self"
            },
            {
              "name": "success",
              "type": "bool"
            },
            {
              "name": "confidence"
            }
          ],
          "return_type": null,
          "calls": [],
          "docstring": "Update processing metrics",
          "code_snippet": "        pass\n    \n    def update_metrics(self, success: bool, confidence: Optional[float] = None):\n        \"\"\"Update processing metrics\"\"\"\n        self.metrics[\"processed_inputs\"] += 1\n        \n        if success:\n            self.metrics[\"successful_patterns\"] += 1\n            if confidence is not None:\n                # Update rolling average\n                prev_avg = self.metrics[\"average_confidence\"]\n                prev_count = self.metrics[\"successful_patterns\"] - 1\n                \n                if prev_count > 0:\n                    self.metrics[\"average_confidence\"] = (\n                        (prev_avg * prev_count + confidence) / \n                        self.metrics[\"successful_patterns\"]\n                    )\n                else:\n                    self.metrics[\"average_confidence\"] = confidence\n        else:\n            self.metrics[\"failures\"] += 1"
        }
      },
      "class_variables": [],
      "bases": [
        "ABC"
      ],
      "docstring": "Base class for all specialists"
    }
  },
  "functions": {},
  "constants": {}
}