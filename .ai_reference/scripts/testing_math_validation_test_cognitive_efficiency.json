{
  "path": "D:\\Projects\\isekaiZen\\machine-learning-optimizer\\testing\\math_validation\\test_cognitive_efficiency.py",
  "imports": [
    {
      "name": "unittest",
      "line": 11
    },
    {
      "name": "sys",
      "line": 12
    },
    {
      "name": "os",
      "line": 13
    },
    {
      "name": "math",
      "line": 14
    },
    {
      "name": "numpy",
      "line": 15
    },
    {
      "name": "isekaizen.core.mathematical_foundation.cognitive_efficiency.calculate_cognitive_efficiency",
      "line": 21
    },
    {
      "name": "isekaizen.core.mathematical_foundation.cognitive_efficiency.cognitive_load_function",
      "line": 21
    },
    {
      "name": "isekaizen.core.mathematical_foundation.cognitive_efficiency.parallel_processing_penalty",
      "line": 21
    }
  ],
  "classes": {
    "TestCognitiveEfficiency": {
      "start_line": 27,
      "end_line": 138,
      "methods": {
        "test_cognitive_load_function": {
          "start_line": 32,
          "end_line": 48,
          "parameters": [
            {
              "name": "self"
            }
          ],
          "return_type": null,
          "calls": [
            {
              "name": "cognitive_load_function",
              "line": 44
            },
            {
              "name": "self.assertAlmostEqual",
              "line": 45
            }
          ],
          "docstring": "Test the cognitive load function against known values.",
          "code_snippet": "    \"\"\"\n    \n    def test_cognitive_load_function(self):\n        \"\"\"Test the cognitive load function against known values.\"\"\"\n        # Test cases from the mathematical foundation\n        test_cases = [\n            (0.0, 1.0),  # Zero load should give maximum efficiency\n            (4.0, 0.5),  # At L_C/2, efficiency should be 0.5\n            (8.0, 0.0),  # At L_C, efficiency should be near zero\n            (16.0, 0.0)  # At 2*L_C, efficiency should be near zero\n        ]\n        \n        for load, expected in test_cases:\n            # Allow for small numerical differences\n            result = cognitive_load_function(load)\n            self.assertAlmostEqual(result, expected, delta=0.05, \n                                 msg=f\"Load {load}: expected {expected}, got {result}\")\n    \n    def test_parallel_processing_penalty(self):\n        \"\"\"Test the parallel processing penalty against known values.\"\"\"\n        # Test cases from the mathematical foundation"
        },
        "test_parallel_processing_penalty": {
          "start_line": 48,
          "end_line": 65,
          "parameters": [
            {
              "name": "self"
            }
          ],
          "return_type": null,
          "calls": [
            {
              "name": "parallel_processing_penalty",
              "line": 61
            },
            {
              "name": "self.assertAlmostEqual",
              "line": 62
            }
          ],
          "docstring": "Test the parallel processing penalty against known values.",
          "code_snippet": "                                 msg=f\"Load {load}: expected {expected}, got {result}\")\n    \n    def test_parallel_processing_penalty(self):\n        \"\"\"Test the parallel processing penalty against known values.\"\"\"\n        # Test cases from the mathematical foundation\n        test_cases = [\n            (1, 4.0, 1.0),      # Single processor has no penalty\n            (2, 4.0, 0.45),     # Two processors with medium load\n            (4, 4.0, 0.2),      # Four processors with medium load\n            (8, 0.1, 0.1),      # Many processors with very low load\n            (16, 8.0, 0.02)     # Many processors with high load\n        ]\n        \n        for processors, load, expected in test_cases:\n            # Allow for larger differences due to approximations in the formula\n            result = parallel_processing_penalty(processors, load)\n            self.assertAlmostEqual(result, expected, delta=0.1, \n                                 msg=f\"Processors {processors}, Load {load}: expected {expected}, got {result}\")\n    \n    def test_cognitive_efficiency(self):\n        \"\"\"Test the cognitive efficiency calculation against known values.\"\"\"\n        # Test cases from the mathematical foundation"
        },
        "test_cognitive_efficiency": {
          "start_line": 65,
          "end_line": 81,
          "parameters": [
            {
              "name": "self"
            }
          ],
          "return_type": null,
          "calls": [
            {
              "name": "calculate_cognitive_efficiency",
              "line": 77
            },
            {
              "name": "self.assertAlmostEqual",
              "line": 78
            }
          ],
          "docstring": "Test the cognitive efficiency calculation against known values.",
          "code_snippet": "                                 msg=f\"Processors {processors}, Load {load}: expected {expected}, got {result}\")\n    \n    def test_cognitive_efficiency(self):\n        \"\"\"Test the cognitive efficiency calculation against known values.\"\"\"\n        # Test cases from the mathematical foundation\n        test_cases = [\n            (10.0, 2.0, 1, 0.9),  # High energy, low load, single processor \u2192 high efficiency\n            (2.0, 4.0, 1, 0.5),   # Low energy, medium load, single processor \u2192 medium efficiency\n            (5.0, 8.0, 2, 0.1),   # Medium energy, high load, two processors \u2192 low efficiency\n            (1.0, 10.0, 4, 0.0)   # Very low energy, very high load, four processors \u2192 near zero efficiency\n        ]\n        \n        for energy, load, processors, expected in test_cases:\n            # Allow for larger differences due to compounding approximations\n            result = calculate_cognitive_efficiency(energy, load, processors)\n            self.assertAlmostEqual(result, expected, delta=0.15, \n                                 msg=f\"Energy {energy}, Load {load}, Processors {processors}: expected {expected}, got {result}\")\n            \n    def test_extreme_values(self):\n        \"\"\"Test the cognitive efficiency with extreme input values.\"\"\"\n        # Zero energy"
        },
        "test_extreme_values": {
          "start_line": 81,
          "end_line": 95,
          "parameters": [
            {
              "name": "self"
            }
          ],
          "return_type": null,
          "calls": [
            {
              "name": "self.assertAlmostEqual",
              "line": 84
            },
            {
              "name": "self.assertGreater",
              "line": 87
            },
            {
              "name": "self.assertAlmostEqual",
              "line": 90
            },
            {
              "name": "self.assertLess",
              "line": 93
            },
            {
              "name": "calculate_cognitive_efficiency",
              "line": 84
            },
            {
              "name": "calculate_cognitive_efficiency",
              "line": 87
            },
            {
              "name": "calculate_cognitive_efficiency",
              "line": 90
            },
            {
              "name": "calculate_cognitive_efficiency",
              "line": 93
            }
          ],
          "docstring": "Test the cognitive efficiency with extreme input values.",
          "code_snippet": "                                 msg=f\"Energy {energy}, Load {load}, Processors {processors}: expected {expected}, got {result}\")\n            \n    def test_extreme_values(self):\n        \"\"\"Test the cognitive efficiency with extreme input values.\"\"\"\n        # Zero energy\n        self.assertAlmostEqual(calculate_cognitive_efficiency(0.0, 4.0, 1), 0.0, delta=0.01)\n        \n        # Zero load\n        self.assertGreater(calculate_cognitive_efficiency(10.0, 0.0, 1), 0.9)\n        \n        # Very high load\n        self.assertAlmostEqual(calculate_cognitive_efficiency(10.0, 100.0, 1), 0.0, delta=0.01)\n        \n        # Very high processor count\n        self.assertLess(calculate_cognitive_efficiency(10.0, 4.0, 100), 0.1)\n    \n    def test_value_range(self):\n        \"\"\"Test that cognitive efficiency stays within the valid range [0,1].\"\"\"\n        # Generate random test cases"
        },
        "test_value_range": {
          "start_line": 95,
          "end_line": 111,
          "parameters": [
            {
              "name": "self"
            }
          ],
          "return_type": null,
          "calls": [
            {
              "name": "np.random.seed",
              "line": 98
            },
            {
              "name": "range",
              "line": 100
            },
            {
              "name": "np.random.exponential",
              "line": 101
            },
            {
              "name": "np.random.exponential",
              "line": 102
            },
            {
              "name": "max",
              "line": 103
            },
            {
              "name": "calculate_cognitive_efficiency",
              "line": 105
            },
            {
              "name": "self.assertGreaterEqual",
              "line": 108
            },
            {
              "name": "self.assertLessEqual",
              "line": 109
            },
            {
              "name": "int",
              "line": 103
            },
            {
              "name": "np.random.exponential",
              "line": 103
            }
          ],
          "docstring": "Test that cognitive efficiency stays within the valid range [0,1].",
          "code_snippet": "        self.assertLess(calculate_cognitive_efficiency(10.0, 4.0, 100), 0.1)\n    \n    def test_value_range(self):\n        \"\"\"Test that cognitive efficiency stays within the valid range [0,1].\"\"\"\n        # Generate random test cases\n        np.random.seed(42)  # For reproducibility\n        \n        for _ in range(100):\n            energy = np.random.exponential(10.0)  # Random energy (positive)\n            load = np.random.exponential(5.0)     # Random load (positive)\n            processors = max(1, int(np.random.exponential(3.0)))  # Random processor count (at least 1)\n            \n            result = calculate_cognitive_efficiency(energy, load, processors)\n            \n            # Efficiency should always be in range [0,1]\n            self.assertGreaterEqual(result, 0.0)\n            self.assertLessEqual(result, 1.0)\n    \n    def test_parameter_sensitivity(self):\n        \"\"\"Test the sensitivity of cognitive efficiency to parameter changes.\"\"\"\n        # Base case"
        },
        "test_parameter_sensitivity": {
          "start_line": 111,
          "end_line": 138,
          "parameters": [
            {
              "name": "self"
            }
          ],
          "return_type": null,
          "calls": [
            {
              "name": "calculate_cognitive_efficiency",
              "line": 118
            },
            {
              "name": "calculate_cognitive_efficiency",
              "line": 121
            },
            {
              "name": "self.assertGreater",
              "line": 122
            },
            {
              "name": "calculate_cognitive_efficiency",
              "line": 124
            },
            {
              "name": "self.assertLess",
              "line": 125
            },
            {
              "name": "calculate_cognitive_efficiency",
              "line": 128
            },
            {
              "name": "self.assertLess",
              "line": 129
            },
            {
              "name": "calculate_cognitive_efficiency",
              "line": 131
            },
            {
              "name": "self.assertGreater",
              "line": 132
            },
            {
              "name": "calculate_cognitive_efficiency",
              "line": 135
            },
            {
              "name": "self.assertLess",
              "line": 136
            }
          ],
          "docstring": "Test the sensitivity of cognitive efficiency to parameter changes.",
          "code_snippet": "            self.assertLessEqual(result, 1.0)\n    \n    def test_parameter_sensitivity(self):\n        \"\"\"Test the sensitivity of cognitive efficiency to parameter changes.\"\"\"\n        # Base case\n        base_energy = 5.0\n        base_load = 4.0\n        base_processors = 2\n        \n        base_efficiency = calculate_cognitive_efficiency(base_energy, base_load, base_processors)\n        \n        # Energy sensitivity\n        higher_energy = calculate_cognitive_efficiency(base_energy * 2.0, base_load, base_processors)\n        self.assertGreater(higher_energy, base_efficiency)\n        \n        lower_energy = calculate_cognitive_efficiency(base_energy * 0.5, base_load, base_processors)\n        self.assertLess(lower_energy, base_efficiency)\n        \n        # Load sensitivity\n        higher_load = calculate_cognitive_efficiency(base_energy, base_load * 2.0, base_processors)\n        self.assertLess(higher_load, base_efficiency)\n        \n        lower_load = calculate_cognitive_efficiency(base_energy, base_load * 0.5, base_processors)\n        self.assertGreater(lower_load, base_efficiency)\n        \n        # Processor sensitivity\n        higher_processors = calculate_cognitive_efficiency(base_energy, base_load, base_processors * 2)\n        self.assertLess(higher_processors, base_efficiency)\n\n\nif __name__ == '__main__':\n    unittest.main()"
        }
      },
      "class_variables": [],
      "bases": [
        "..."
      ],
      "docstring": "\n    Test the cognitive efficiency implementation against known test cases.\n    "
    }
  },
  "functions": {},
  "constants": {}
}