{
  "path": "D:\\Projects\\isekaiZen\\machine-learning-optimizer\\benchmarks.old\\models\\src\\specialists\\base.py",
  "imports": [
    {
      "name": "abc.ABC",
      "line": 4
    },
    {
      "name": "abc.abstractmethod",
      "line": 4
    },
    {
      "name": "typing.Dict",
      "line": 5
    },
    {
      "name": "typing.Any",
      "line": 5
    }
  ],
  "classes": {
    "BaseSpecialist": {
      "start_line": 7,
      "end_line": 18,
      "methods": {
        "__init__": {
          "start_line": 10,
          "end_line": 13,
          "parameters": [
            {
              "name": "self"
            }
          ],
          "return_type": null,
          "calls": [],
          "code_snippet": "    \"\"\"Base class for all specialists\"\"\"\n    \n    def __init__(self):\n        self.initialized = True\n        \n    @abstractmethod\n    def process_text(self, text: str) -> Dict[str, Any]:\n        \"\"\"Process input text and return patterns\"\"\""
        },
        "process_text": {
          "start_line": 14,
          "end_line": 18,
          "parameters": [
            {
              "name": "self"
            },
            {
              "name": "text",
              "type": "str"
            }
          ],
          "return_type": "complex_type",
          "calls": [],
          "docstring": "Process input text and return patterns",
          "code_snippet": "        \n    @abstractmethod\n    def process_text(self, text: str) -> Dict[str, Any]:\n        \"\"\"Process input text and return patterns\"\"\"\n        pass"
        }
      },
      "class_variables": [],
      "bases": [
        "ABC"
      ],
      "docstring": "Base class for all specialists"
    }
  },
  "functions": {},
  "constants": {}
}