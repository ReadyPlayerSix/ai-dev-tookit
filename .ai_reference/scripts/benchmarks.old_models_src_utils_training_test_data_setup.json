{
  "path": "D:\\Projects\\isekaiZen\\machine-learning-optimizer\\benchmarks.old\\models\\src\\utils\\training\\test_data_setup.py",
  "imports": [
    {
      "name": "os",
      "line": 1
    },
    {
      "name": "json",
      "line": 2
    },
    {
      "name": "shutil",
      "line": 3
    },
    {
      "name": "pathlib.Path",
      "line": 4
    },
    {
      "name": "numpy",
      "line": 5
    },
    {
      "name": "PIL.Image",
      "line": 6
    }
  ],
  "classes": {
    "TestDataSetup": {
      "start_line": 8,
      "end_line": 300,
      "methods": {
        "__init__": {
          "start_line": 11,
          "end_line": 21,
          "parameters": [
            {
              "name": "self"
            },
            {
              "name": "base_dir",
              "type": "str"
            }
          ],
          "return_type": null,
          "calls": [
            {
              "name": "Path",
              "line": 12
            },
            {
              "name": "dir_path.mkdir",
              "line": 19
            }
          ],
          "code_snippet": "    \"\"\"Setup test data across all domains for the Cortex system\"\"\"\n    \n    def __init__(self, base_dir: str = \"data/test_patterns\"):\n        self.base_dir = Path(base_dir)\n        self.image_dir = self.base_dir / \"images\"\n        self.text_dir = self.base_dir / \"text\"\n        self.emotional_dir = self.base_dir / \"emotional\"\n        \n        # Create directories\n        for dir_path in [self.image_dir, self.text_dir, self.emotional_dir]:\n            dir_path.mkdir(parents=True, exist_ok=True)\n    \n    def setup_image_data(self):\n        \"\"\"Setup simple test images\"\"\"\n        print(\"Setting up image data...\")"
        },
        "setup_image_data": {
          "start_line": 21,
          "end_line": 53,
          "parameters": [
            {
              "name": "self"
            }
          ],
          "return_type": null,
          "calls": [
            {
              "name": "print",
              "line": 23
            },
            {
              "name": "print",
              "line": 39
            },
            {
              "name": "create_func",
              "line": 35
            },
            {
              "name": "image.save",
              "line": 37
            },
            {
              "name": "len",
              "line": 44
            },
            {
              "name": "open",
              "line": 50
            },
            {
              "name": "json.dump",
              "line": 51
            },
            {
              "name": "len",
              "line": 39
            }
          ],
          "docstring": "Setup simple test images",
          "code_snippet": "            dir_path.mkdir(parents=True, exist_ok=True)\n    \n    def setup_image_data(self):\n        \"\"\"Setup simple test images\"\"\"\n        print(\"Setting up image data...\")\n        \n        # Create simple geometric patterns\n        patterns = [\n            (\"circle\", self._create_circle),\n            (\"square\", self._create_square),\n            (\"triangle\", self._create_triangle),\n            (\"cross\", self._create_cross),\n            (\"star\", self._create_star)\n        ]\n        \n        for name, create_func in patterns:\n            image = create_func()\n            image_path = self.image_dir / f\"{name}.png\"\n            image.save(image_path)\n            \n        print(f\"Saved {len(patterns)} geometric images to {self.image_dir}\")\n        \n        # Create image metadata\n        metadata = {\n            \"dataset\": \"Generated Geometric Shapes\",\n            \"num_images\": len(patterns),\n            \"image_size\": \"28x28\",\n            \"format\": \"PNG\",\n            \"shapes\": [p[0] for p in patterns]\n        }\n        \n        with open(self.image_dir / \"metadata.json\", 'w') as f:\n            json.dump(metadata, f, indent=2)\n    \n    def _create_circle(self, size=28):\n        image = Image.new('L', (size, size), 0)\n        pixels = image.load()"
        },
        "_create_circle": {
          "start_line": 53,
          "end_line": 65,
          "parameters": [
            {
              "name": "self"
            },
            {
              "name": "size"
            }
          ],
          "return_type": null,
          "calls": [
            {
              "name": "Image.new",
              "line": 54
            },
            {
              "name": "image.load",
              "line": 55
            },
            {
              "name": "range",
              "line": 59
            },
            {
              "name": "range",
              "line": 60
            }
          ],
          "code_snippet": "            json.dump(metadata, f, indent=2)\n    \n    def _create_circle(self, size=28):\n        image = Image.new('L', (size, size), 0)\n        pixels = image.load()\n        center = size // 2\n        radius = size // 3\n        \n        for x in range(size):\n            for y in range(size):\n                if (x - center) ** 2 + (y - center) ** 2 <= radius ** 2:\n                    pixels[x, y] = 255\n        return image\n    \n    def _create_square(self, size=28):\n        image = Image.new('L', (size, size), 0)\n        pixels = image.load()"
        },
        "_create_square": {
          "start_line": 65,
          "end_line": 75,
          "parameters": [
            {
              "name": "self"
            },
            {
              "name": "size"
            }
          ],
          "return_type": null,
          "calls": [
            {
              "name": "Image.new",
              "line": 66
            },
            {
              "name": "image.load",
              "line": 67
            },
            {
              "name": "range",
              "line": 70
            },
            {
              "name": "range",
              "line": 71
            }
          ],
          "code_snippet": "        return image\n    \n    def _create_square(self, size=28):\n        image = Image.new('L', (size, size), 0)\n        pixels = image.load()\n        margin = size // 4\n        \n        for x in range(margin, size - margin):\n            for y in range(margin, size - margin):\n                pixels[x, y] = 255\n        return image\n    \n    def _create_triangle(self, size=28):\n        image = Image.new('L', (size, size), 0)\n        pixels = image.load()"
        },
        "_create_triangle": {
          "start_line": 75,
          "end_line": 93,
          "parameters": [
            {
              "name": "self"
            },
            {
              "name": "size"
            }
          ],
          "return_type": null,
          "calls": [
            {
              "name": "Image.new",
              "line": 76
            },
            {
              "name": "image.load",
              "line": 77
            },
            {
              "name": "range",
              "line": 87
            },
            {
              "name": "range",
              "line": 88
            },
            {
              "name": "self._point_in_triangle",
              "line": 89
            }
          ],
          "code_snippet": "        return image\n    \n    def _create_triangle(self, size=28):\n        image = Image.new('L', (size, size), 0)\n        pixels = image.load()\n        \n        # Define triangle points\n        points = [\n            (size // 2, size // 4),  # top\n            (size // 4, 3 * size // 4),  # bottom left\n            (3 * size // 4, 3 * size // 4)  # bottom right\n        ]\n        \n        # Simple triangle fill\n        for x in range(size):\n            for y in range(size):\n                if self._point_in_triangle((x, y), points):\n                    pixels[x, y] = 255\n        return image\n    \n    def _create_cross(self, size=28):\n        image = Image.new('L', (size, size), 0)\n        pixels = image.load()"
        },
        "_create_cross": {
          "start_line": 93,
          "end_line": 110,
          "parameters": [
            {
              "name": "self"
            },
            {
              "name": "size"
            }
          ],
          "return_type": null,
          "calls": [
            {
              "name": "Image.new",
              "line": 94
            },
            {
              "name": "image.load",
              "line": 95
            },
            {
              "name": "range",
              "line": 100
            },
            {
              "name": "range",
              "line": 105
            },
            {
              "name": "range",
              "line": 101
            },
            {
              "name": "range",
              "line": 106
            }
          ],
          "code_snippet": "        return image\n    \n    def _create_cross(self, size=28):\n        image = Image.new('L', (size, size), 0)\n        pixels = image.load()\n        thickness = size // 6\n        center = size // 2\n        \n        # Horizontal line\n        for x in range(size):\n            for y in range(center - thickness // 2, center + thickness // 2):\n                pixels[x, y] = 255\n                \n        # Vertical line\n        for y in range(size):\n            for x in range(center - thickness // 2, center + thickness // 2):\n                pixels[x, y] = 255\n        return image\n    \n    def _create_star(self, size=28):\n        image = Image.new('L', (size, size), 0)\n        pixels = image.load()"
        },
        "_create_star": {
          "start_line": 110,
          "end_line": 127,
          "parameters": [
            {
              "name": "self"
            },
            {
              "name": "size"
            }
          ],
          "return_type": null,
          "calls": [
            {
              "name": "Image.new",
              "line": 111
            },
            {
              "name": "image.load",
              "line": 112
            },
            {
              "name": "range",
              "line": 118
            },
            {
              "name": "np.radians",
              "line": 119
            },
            {
              "name": "int",
              "line": 121
            },
            {
              "name": "int",
              "line": 122
            },
            {
              "name": "np.cos",
              "line": 121
            },
            {
              "name": "np.sin",
              "line": 122
            }
          ],
          "code_snippet": "        return image\n    \n    def _create_star(self, size=28):\n        image = Image.new('L', (size, size), 0)\n        pixels = image.load()\n        center = size // 2\n        radius_outer = size // 3\n        radius_inner = size // 6\n        points = 5\n        \n        for angle in range(360):\n            rad = np.radians(angle)\n            radius = radius_outer if angle % (360 // points) < (360 // points) // 2 else radius_inner\n            x = int(center + radius * np.cos(rad))\n            y = int(center + radius * np.sin(rad))\n            if 0 <= x < size and 0 <= y < size:\n                pixels[x, y] = 255\n        return image\n    \n    def _point_in_triangle(self, point, triangle):\n        \"\"\"Helper function to determine if a point is inside a triangle\"\"\"\n        x, y = point"
        },
        "_point_in_triangle": {
          "start_line": 127,
          "end_line": 146,
          "parameters": [
            {
              "name": "self"
            },
            {
              "name": "point"
            },
            {
              "name": "triangle"
            }
          ],
          "return_type": null,
          "calls": [
            {
              "name": "sign",
              "line": 137
            },
            {
              "name": "sign",
              "line": 138
            },
            {
              "name": "sign",
              "line": 139
            }
          ],
          "docstring": "Helper function to determine if a point is inside a triangle",
          "code_snippet": "        return image\n    \n    def _point_in_triangle(self, point, triangle):\n        \"\"\"Helper function to determine if a point is inside a triangle\"\"\"\n        x, y = point\n        x1, y1 = triangle[0]\n        x2, y2 = triangle[1]\n        x3, y3 = triangle[2]\n        \n        def sign(x1, y1, x2, y2, x3, y3):\n            return (x1 - x3) * (y2 - y3) - (x2 - x3) * (y1 - y3)\n        \n        d1 = sign(x, y, x1, y1, x2, y2)\n        d2 = sign(x, y, x2, y2, x3, y3)\n        d3 = sign(x, y, x3, y3, x1, y1)\n        \n        has_neg = (d1 < 0) or (d2 < 0) or (d3 < 0)\n        has_pos = (d1 > 0) or (d2 > 0) or (d3 > 0)\n        \n        return not (has_neg and has_pos)\n    \n    def setup_text_data(self):\n        \"\"\"Setup text samples with emotional and visual descriptions\"\"\"\n        print(\"Setting up text data...\")"
        },
        "setup_text_data": {
          "start_line": 146,
          "end_line": 209,
          "parameters": [
            {
              "name": "self"
            }
          ],
          "return_type": null,
          "calls": [
            {
              "name": "print",
              "line": 148
            },
            {
              "name": "print",
              "line": 207
            },
            {
              "name": "open",
              "line": 204
            },
            {
              "name": "json.dump",
              "line": 205
            },
            {
              "name": "len",
              "line": 207
            }
          ],
          "docstring": "Setup text samples with emotional and visual descriptions",
          "code_snippet": "        return not (has_neg and has_pos)\n    \n    def setup_text_data(self):\n        \"\"\"Setup text samples with emotional and visual descriptions\"\"\"\n        print(\"Setting up text data...\")\n        \n        text_samples = [\n            {\n                \"text\": \"A perfect circle stands complete and whole, its curve unbroken and eternal.\",\n                \"type\": \"visual_description\",\n                \"related_image\": \"circle.png\"\n            },\n            {\n                \"text\": \"The square sits solidly, its four equal sides providing stability and structure.\",\n                \"type\": \"visual_description\",\n                \"related_image\": \"square.png\"\n            },\n            {\n                \"text\": \"The triangle points upward like an arrow, suggesting direction and purpose.\",\n                \"type\": \"emotional_description\",\n                \"related_image\": \"triangle.png\"\n            },\n            {\n                \"text\": \"The simple geometry of shapes brings a sense of order to chaos.\",\n                \"type\": \"emotional_description\",\n                \"related_emotion\": \"tranquility\"\n            },\n            {\n                \"text\": \"The star radiates outward, like hope spreading its light in all directions.\",\n                \"type\": \"visual_metaphor\",\n                \"related_image\": \"star.png\"\n            },\n            {\n                \"text\": \"Where lines intersect in the cross, two paths meet in perfect balance.\",\n                \"type\": \"philosophical\",\n                \"related_image\": \"cross.png\"\n            },\n            {\n                \"text\": \"Each shape tells its own story through its angles and curves.\",\n                \"type\": \"abstract\",\n                \"domain\": \"cross_domain\"\n            },\n            {\n                \"text\": \"The circle embraces space like a gentle hug, without beginning or end.\",\n                \"type\": \"visual_metaphor\",\n                \"related_image\": \"circle.png\"\n            },\n            {\n                \"text\": \"Shapes dance together in space, creating patterns of meaning.\",\n                \"type\": \"abstract\",\n                \"domain\": \"cross_domain\"\n            },\n            {\n                \"text\": \"The steady square provides foundation, reliable as the earth itself.\",\n                \"type\": \"visual_description\",\n                \"related_image\": \"square.png\"\n            }\n        ]\n        \n        # Save text samples\n        with open(self.text_dir / \"samples.json\", 'w') as f:\n            json.dump(text_samples, f, indent=2)\n        \n        print(f\"Saved {len(text_samples)} text samples to {self.text_dir}\")\n    \n    def setup_emotional_data(self):\n        \"\"\"Setup emotional signal data corresponding to shape perceptions\"\"\"\n        print(\"Setting up emotional data...\")"
        },
        "setup_emotional_data": {
          "start_line": 209,
          "end_line": 292,
          "parameters": [
            {
              "name": "self"
            }
          ],
          "return_type": null,
          "calls": [
            {
              "name": "print",
              "line": 211
            },
            {
              "name": "print",
              "line": 290
            },
            {
              "name": "open",
              "line": 287
            },
            {
              "name": "json.dump",
              "line": 288
            },
            {
              "name": "len",
              "line": 290
            }
          ],
          "docstring": "Setup emotional signal data corresponding to shape perceptions",
          "code_snippet": "        print(f\"Saved {len(text_samples)} text samples to {self.text_dir}\")\n    \n    def setup_emotional_data(self):\n        \"\"\"Setup emotional signal data corresponding to shape perceptions\"\"\"\n        print(\"Setting up emotional data...\")\n        \n        emotional_samples = [\n            {\n                \"description\": \"Reaction to perfect circle\",\n                \"valence\": 0.8,    # Positive feeling\n                \"arousal\": 0.3,    # Calm\n                \"dominance\": 0.7,  # In control\n                \"related_image\": \"circle.png\"\n            },\n            {\n                \"description\": \"Response to stable square\",\n                \"valence\": 0.6,    # Slightly positive\n                \"arousal\": 0.4,    # Calm\n                \"dominance\": 0.8,  # High control\n                \"related_image\": \"square.png\"\n            },\n            {\n                \"description\": \"Viewing dynamic triangle\",\n                \"valence\": 0.7,    # Positive\n                \"arousal\": 0.7,    # Energetic\n                \"dominance\": 0.6,  # Moderate control\n                \"related_image\": \"triangle.png\"\n            },\n            {\n                \"description\": \"Balanced cross\",\n                \"valence\": 0.5,    # Neutral\n                \"arousal\": 0.4,    # Calm\n                \"dominance\": 0.7,  # Good control\n                \"related_image\": \"cross.png\"\n            },\n            {\n                \"description\": \"Radiating star\",\n                \"valence\": 0.9,    # Very positive\n                \"arousal\": 0.8,    # Energetic\n                \"dominance\": 0.6,  # Moderate control\n                \"related_image\": \"star.png\"\n            },\n            {\n                \"description\": \"Geometric harmony\",\n                \"valence\": 0.7,    # Positive\n                \"arousal\": 0.5,    # Moderate\n                \"dominance\": 0.7,  # Good control\n                \"pattern_type\": \"meta_response\"\n            },\n            {\n                \"description\": \"Shape relationships\",\n                \"valence\": 0.8,    # Very positive\n                \"arousal\": 0.6,    # Moderate energy\n                \"dominance\": 0.8,  # High control\n                \"pattern_type\": \"meta_response\"\n            },\n            {\n                \"description\": \"Visual-emotional synthesis\",\n                \"valence\": 0.7,    # Positive\n                \"arousal\": 0.5,    # Moderate\n                \"dominance\": 0.7,  # Good control\n                \"pattern_type\": \"meta_response\"\n            },\n            {\n                \"description\": \"Pattern recognition\",\n                \"valence\": 0.8,    # Very positive\n                \"arousal\": 0.4,    # Calm\n                \"dominance\": 0.9,  # Very high control\n                \"pattern_type\": \"meta_response\"\n            },\n            {\n                \"description\": \"Complete shape set viewing\",\n                \"valence\": 0.8,    # Very positive\n                \"arousal\": 0.6,    # Moderate energy\n                \"dominance\": 0.8,  # High control\n                \"pattern_type\": \"meta_response\"\n            }\n        ]\n        \n        # Save emotional samples\n        with open(self.emotional_dir / \"samples.json\", 'w') as f:\n            json.dump(emotional_samples, f, indent=2)\n        \n        print(f\"Saved {len(emotional_samples)} emotional samples to {self.emotional_dir}\")\n    \n    def setup_all(self):\n        \"\"\"Run complete test data setup\"\"\"\n        print(f\"Setting up test data in {self.base_dir}\")"
        },
        "setup_all": {
          "start_line": 292,
          "end_line": 300,
          "parameters": [
            {
              "name": "self"
            }
          ],
          "return_type": null,
          "calls": [
            {
              "name": "print",
              "line": 294
            },
            {
              "name": "self.setup_image_data",
              "line": 295
            },
            {
              "name": "self.setup_text_data",
              "line": 296
            },
            {
              "name": "self.setup_emotional_data",
              "line": 297
            },
            {
              "name": "print",
              "line": 298
            }
          ],
          "docstring": "Run complete test data setup",
          "code_snippet": "        print(f\"Saved {len(emotional_samples)} emotional samples to {self.emotional_dir}\")\n    \n    def setup_all(self):\n        \"\"\"Run complete test data setup\"\"\"\n        print(f\"Setting up test data in {self.base_dir}\")\n        self.setup_image_data()\n        self.setup_text_data()\n        self.setup_emotional_data()\n        print(\"Test data setup complete!\")\n\nif __name__ == \"__main__\":\n    setup = TestDataSetup()\n    setup.setup_all()"
        }
      },
      "class_variables": [],
      "bases": [],
      "docstring": "Setup test data across all domains for the Cortex system"
    }
  },
  "functions": {},
  "constants": {}
}