{
  "path": "D:\\Projects\\isekaiZen\\machine-learning-optimizer\\isekaizen\\core\\config_loader.py",
  "imports": [
    {
      "name": "os",
      "line": 11
    },
    {
      "name": "json",
      "line": 12
    },
    {
      "name": "logging",
      "line": 13
    },
    {
      "name": "typing.Dict",
      "line": 14
    },
    {
      "name": "typing.Any",
      "line": 14
    },
    {
      "name": "typing.Optional",
      "line": 14
    },
    {
      "name": "config.IsekaiZenConfig",
      "line": 16
    },
    {
      "name": "exceptions.ConfigurationError",
      "line": 17
    }
  ],
  "classes": {},
  "functions": {
    "load_config": {
      "start_line": 21,
      "end_line": 65,
      "parameters": [
        {
          "name": "config_path"
        }
      ],
      "return_type": "IsekaiZenConfig",
      "calls": [
        {
          "name": "IsekaiZenConfig",
          "line": 35
        },
        {
          "name": "os.path.exists",
          "line": 38
        },
        {
          "name": "config.validate",
          "line": 58
        },
        {
          "name": "IsekaiZenConfig.from_dict",
          "line": 44
        },
        {
          "name": "logger.info",
          "line": 45
        },
        {
          "name": "logger.warning",
          "line": 52
        },
        {
          "name": "logger.info",
          "line": 54
        },
        {
          "name": "logger.error",
          "line": 60
        },
        {
          "name": "open",
          "line": 40
        },
        {
          "name": "json.load",
          "line": 41
        },
        {
          "name": "ConfigurationError",
          "line": 47
        },
        {
          "name": "ConfigurationError",
          "line": 49
        },
        {
          "name": "str",
          "line": 60
        },
        {
          "name": "str",
          "line": 47
        },
        {
          "name": "str",
          "line": 49
        }
      ],
      "docstring": "\n    Load configuration from file or use defaults.\n    \n    Args:\n        config_path: Path to configuration file (optional)\n        \n    Returns:\n        IsekaiZenConfig: Loaded and validated configuration\n        \n    Raises:\n        ConfigurationError: If the configuration file is invalid or cannot be loaded\n    ",
      "code_snippet": "logger = logging.getLogger(__name__)\n\ndef load_config(config_path: Optional[str] = None) -> IsekaiZenConfig:\n    \"\"\"\n    Load configuration from file or use defaults.\n    \n    Args:\n        config_path: Path to configuration file (optional)\n        \n    Returns:\n        IsekaiZenConfig: Loaded and validated configuration\n        \n    Raises:\n        ConfigurationError: If the configuration file is invalid or cannot be loaded\n    \"\"\"\n    # Default configuration\n    config = IsekaiZenConfig()\n    \n    # Load from file if specified\n    if config_path and os.path.exists(config_path):\n        try:\n            with open(config_path, 'r') as f:\n                config_dict = json.load(f)\n            \n            # Create config from dictionary\n            config = IsekaiZenConfig.from_dict(config_dict)\n            logger.info(f\"Configuration loaded from {config_path}\")\n        except json.JSONDecodeError as e:\n            raise ConfigurationError(f\"Invalid JSON in configuration file {config_path}: {str(e)}\")\n        except Exception as e:\n            raise ConfigurationError(f\"Failed to load configuration from {config_path}: {str(e)}\")\n    else:\n        if config_path:\n            logger.warning(f\"Configuration file {config_path} not found, using default configuration\")\n        else:\n            logger.info(\"No configuration file specified, using default configuration\")\n    \n    # Validate configuration\n    try:\n        config.validate()\n    except ConfigurationError as e:\n        logger.error(f\"Configuration validation failed: {str(e)}\")\n        raise\n    \n    return config\n\ndef save_config(config: IsekaiZenConfig, config_path: str) -> None:\n    \"\"\"\n    Save configuration to a JSON file."
    },
    "save_config": {
      "start_line": 65,
      "end_line": 124,
      "parameters": [
        {
          "name": "config",
          "type": "IsekaiZenConfig"
        },
        {
          "name": "config_path",
          "type": "str"
        }
      ],
      "return_type": null,
      "calls": [
        {
          "name": "os.makedirs",
          "line": 77
        },
        {
          "name": "os.path.dirname",
          "line": 77
        },
        {
          "name": "logger.info",
          "line": 120
        },
        {
          "name": "os.path.abspath",
          "line": 77
        },
        {
          "name": "open",
          "line": 118
        },
        {
          "name": "json.dump",
          "line": 119
        },
        {
          "name": "ConfigurationError",
          "line": 122
        },
        {
          "name": "str",
          "line": 122
        }
      ],
      "docstring": "\n    Save configuration to a JSON file.\n    \n    Args:\n        config: Configuration to save\n        config_path: Path to save configuration file\n        \n    Raises:\n        ConfigurationError: If the configuration cannot be saved\n    ",
      "code_snippet": "    return config\n\ndef save_config(config: IsekaiZenConfig, config_path: str) -> None:\n    \"\"\"\n    Save configuration to a JSON file.\n    \n    Args:\n        config: Configuration to save\n        config_path: Path to save configuration file\n        \n    Raises:\n        ConfigurationError: If the configuration cannot be saved\n    \"\"\"\n    # Create directory if it doesn't exist\n    os.makedirs(os.path.dirname(os.path.abspath(config_path)), exist_ok=True)\n    \n    # Convert to dictionary\n    config_dict = {\n        'eve': {\n            'weight_adjustment_range': config.eve.weight_adjustment_range,\n            'weight_range_iris': config.eve.weight_range_iris,\n            'debug_ratios': config.eve.debug_ratios,\n            'debug_bounds': config.eve.debug_bounds,\n            'lr_check_interval': config.eve.lr_check_interval,\n            'fibonacci_intervals': config.eve.fibonacci_intervals,\n            'warmup_epochs': config.eve.warmup_epochs,\n            'warmup_initial_lr_factor': config.eve.warmup_initial_lr_factor\n        },\n        'training': {\n            'batch_size': config.training.batch_size,\n            'epochs': config.training.epochs,\n            'use_augmentation': config.training.use_augmentation,\n            'adaptive_batch_size': config.training.adaptive_batch_size,\n            'min_batch_size': config.training.min_batch_size,\n            'max_batch_size': config.training.max_batch_size,\n            'early_stopping': config.training.early_stopping,\n            'patience': config.training.patience\n        },\n        'model': {\n            'model_type': config.model.model_type,\n            'use_pretrained': config.model.use_pretrained,\n            'num_classes': config.model.num_classes,\n            'input_channels': config.model.input_channels,\n            'input_size': config.model.input_size\n        },\n        'data': {\n            'dataset': config.data.dataset,\n            'data_dir': config.data.data_dir,\n            'pattern_map_path': config.data.pattern_map_path,\n            'augmentation_factor': config.data.augmentation_factor\n        }\n    }\n    \n    # Save to file\n    try:\n        with open(config_path, 'w') as f:\n            json.dump(config_dict, f, indent=2)\n        logger.info(f\"Configuration saved to {config_path}\")\n    except Exception as e:\n        raise ConfigurationError(f\"Failed to save configuration to {config_path}: {str(e)}\")\n\ndef create_default_config_file(config_path: str) -> None:\n    \"\"\"\n    Create a default configuration file."
    },
    "create_default_config_file": {
      "start_line": 124,
      "end_line": 141,
      "parameters": [
        {
          "name": "config_path",
          "type": "str"
        }
      ],
      "return_type": null,
      "calls": [
        {
          "name": "IsekaiZenConfig",
          "line": 135
        },
        {
          "name": "save_config",
          "line": 138
        },
        {
          "name": "logger.info",
          "line": 139
        }
      ],
      "docstring": "\n    Create a default configuration file.\n    \n    Args:\n        config_path: Path to save default configuration file\n        \n    Raises:\n        ConfigurationError: If the configuration file cannot be created\n    ",
      "code_snippet": "        raise ConfigurationError(f\"Failed to save configuration to {config_path}: {str(e)}\")\n\ndef create_default_config_file(config_path: str) -> None:\n    \"\"\"\n    Create a default configuration file.\n    \n    Args:\n        config_path: Path to save default configuration file\n        \n    Raises:\n        ConfigurationError: If the configuration file cannot be created\n    \"\"\"\n    # Create default configuration\n    config = IsekaiZenConfig()\n    \n    # Save to file\n    save_config(config, config_path)\n    logger.info(f\"Default configuration file created at {config_path}\")\n    \ndef convert_dict_to_config(config_dict: Dict[str, Any]) -> IsekaiZenConfig:\n    \"\"\"\n    Convert a dictionary to an IsekaiZenConfig object."
    },
    "convert_dict_to_config": {
      "start_line": 141,
      "end_line": 156,
      "parameters": [
        {
          "name": "config_dict"
        }
      ],
      "return_type": "IsekaiZenConfig",
      "calls": [
        {
          "name": "IsekaiZenConfig.from_dict",
          "line": 154
        }
      ],
      "docstring": "\n    Convert a dictionary to an IsekaiZenConfig object.\n    \n    Args:\n        config_dict: Dictionary with configuration values\n        \n    Returns:\n        IsekaiZenConfig: Validated configuration object\n        \n    Raises:\n        ConfigurationError: If the configuration is invalid\n    ",
      "code_snippet": "    logger.info(f\"Default configuration file created at {config_path}\")\n    \ndef convert_dict_to_config(config_dict: Dict[str, Any]) -> IsekaiZenConfig:\n    \"\"\"\n    Convert a dictionary to an IsekaiZenConfig object.\n    \n    Args:\n        config_dict: Dictionary with configuration values\n        \n    Returns:\n        IsekaiZenConfig: Validated configuration object\n        \n    Raises:\n        ConfigurationError: If the configuration is invalid\n    \"\"\"\n    return IsekaiZenConfig.from_dict(config_dict)"
    }
  },
  "constants": {}
}