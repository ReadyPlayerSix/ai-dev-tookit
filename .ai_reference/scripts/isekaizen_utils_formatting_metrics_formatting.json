{
  "path": "D:\\Projects\\isekaiZen\\machine-learning-optimizer\\isekaizen\\utils\\formatting\\metrics_formatting.py",
  "imports": [
    {
      "name": "logging",
      "line": 11
    }
  ],
  "classes": {},
  "functions": {
    "format_metrics_table": {
      "start_line": 16,
      "end_line": 64,
      "parameters": [
        {
          "name": "metrics_dict"
        },
        {
          "name": "title"
        },
        {
          "name": "min_width"
        }
      ],
      "return_type": null,
      "calls": [
        {
          "name": "max",
          "line": 42
        },
        {
          "name": "max",
          "line": 43
        },
        {
          "name": "max",
          "line": 46
        },
        {
          "name": "max",
          "line": 47
        },
        {
          "name": "metrics_dict.items",
          "line": 55
        },
        {
          "name": "....join",
          "line": 62
        },
        {
          "name": "isinstance",
          "line": 56
        },
        {
          "name": "lines.append",
          "line": 60
        },
        {
          "name": "len",
          "line": 42
        },
        {
          "name": "len",
          "line": 43
        },
        {
          "name": "str",
          "line": 59
        },
        {
          "name": "str",
          "line": 42
        },
        {
          "name": "metrics_dict.keys",
          "line": 42
        },
        {
          "name": "metrics_dict.values",
          "line": 43
        },
        {
          "name": "isinstance",
          "line": 43
        },
        {
          "name": "str",
          "line": 43
        },
        {
          "name": "str",
          "line": 60
        }
      ],
      "docstring": "\n    Format metrics as a readable table with aligned columns.\n    \n    This function takes a dictionary of metrics and formats them as a\n    well-aligned table with appropriate column widths.\n    \n    Args:\n        metrics_dict (dict): Dictionary of metrics to format\n        title (str, optional): Title for the table. Defaults to \"Metrics\".\n        min_width (int, optional): Minimum width for columns. Defaults to 15.\n        \n    Returns:\n        str: Formatted table string\n        \n    Example:\n        >>> metrics = {'Accuracy': 95.2, 'Loss': 0.123, 'F1': 0.876}\n        >>> print(format_metrics_table(metrics, title=\"Results\"))\n        \n        Results\n        -----------------\n        Accuracy      |         95.2000\n        Loss          |          0.1230\n        F1            |          0.8760\n    ",
      "code_snippet": "logger = logging.getLogger(__name__)\n\ndef format_metrics_table(metrics_dict, title=\"Metrics\", min_width=15):\n    \"\"\"\n    Format metrics as a readable table with aligned columns.\n    \n    This function takes a dictionary of metrics and formats them as a\n    well-aligned table with appropriate column widths.\n    \n    Args:\n        metrics_dict (dict): Dictionary of metrics to format\n        title (str, optional): Title for the table. Defaults to \"Metrics\".\n        min_width (int, optional): Minimum width for columns. Defaults to 15.\n        \n    Returns:\n        str: Formatted table string\n        \n    Example:\n        >>> metrics = {'Accuracy': 95.2, 'Loss': 0.123, 'F1': 0.876}\n        >>> print(format_metrics_table(metrics, title=\"Results\"))\n        \n        Results\n        -----------------\n        Accuracy      |         95.2000\n        Loss          |          0.1230\n        F1            |          0.8760\n    \"\"\"\n    # Calculate column widths\n    key_width = max(len(str(k)) for k in metrics_dict.keys())\n    val_width = max(len(f\"{v:.4f}\" if isinstance(v, float) else str(v)) for v in metrics_dict.values())\n    \n    # Ensure minimum width\n    key_width = max(key_width, min_width)\n    val_width = max(val_width, min_width)\n    \n    # Create header\n    total_width = key_width + val_width + 3  # 3 for spacing and separator\n    header = f\"\\n{title}\\n\" + \"-\" * total_width\n    \n    # Format each line\n    lines = [header]\n    for key, value in metrics_dict.items():\n        if isinstance(value, float):\n            val_str = f\"{value:.4f}\"\n        else:\n            val_str = str(value)\n        lines.append(f\"{str(key):<{key_width}} | {val_str:>{val_width}}\")\n    \n    return \"\\n\".join(lines)\n\ndef log_section(title, width=80):\n    \"\"\"\n    Print a clearly defined section header in the log."
    },
    "log_section": {
      "start_line": 64,
      "end_line": 83,
      "parameters": [
        {
          "name": "title"
        },
        {
          "name": "width"
        }
      ],
      "return_type": null,
      "calls": [
        {
          "name": "logger.info",
          "line": 79
        },
        {
          "name": "logger.info",
          "line": 80
        },
        {
          "name": "logger.info",
          "line": 81
        },
        {
          "name": "....format",
          "line": 80
        },
        {
          "name": "title.center",
          "line": 80
        }
      ],
      "docstring": "\n    Print a clearly defined section header in the log.\n    \n    Args:\n        title (str): Title for the section\n        width (int, optional): Width of the section header. Defaults to 80.\n        \n    Example:\n        >>> log_section(\"Training Results\")\n        \n        ================================================================================\n                                      Training Results                                  \n        ================================================================================\n    ",
      "code_snippet": "    return \"\\n\".join(lines)\n\ndef log_section(title, width=80):\n    \"\"\"\n    Print a clearly defined section header in the log.\n    \n    Args:\n        title (str): Title for the section\n        width (int, optional): Width of the section header. Defaults to 80.\n        \n    Example:\n        >>> log_section(\"Training Results\")\n        \n        ================================================================================\n                                      Training Results                                  \n        ================================================================================\n    \"\"\"\n    logger.info(\"\\n\" + \"=\" * width)\n    logger.info(\"{}\".format(title.center(width)))\n    logger.info(\"=\" * width)"
    }
  },
  "constants": {}
}