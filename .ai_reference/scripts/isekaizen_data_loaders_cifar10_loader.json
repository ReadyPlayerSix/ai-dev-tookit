{
  "path": "D:\\Projects\\isekaiZen\\machine-learning-optimizer\\isekaizen\\data\\loaders\\cifar10_loader.py",
  "imports": [
    {
      "name": "torchvision",
      "line": 10
    },
    {
      "name": "torchvision.transforms",
      "line": 11
    }
  ],
  "classes": {},
  "functions": {
    "load_cifar10_data": {
      "start_line": 13,
      "end_line": 52,
      "parameters": [
        {
          "name": "input_size"
        }
      ],
      "return_type": null,
      "calls": [
        {
          "name": "transforms.Compose",
          "line": 30
        },
        {
          "name": "transforms.Compose",
          "line": 37
        },
        {
          "name": "torchvision.datasets.CIFAR10",
          "line": 44
        },
        {
          "name": "torchvision.datasets.CIFAR10",
          "line": 47
        },
        {
          "name": "transforms.RandomHorizontalFlip",
          "line": 32
        },
        {
          "name": "transforms.ToTensor",
          "line": 33
        },
        {
          "name": "transforms.Normalize",
          "line": 34
        },
        {
          "name": "transforms.Normalize",
          "line": 40
        },
        {
          "name": "transforms.Resize",
          "line": 31
        },
        {
          "name": "transforms.RandomCrop",
          "line": 31
        },
        {
          "name": "transforms.Resize",
          "line": 38
        },
        {
          "name": "transforms.ToTensor",
          "line": 38
        },
        {
          "name": "transforms.ToTensor",
          "line": 39
        }
      ],
      "docstring": "\n    Load and prepare CIFAR-10 dataset.\n    \n    This function loads the CIFAR-10 dataset and applies appropriate transformations\n    for training and testing. It handles resizing if the requested input size\n    differs from the default 32x32.\n    \n    Args:\n        input_size (int): Input image size (both width and height)\n        \n    Returns:\n        tuple: (train_dataset, test_dataset) containing the prepared datasets\n    ",
      "code_snippet": "import torchvision.transforms as transforms\n\ndef load_cifar10_data(input_size=32):\n    \"\"\"\n    Load and prepare CIFAR-10 dataset.\n    \n    This function loads the CIFAR-10 dataset and applies appropriate transformations\n    for training and testing. It handles resizing if the requested input size\n    differs from the default 32x32.\n    \n    Args:\n        input_size (int): Input image size (both width and height)\n        \n    Returns:\n        tuple: (train_dataset, test_dataset) containing the prepared datasets\n    \"\"\"\n    # Data transforms\n    need_resize = input_size != 32\n    \n    transform_train = transforms.Compose([\n        transforms.Resize(input_size) if need_resize else transforms.RandomCrop(32, padding=4),\n        transforms.RandomHorizontalFlip(),\n        transforms.ToTensor(),\n        transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.2010)),\n    ])\n\n    transform_test = transforms.Compose([\n        transforms.Resize(input_size) if need_resize else transforms.ToTensor(),\n        transforms.ToTensor() if need_resize else lambda x: x,  # Add ToTensor only if we're resizing\n        transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.2010)),\n    ])\n\n    # Load datasets\n    trainset = torchvision.datasets.CIFAR10(\n        root='./data', train=True, download=True, transform=transform_train)\n\n    testset = torchvision.datasets.CIFAR10(\n        root='./data', train=False, download=True, transform=transform_test)\n\n    return trainset, testset"
    }
  },
  "constants": {}
}