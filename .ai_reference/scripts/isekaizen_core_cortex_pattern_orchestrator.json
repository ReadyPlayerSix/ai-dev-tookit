{
  "path": "D:\\Projects\\isekaiZen\\machine-learning-optimizer\\isekaizen\\core\\cortex\\pattern_orchestrator.py",
  "imports": [
    {
      "name": "typing.Dict",
      "line": 4
    },
    {
      "name": "typing.List",
      "line": 4
    },
    {
      "name": "typing.Any",
      "line": 4
    },
    {
      "name": "typing.Optional",
      "line": 4
    },
    {
      "name": "numpy",
      "line": 5
    },
    {
      "name": "enum.Enum",
      "line": 6
    },
    {
      "name": "torch",
      "line": 7
    },
    {
      "name": "logging",
      "line": 8
    },
    {
      "name": "isekaizen.core.cortex.semantic_core.SemanticPattern",
      "line": 10
    },
    {
      "name": "isekaizen.core.cortex.semantic_core.SemanticPatternRegistry",
      "line": 10
    },
    {
      "name": "isekaizen.core.cortex.semantic_core.DomainPatternExtractor",
      "line": 10
    },
    {
      "name": "isekaizen.core.cortex.semantic_core.SemanticType",
      "line": 10
    }
  ],
  "classes": {
    "OrchestrationMode": {
      "start_line": 17,
      "end_line": 22,
      "methods": {},
      "class_variables": [
        {
          "name": "SINGLE",
          "line": 18
        },
        {
          "name": "BATCH",
          "line": 19
        },
        {
          "name": "ADAPTIVE",
          "line": 20
        }
      ],
      "bases": [
        "Enum"
      ]
    },
    "PatternOrchestrator": {
      "start_line": 22,
      "end_line": 185,
      "methods": {
        "__init__": {
          "start_line": 24,
          "end_line": 56,
          "parameters": [
            {
              "name": "self"
            }
          ],
          "return_type": null,
          "calls": [
            {
              "name": "torch.device",
              "line": 25
            },
            {
              "name": "SemanticPatternRegistry",
              "line": 26
            },
            {
              "name": "DomainPatternExtractor",
              "line": 27
            },
            {
              "name": "logging.getLogger",
              "line": 28
            },
            {
              "name": "torch.cuda.is_available",
              "line": 25
            }
          ],
          "code_snippet": "class PatternOrchestrator:\n    \"\"\"Orchestrates semantic pattern recognition across specialists\"\"\"\n    def __init__(self):\n        self.device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n        self.pattern_registry = SemanticPatternRegistry()\n        self.pattern_extractor = DomainPatternExtractor()\n        self.logger = logging.getLogger(__name__)\n        \n        # Configuration\n        self.mode = OrchestrationMode.ADAPTIVE\n        self.batch_size = 1\n        self.max_batch_size = 16\n        \n        # Pattern tracking by stage\n        self.pattern_stages = {\n            \"input\": {},\n            \"semantic\": {},\n            \"processed\": {},\n            \"output\": {}\n        }\n        \n        # Performance tracking\n        self.metrics = {\n            \"patterns_processed\": 0,\n            \"semantic_patterns_recognized\": 0,\n            \"batch_processing_efficiency\": 0.0,\n            \"average_processing_time\": 0.0,\n            \"domain_stats\": {},\n            \"cortex_flow_metrics\": {\n                \"input_patterns\": 0,\n                \"semantic_patterns\": 0,\n                \"processed_patterns\": 0,\n                \"output_patterns\": 0\n            }\n        }\n    \n    async def process_pattern_batch(self, "
        },
        "get_pattern_flow_metrics": {
          "start_line": 173,
          "end_line": 185,
          "parameters": [
            {
              "name": "self"
            }
          ],
          "return_type": "complex_type",
          "calls": [
            {
              "name": "len",
              "line": 178
            },
            {
              "name": "self.pattern_stages.items",
              "line": 180
            },
            {
              "name": "stage_patterns.items",
              "line": 179
            }
          ],
          "docstring": "Get metrics about pattern flow through stages",
          "code_snippet": "        return output\n    \n    def get_pattern_flow_metrics(self) -> Dict[str, Any]:\n        \"\"\"Get metrics about pattern flow through stages\"\"\"\n        return {\n            \"flow_metrics\": self.metrics[\"cortex_flow_metrics\"],\n            \"stage_counts\": {\n                stage: {domain: len(patterns) \n                       for domain, patterns in stage_patterns.items()}\n                for stage, stage_patterns in self.pattern_stages.items()\n            },\n            \"processing_efficiency\": self.metrics[\"batch_processing_efficiency\"],\n            \"domain_stats\": self.metrics[\"domain_stats\"]\n        }"
        }
      },
      "class_variables": [],
      "bases": [],
      "docstring": "Orchestrates semantic pattern recognition across specialists"
    }
  },
  "functions": {},
  "constants": {}
}