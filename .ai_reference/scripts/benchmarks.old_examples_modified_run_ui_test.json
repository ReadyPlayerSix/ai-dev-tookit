{
  "path": "D:\\Projects\\isekaiZen\\machine-learning-optimizer\\benchmarks.old\\examples\\modified\\run_ui_test.py",
  "imports": [
    {
      "name": "os",
      "line": 8
    },
    {
      "name": "sys",
      "line": 9
    },
    {
      "name": "logging",
      "line": 10
    },
    {
      "name": "importlib.util",
      "line": 11
    },
    {
      "name": "argparse",
      "line": 12
    },
    {
      "name": "urwid",
      "line": 26
    },
    {
      "name": "psutil",
      "line": 35
    },
    {
      "name": "torch",
      "line": 44
    },
    {
      "name": "torchvision",
      "line": 53
    },
    {
      "name": "isekaizen.optimizers.eve_unified_ratio.EVEUnifiedRatio",
      "line": 73
    },
    {
      "name": "terminal_ui.TerminalUI",
      "line": 104
    },
    {
      "name": "terminal_ui.UrwidTerminalUI",
      "line": 127
    },
    {
      "name": "traceback",
      "line": 117
    },
    {
      "name": "traceback",
      "line": 141
    },
    {
      "name": "traceback",
      "line": 180
    }
  ],
  "classes": {},
  "functions": {
    "check_imports": {
      "start_line": 20,
      "end_line": 62,
      "parameters": [],
      "return_type": null,
      "calls": [
        {
          "name": "logger.info",
          "line": 22
        },
        {
          "name": "logger.info",
          "line": 27
        },
        {
          "name": "logger.info",
          "line": 36
        },
        {
          "name": "logger.info",
          "line": 45
        },
        {
          "name": "logger.info",
          "line": 54
        },
        {
          "name": "logger.error",
          "line": 29
        },
        {
          "name": "logger.info",
          "line": 30
        },
        {
          "name": "logger.error",
          "line": 38
        },
        {
          "name": "logger.info",
          "line": 39
        },
        {
          "name": "logger.error",
          "line": 47
        },
        {
          "name": "logger.info",
          "line": 48
        },
        {
          "name": "logger.error",
          "line": 56
        },
        {
          "name": "logger.info",
          "line": 57
        }
      ],
      "docstring": "Check if required modules can be imported.",
      "code_snippet": "logger = logging.getLogger(__name__)\n\ndef check_imports():\n    \"\"\"Check if required modules can be imported.\"\"\"\n    logger.info(\"Checking required imports...\")\n    \n    # Check urwid\n    try:\n        import urwid\n        logger.info(\"\u2713 urwid module is available\")\n    except ImportError as e:\n        logger.error(f\"\u2717 urwid module not available: {e}\")\n        logger.info(\"  Run: pip install urwid\")\n        return False\n    \n    # Check psutil\n    try:\n        import psutil\n        logger.info(\"\u2713 psutil module is available\")\n    except ImportError as e:\n        logger.error(f\"\u2717 psutil module not available: {e}\")\n        logger.info(\"  Run: pip install psutil\")\n        return False\n    \n    # Check torch\n    try:\n        import torch\n        logger.info(\"\u2713 torch module is available\")\n    except ImportError as e:\n        logger.error(f\"\u2717 torch module not available: {e}\")\n        logger.info(\"  Run: pip install torch\")\n        return False\n    \n    # Check torchvision\n    try:\n        import torchvision\n        logger.info(\"\u2713 torchvision module is available\")\n    except ImportError as e:\n        logger.error(f\"\u2717 torchvision module not available: {e}\")\n        logger.info(\"  Run: pip install torchvision\")\n        return False\n    \n    return True\n\ndef check_isekaizen_optimizers():\n    \"\"\"Check if IsekaiZen optimizers can be imported.\"\"\"\n    logger.info(\"Checking IsekaiZen optimizers...\")"
    },
    "check_isekaizen_optimizers": {
      "start_line": 62,
      "end_line": 98,
      "parameters": [],
      "return_type": null,
      "calls": [
        {
          "name": "logger.info",
          "line": 64
        },
        {
          "name": "os.path.dirname",
          "line": 67
        },
        {
          "name": "os.path.abspath",
          "line": 68
        },
        {
          "name": "sys.path.insert",
          "line": 69
        },
        {
          "name": "os.path.abspath",
          "line": 67
        },
        {
          "name": "os.path.join",
          "line": 68
        },
        {
          "name": "logger.info",
          "line": 74
        },
        {
          "name": "logger.error",
          "line": 77
        },
        {
          "name": "os.path.join",
          "line": 80
        },
        {
          "name": "os.path.exists",
          "line": 81
        },
        {
          "name": "logger.info",
          "line": 82
        },
        {
          "name": "logger.info",
          "line": 83
        },
        {
          "name": "logger.error",
          "line": 85
        },
        {
          "name": "logger.info",
          "line": 86
        },
        {
          "name": "os.path.join",
          "line": 90
        },
        {
          "name": "os.path.exists",
          "line": 91
        },
        {
          "name": "logger.info",
          "line": 92
        },
        {
          "name": "logger.error",
          "line": 94
        }
      ],
      "docstring": "Check if IsekaiZen optimizers can be imported.",
      "code_snippet": "    return True\n\ndef check_isekaizen_optimizers():\n    \"\"\"Check if IsekaiZen optimizers can be imported.\"\"\"\n    logger.info(\"Checking IsekaiZen optimizers...\")\n    \n    # Add parent directory to path\n    script_dir = os.path.dirname(os.path.abspath(__file__))\n    parent_dir = os.path.abspath(os.path.join(script_dir, '../..'))\n    sys.path.insert(0, parent_dir)\n    \n    # Try importing the optimizers\n    try:\n        from isekaizen.optimizers.eve_unified_ratio import EVEUnifiedRatio\n        logger.info(\"\u2713 EVEUnifiedRatio imported successfully\")\n        return True\n    except ImportError as e:\n        logger.error(f\"\u2717 Error importing EVEUnifiedRatio: {e}\")\n        \n        # Check if the file exists\n        optimizer_path = os.path.join(parent_dir, 'isekaizen', 'optimizers', 'eve_unified_ratio.py')\n        if os.path.exists(optimizer_path):\n            logger.info(f\"  File exists at: {optimizer_path}\")\n            logger.info(\"  The issue may be with Python path or module structure\")\n        else:\n            logger.error(f\"  File not found at: {optimizer_path}\")\n            logger.info(\"  Check if the file exists in the expected location\")\n        \n        # Check __init__.py files\n        for path in ['isekaizen', 'isekaizen/optimizers']:\n            init_path = os.path.join(parent_dir, path, '__init__.py')\n            if os.path.exists(init_path):\n                logger.info(f\"  \u2713 {init_path} exists\")\n            else:\n                logger.error(f\"  \u2717 {init_path} is missing\")\n        \n        return False\n\ndef test_terminal_ui_basic():\n    \"\"\"Test basic terminal UI functionality.\"\"\"\n    logger.info(\"Testing terminal_ui.py basic functionality...\")"
    },
    "test_terminal_ui_basic": {
      "start_line": 98,
      "end_line": 121,
      "parameters": [],
      "return_type": null,
      "calls": [
        {
          "name": "logger.info",
          "line": 100
        },
        {
          "name": "logger.info",
          "line": 105
        },
        {
          "name": "TerminalUI",
          "line": 108
        },
        {
          "name": "logger.info",
          "line": 109
        },
        {
          "name": "logger.info",
          "line": 112
        },
        {
          "name": "logger.error",
          "line": 116
        },
        {
          "name": "logger.error",
          "line": 118
        },
        {
          "name": "traceback.format_exc",
          "line": 118
        }
      ],
      "docstring": "Test basic terminal UI functionality.",
      "code_snippet": "        return False\n\ndef test_terminal_ui_basic():\n    \"\"\"Test basic terminal UI functionality.\"\"\"\n    logger.info(\"Testing terminal_ui.py basic functionality...\")\n    \n    try:\n        # Import terminal_ui\n        from terminal_ui import TerminalUI\n        logger.info(\"\u2713 TerminalUI class imported successfully\")\n        \n        # Create an instance\n        ui = TerminalUI()\n        logger.info(\"\u2713 TerminalUI instance created successfully\")\n        \n        # Test initialization\n        logger.info(\"\u2713 TerminalUI initialized - hardware info retrieved\")\n        \n        return True\n    except Exception as e:\n        logger.error(f\"\u2717 Error in terminal_ui.py: {e}\")\n        import traceback\n        logger.error(traceback.format_exc())\n        return False\n\ndef test_urwid_ui():\n    \"\"\"Test urwid UI functionality.\"\"\"\n    logger.info(\"Testing urwid UI functionality...\")"
    },
    "test_urwid_ui": {
      "start_line": 121,
      "end_line": 145,
      "parameters": [],
      "return_type": null,
      "calls": [
        {
          "name": "logger.info",
          "line": 123
        },
        {
          "name": "logger.info",
          "line": 128
        },
        {
          "name": "UrwidTerminalUI",
          "line": 131
        },
        {
          "name": "logger.info",
          "line": 132
        },
        {
          "name": "hasattr",
          "line": 135
        },
        {
          "name": "logger.info",
          "line": 136
        },
        {
          "name": "logger.error",
          "line": 140
        },
        {
          "name": "logger.error",
          "line": 142
        },
        {
          "name": "traceback.format_exc",
          "line": 142
        }
      ],
      "docstring": "Test urwid UI functionality.",
      "code_snippet": "        return False\n\ndef test_urwid_ui():\n    \"\"\"Test urwid UI functionality.\"\"\"\n    logger.info(\"Testing urwid UI functionality...\")\n    \n    try:\n        # Import UrwidTerminalUI\n        from terminal_ui import UrwidTerminalUI\n        logger.info(\"\u2713 UrwidTerminalUI class imported successfully\")\n        \n        # Create an instance\n        ui = UrwidTerminalUI()\n        logger.info(\"\u2713 UrwidTerminalUI instance created successfully\")\n        \n        # Don't actually run the UI, but check if its color palette is defined\n        if hasattr(ui, 'PALETTE'):\n            logger.info(\"\u2713 UrwidTerminalUI PALETTE is defined\")\n        \n        return True\n    except Exception as e:\n        logger.error(f\"\u2717 Error in UrwidTerminalUI: {e}\")\n        import traceback\n        logger.error(traceback.format_exc())\n        return False\n\ndef test_run_terminal_ui():\n    \"\"\"Test run_terminal_ui.py functionality.\"\"\"\n    logger.info(\"Testing run_terminal_ui.py basic functionality...\")"
    },
    "test_run_terminal_ui": {
      "start_line": 145,
      "end_line": 184,
      "parameters": [],
      "return_type": null,
      "calls": [
        {
          "name": "logger.info",
          "line": 147
        },
        {
          "name": "importlib.util.spec_from_file_location",
          "line": 151
        },
        {
          "name": "importlib.util.module_from_spec",
          "line": 155
        },
        {
          "name": "spec.loader.exec_module",
          "line": 156
        },
        {
          "name": "logger.info",
          "line": 158
        },
        {
          "name": "hasattr",
          "line": 171
        },
        {
          "name": "os.path.join",
          "line": 153
        },
        {
          "name": "hasattr",
          "line": 161
        },
        {
          "name": "callable",
          "line": 161
        },
        {
          "name": "logger.info",
          "line": 162
        },
        {
          "name": "hasattr",
          "line": 164
        },
        {
          "name": "callable",
          "line": 164
        },
        {
          "name": "logger.info",
          "line": 165
        },
        {
          "name": "hasattr",
          "line": 167
        },
        {
          "name": "callable",
          "line": 167
        },
        {
          "name": "logger.info",
          "line": 168
        },
        {
          "name": "logger.error",
          "line": 179
        },
        {
          "name": "logger.error",
          "line": 181
        },
        {
          "name": "os.path.dirname",
          "line": 153
        },
        {
          "name": "logger.info",
          "line": 173
        },
        {
          "name": "logger.error",
          "line": 175
        },
        {
          "name": "traceback.format_exc",
          "line": 181
        },
        {
          "name": "os.path.abspath",
          "line": 153
        }
      ],
      "docstring": "Test run_terminal_ui.py functionality.",
      "code_snippet": "        return False\n\ndef test_run_terminal_ui():\n    \"\"\"Test run_terminal_ui.py functionality.\"\"\"\n    logger.info(\"Testing run_terminal_ui.py basic functionality...\")\n    \n    try:\n        # Import run_terminal_ui\n        spec = importlib.util.spec_from_file_location(\n            \"run_terminal_ui\", \n            os.path.join(os.path.dirname(os.path.abspath(__file__)), \"run_terminal_ui.py\")\n        )\n        run_terminal_ui = importlib.util.module_from_spec(spec)\n        spec.loader.exec_module(run_terminal_ui)\n        \n        logger.info(\"\u2713 run_terminal_ui.py imported successfully\")\n        \n        # Check if key functions are defined\n        if hasattr(run_terminal_ui, 'get_model') and callable(run_terminal_ui.get_model):\n            logger.info(\"\u2713 get_model function exists\")\n        \n        if hasattr(run_terminal_ui, 'get_dataset') and callable(run_terminal_ui.get_dataset):\n            logger.info(\"\u2713 get_dataset function exists\")\n        \n        if hasattr(run_terminal_ui, 'train_model') and callable(run_terminal_ui.train_model):\n            logger.info(\"\u2713 train_model function exists\")\n        \n        # Check if IsekaiZen optimizers are available\n        if hasattr(run_terminal_ui, 'ISEKAIZEN_AVAILABLE'):\n            if run_terminal_ui.ISEKAIZEN_AVAILABLE:\n                logger.info(\"\u2713 IsekaiZen optimizers are available\")\n            else:\n                logger.error(\"\u2717 IsekaiZen optimizers are not available\")\n        \n        return True\n    except Exception as e:\n        logger.error(f\"\u2717 Error in run_terminal_ui.py: {e}\")\n        import traceback\n        logger.error(traceback.format_exc())\n        return False\n\ndef main():\n    \"\"\"Main function to run the test script.\"\"\"\n    parser = argparse.ArgumentParser(description=\"IsekaiZen UI Test Script\")"
    },
    "main": {
      "start_line": 184,
      "end_line": 223,
      "parameters": [],
      "return_type": null,
      "calls": [
        {
          "name": "argparse.ArgumentParser",
          "line": 186
        },
        {
          "name": "parser.add_argument",
          "line": 187
        },
        {
          "name": "parser.add_argument",
          "line": 188
        },
        {
          "name": "parser.add_argument",
          "line": 189
        },
        {
          "name": "parser.add_argument",
          "line": 190
        },
        {
          "name": "parser.add_argument",
          "line": 191
        },
        {
          "name": "parser.parse_args",
          "line": 192
        },
        {
          "name": "print",
          "line": 194
        },
        {
          "name": "print",
          "line": 195
        },
        {
          "name": "print",
          "line": 196
        },
        {
          "name": "print",
          "line": 219
        },
        {
          "name": "print",
          "line": 220
        },
        {
          "name": "print",
          "line": 221
        },
        {
          "name": "check_imports",
          "line": 200
        },
        {
          "name": "print",
          "line": 201
        },
        {
          "name": "check_isekaizen_optimizers",
          "line": 204
        },
        {
          "name": "print",
          "line": 205
        },
        {
          "name": "test_terminal_ui_basic",
          "line": 208
        },
        {
          "name": "print",
          "line": 209
        },
        {
          "name": "test_urwid_ui",
          "line": 212
        },
        {
          "name": "print",
          "line": 213
        },
        {
          "name": "test_run_terminal_ui",
          "line": 216
        },
        {
          "name": "print",
          "line": 217
        }
      ],
      "docstring": "Main function to run the test script.",
      "code_snippet": "        return False\n\ndef main():\n    \"\"\"Main function to run the test script.\"\"\"\n    parser = argparse.ArgumentParser(description=\"IsekaiZen UI Test Script\")\n    parser.add_argument(\"--skip-imports\", action=\"store_true\", help=\"Skip checking imports\")\n    parser.add_argument(\"--skip-optimizers\", action=\"store_true\", help=\"Skip checking IsekaiZen optimizers\")\n    parser.add_argument(\"--skip-terminal-ui\", action=\"store_true\", help=\"Skip testing terminal_ui.py\")\n    parser.add_argument(\"--skip-urwid-ui\", action=\"store_true\", help=\"Skip testing urwid UI\")\n    parser.add_argument(\"--skip-run-terminal-ui\", action=\"store_true\", help=\"Skip testing run_terminal_ui.py\")\n    args = parser.parse_args()\n    \n    print(\"=\" * 50)\n    print(\"IsekaiZen UI Test Script\")\n    print(\"=\" * 50)\n    \n    # Run tests based on arguments\n    if not args.skip_imports:\n        check_imports()\n        print()\n    \n    if not args.skip_optimizers:\n        check_isekaizen_optimizers()\n        print()\n    \n    if not args.skip_terminal_ui:\n        test_terminal_ui_basic()\n        print()\n    \n    if not args.skip_urwid_ui:\n        test_urwid_ui()\n        print()\n    \n    if not args.skip_run_terminal_ui:\n        test_run_terminal_ui()\n        print()\n    \n    print(\"=\" * 50)\n    print(\"Test script completed\")\n    print(\"=\" * 50)\n\nif __name__ == \"__main__\":\n    main()"
    }
  },
  "constants": {}
}